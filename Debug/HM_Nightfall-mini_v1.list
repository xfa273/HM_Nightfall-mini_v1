
HM_Nightfall-mini_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a74c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800a8e0  0800a8e0  0000b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf4  0800acf4  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf4  0800acf4  0000bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acfc  0800acfc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acfc  0800acfc  0000bcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ad04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000085a4  200001d8  200001d8  0000c1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000877c  2000877c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d65  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315a  00000000  00000000  00021f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  000250c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2e  00000000  00000000  00026428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237e6  00000000  00000000  00027356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173ca  00000000  00000000  0004ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b5c  00000000  00000000  00061f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134a62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006128  00000000  00000000  00134aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8c4 	.word	0x0800a8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a8c4 	.word	0x0800a8c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <buzzer_beep>:
// ブザーを鳴らす
// 引数1：tone
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++

void buzzer_beep(uint16_t tone) {
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
    if (!MF.FLAG.SUCTION) {
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <buzzer_beep+0x78>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d124      	bne.n	800101a <buzzer_beep+0x62>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4818      	ldr	r0, [pc, #96]	@ (8001034 <buzzer_beep+0x7c>)
 8000fd4:	f005 fa4c 	bl	8006470 <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_AUTORELOAD(&htim3, tone);
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <buzzer_beep+0x7c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	88fa      	ldrh	r2, [r7, #6]
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <buzzer_beep+0x7c>)
 8000fe4:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, tone * 0.6);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa9b 	bl	8000524 <__aeabi_i2d>
 8000fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8001028 <buzzer_beep+0x70>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb00 	bl	80005f8 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	490d      	ldr	r1, [pc, #52]	@ (8001034 <buzzer_beep+0x7c>)
 8000ffe:	680c      	ldr	r4, [r1, #0]
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fdd0 	bl	8000ba8 <__aeabi_d2uiz>
 8001008:	4603      	mov	r3, r0
 800100a:	63a3      	str	r3, [r4, #56]	@ 0x38
        HAL_Delay(200);
 800100c:	20c8      	movs	r0, #200	@ 0xc8
 800100e:	f002 fff7 	bl	8004000 <HAL_Delay>
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001012:	2104      	movs	r1, #4
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <buzzer_beep+0x7c>)
 8001016:	f005 faf3 	bl	8006600 <HAL_TIM_PWM_Stop>
    }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	33333333 	.word	0x33333333
 800102c:	3fe33333 	.word	0x3fe33333
 8001030:	200001f8 	.word	0x200001f8
 8001034:	200084c4 	.word	0x200084c4

08001038 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void __io_putchar(int ch) { 
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    uint8_t temp = ch;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &temp, 1, 1); 
 8001046:	f107 010f 	add.w	r1, r7, #15
 800104a:	2301      	movs	r3, #1
 800104c:	2201      	movs	r2, #1
 800104e:	4803      	ldr	r0, [pc, #12]	@ (800105c <__io_putchar+0x24>)
 8001050:	f006 fbcf 	bl	80077f2 <HAL_UART_Transmit>
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200085e4 	.word	0x200085e4

08001060 <read_encoder>:
 */

#include "global.h"

/*エンコーダから速度と位置を取得する*/
void read_encoder(void) {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	af00      	add	r7, sp, #0
    // エンコーダのパルスカウンタを取得
    encoder_count_r = TIM8->CNT;
 8001064:	4b88      	ldr	r3, [pc, #544]	@ (8001288 <read_encoder+0x228>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001070:	4b86      	ldr	r3, [pc, #536]	@ (800128c <read_encoder+0x22c>)
 8001072:	edc3 7a00 	vstr	s15, [r3]
    encoder_count_l = TIM4->CNT;
 8001076:	4b86      	ldr	r3, [pc, #536]	@ (8001290 <read_encoder+0x230>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001082:	4b84      	ldr	r3, [pc, #528]	@ (8001294 <read_encoder+0x234>)
 8001084:	edc3 7a00 	vstr	s15, [r3]

    // パルスカウンタの増加量を速度として取得
    encoder_speed_r = encoder_count_r - 30000;
 8001088:	4b80      	ldr	r3, [pc, #512]	@ (800128c <read_encoder+0x22c>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001298 <read_encoder+0x238>
 8001092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001096:	4b81      	ldr	r3, [pc, #516]	@ (800129c <read_encoder+0x23c>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
    encoder_speed_l = encoder_count_l - 30000;
 800109c:	4b7d      	ldr	r3, [pc, #500]	@ (8001294 <read_encoder+0x234>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001298 <read_encoder+0x238>
 80010a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010aa:	4b7d      	ldr	r3, [pc, #500]	@ (80012a0 <read_encoder+0x240>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]

    // マイナス速度用にパルスカウントを30000にセット
    TIM8->CNT = 30000;
 80010b0:	4b75      	ldr	r3, [pc, #468]	@ (8001288 <read_encoder+0x228>)
 80010b2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM4->CNT = 30000;
 80010b8:	4b75      	ldr	r3, [pc, #468]	@ (8001290 <read_encoder+0x230>)
 80010ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24

    encoder_speed_r = -encoder_speed_r; // 右の速度の符号を補正
 80010c0:	4b76      	ldr	r3, [pc, #472]	@ (800129c <read_encoder+0x23c>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	eef1 7a67 	vneg.f32	s15, s15
 80010ca:	4b74      	ldr	r3, [pc, #464]	@ (800129c <read_encoder+0x23c>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]

    // 速度の換算 →[mm/s]
    // encoder_speed_r = (encoder_speed_r / 4096*4) * (13 / 42) * DIST_ONE_ROT *
    // 1000; encoder_speed_l = (encoder_speed_l / 4096*4) * (13 / 42) *
    // DIST_ONE_ROT * 1000;
    encoder_speed_r = encoder_speed_r * 0.2552815 * D_TIRE * 3.1415;
 80010d0:	4b72      	ldr	r3, [pc, #456]	@ (800129c <read_encoder+0x23c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa37 	bl	8000548 <__aeabi_f2d>
 80010da:	a363      	add	r3, pc, #396	@ (adr r3, 8001268 <read_encoder+0x208>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fa8a 	bl	80005f8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a360      	add	r3, pc, #384	@ (adr r3, 8001270 <read_encoder+0x210>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa81 	bl	80005f8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	a35e      	add	r3, pc, #376	@ (adr r3, 8001278 <read_encoder+0x218>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd6a 	bl	8000be8 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4a61      	ldr	r2, [pc, #388]	@ (800129c <read_encoder+0x23c>)
 8001118:	6013      	str	r3, [r2, #0]
    encoder_speed_l = encoder_speed_l * 0.2552815 * D_TIRE * 3.1415;
 800111a:	4b61      	ldr	r3, [pc, #388]	@ (80012a0 <read_encoder+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	a350      	add	r3, pc, #320	@ (adr r3, 8001268 <read_encoder+0x208>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa65 	bl	80005f8 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a34e      	add	r3, pc, #312	@ (adr r3, 8001270 <read_encoder+0x210>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa5c 	bl	80005f8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	a34b      	add	r3, pc, #300	@ (adr r3, 8001278 <read_encoder+0x218>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd45 	bl	8000be8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a4f      	ldr	r2, [pc, #316]	@ (80012a0 <read_encoder+0x240>)
 8001162:	6013      	str	r3, [r2, #0]

    // 走行距離カウンタを加算
    encoder_distance_r += encoder_speed_r * 0.001;
 8001164:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <read_encoder+0x23c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	a344      	add	r3, pc, #272	@ (adr r3, 8001280 <read_encoder+0x220>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa40 	bl	80005f8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4614      	mov	r4, r2
 800117e:	461d      	mov	r5, r3
 8001180:	4b48      	ldr	r3, [pc, #288]	@ (80012a4 <read_encoder+0x244>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff f87b 	bl	800028c <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd23 	bl	8000be8 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a3f      	ldr	r2, [pc, #252]	@ (80012a4 <read_encoder+0x244>)
 80011a6:	6013      	str	r3, [r2, #0]
    encoder_distance_l += encoder_speed_l * 0.001;
 80011a8:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <read_encoder+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9cb 	bl	8000548 <__aeabi_f2d>
 80011b2:	a333      	add	r3, pc, #204	@ (adr r3, 8001280 <read_encoder+0x220>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4614      	mov	r4, r2
 80011c2:	461d      	mov	r5, r3
 80011c4:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <read_encoder+0x248>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9bd 	bl	8000548 <__aeabi_f2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f859 	bl	800028c <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fd01 	bl	8000be8 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a2f      	ldr	r2, [pc, #188]	@ (80012a8 <read_encoder+0x248>)
 80011ea:	6013      	str	r3, [r2, #0]

    // 並進のPID制御用に格納
    real_velocity = (encoder_speed_r + encoder_speed_l) * 0.5;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <read_encoder+0x23c>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <read_encoder+0x240>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <read_encoder+0x24c>)
 800120a:	f7ff f9f5 	bl	80005f8 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fce7 	bl	8000be8 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <read_encoder+0x250>)
 800121e:	6013      	str	r3, [r2, #0]
    real_distance = (encoder_distance_r + encoder_distance_l) * 0.5;
 8001220:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <read_encoder+0x244>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <read_encoder+0x248>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f988 	bl	8000548 <__aeabi_f2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <read_encoder+0x24c>)
 800123e:	f7ff f9db 	bl	80005f8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fccd 	bl	8000be8 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <read_encoder+0x254>)
 8001252:	6013      	str	r3, [r2, #0]

    // パルスカウントを保存
    previous_encoder_count_r = encoder_count_r;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <read_encoder+0x22c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <read_encoder+0x258>)
 800125a:	6013      	str	r3, [r2, #0]
    previous_encoder_count_l = encoder_count_l;
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <read_encoder+0x234>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <read_encoder+0x25c>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	37718655 	.word	0x37718655
 800126c:	3fd05688 	.word	0x3fd05688
 8001270:	c0000000 	.word	0xc0000000
 8001274:	4037cccc 	.word	0x4037cccc
 8001278:	c083126f 	.word	0xc083126f
 800127c:	400921ca 	.word	0x400921ca
 8001280:	d2f1a9fc 	.word	0xd2f1a9fc
 8001284:	3f50624d 	.word	0x3f50624d
 8001288:	40010400 	.word	0x40010400
 800128c:	20000274 	.word	0x20000274
 8001290:	40000800 	.word	0x40000800
 8001294:	20000278 	.word	0x20000278
 8001298:	46ea6000 	.word	0x46ea6000
 800129c:	20000284 	.word	0x20000284
 80012a0:	20000288 	.word	0x20000288
 80012a4:	2000028c 	.word	0x2000028c
 80012a8:	20000290 	.word	0x20000290
 80012ac:	3fe00000 	.word	0x3fe00000
 80012b0:	2000023c 	.word	0x2000023c
 80012b4:	20000224 	.word	0x20000224
 80012b8:	2000027c 	.word	0x2000027c
 80012bc:	20000280 	.word	0x20000280

080012c0 <read_IMU>:

/*IMUから角速度と角度を取得する*/
void read_IMU(void) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    // 時計回りが正
    ICM20689_DataUpdate();
 80012c4:	f002 f8a6 	bl	8003414 <ICM20689_DataUpdate>
    real_omega = -omega_z_true * KP_IMU;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <read_IMU+0x80>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eef1 7a67 	vneg.f32	s15, s15
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <read_IMU+0x84>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
    IMU_angle += omega_z_true * 0.001;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <read_IMU+0x88>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <read_IMU+0x80>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	a311      	add	r3, pc, #68	@ (adr r3, 8001338 <read_IMU+0x78>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ffc3 	bl	800028c <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fc6b 	bl	8000be8 <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	4a0c      	ldr	r2, [pc, #48]	@ (8001348 <read_IMU+0x88>)
 8001316:	6013      	str	r3, [r2, #0]
    real_angle = IMU_angle;
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <read_IMU+0x88>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <read_IMU+0x8c>)
 800131e:	6013      	str	r3, [r2, #0]
    IMU_acceleration = accel_y_true * 1000;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <read_IMU+0x90>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001354 <read_IMU+0x94>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <read_IMU+0x98>)
 8001330:	edc3 7a00 	vstr	s15, [r3]
}
 8001334:	bf00      	nop
 8001336:	bdb0      	pop	{r4, r5, r7, pc}
 8001338:	d2f1a9fc 	.word	0xd2f1a9fc
 800133c:	3f50624d 	.word	0x3f50624d
 8001340:	20008310 	.word	0x20008310
 8001344:	2000025c 	.word	0x2000025c
 8001348:	20000294 	.word	0x20000294
 800134c:	20000254 	.word	0x20000254
 8001350:	20008318 	.word	0x20008318
 8001354:	447a0000 	.word	0x447a0000
 8001358:	200002b8 	.word	0x200002b8
 800135c:	00000000 	.word	0x00000000

08001360 <calculate_translation>:

/*並進の積算計算*/
void calculate_translation(void) {
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	af00      	add	r7, sp, #0
    // 設定された加速度から並進速度を計算
    velocity_interrupt += acceleration_interrupt * 0.001;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <calculate_translation+0x98>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8ed 	bl	8000548 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	@ (adr r3, 80013f0 <calculate_translation+0x90>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <calculate_translation+0x9c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4620      	mov	r0, r4
 8001390:	4629      	mov	r1, r5
 8001392:	f7fe ff7b 	bl	800028c <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fc23 	bl	8000be8 <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <calculate_translation+0x9c>)
 80013a6:	6013      	str	r3, [r2, #0]

    // 並進速度から目標位置を計算
    target_distance += velocity_interrupt * 0.001;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <calculate_translation+0x9c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8cb 	bl	8000548 <__aeabi_f2d>
 80013b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80013f0 <calculate_translation+0x90>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f91e 	bl	80005f8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <calculate_translation+0xa0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff59 	bl	800028c <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fc01 	bl	8000be8 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <calculate_translation+0xa0>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	bdb0      	pop	{r4, r5, r7, pc}
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	2000020c 	.word	0x2000020c
 80013fc:	20000210 	.word	0x20000210
 8001400:	20000214 	.word	0x20000214
 8001404:	00000000 	.word	0x00000000

08001408 <calculate_rotation>:

/*回転の積算計算*/
void calculate_rotation(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	af00      	add	r7, sp, #0
    // 設定された角加速度から角速度を計算
    omega_interrupt += alpha_interrupt * 0.001;
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <calculate_rotation+0x98>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f899 	bl	8000548 <__aeabi_f2d>
 8001416:	a320      	add	r3, pc, #128	@ (adr r3, 8001498 <calculate_rotation+0x90>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f8ec 	bl	80005f8 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	461d      	mov	r5, r3
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <calculate_rotation+0x9c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff27 	bl	800028c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbcf 	bl	8000be8 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <calculate_rotation+0x9c>)
 800144e:	6013      	str	r3, [r2, #0]
        omega_integral = 0;
    }
    */

    // 角速度から角度を計算
    target_angle += omega_interrupt * 0.001;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <calculate_rotation+0x9c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f877 	bl	8000548 <__aeabi_f2d>
 800145a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001498 <calculate_rotation+0x90>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8ca 	bl	80005f8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <calculate_rotation+0xa0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f869 	bl	8000548 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4620      	mov	r0, r4
 800147c:	4629      	mov	r1, r5
 800147e:	f7fe ff05 	bl	800028c <__adddf3>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fbad 	bl	8000be8 <__aeabi_d2f>
 800148e:	4603      	mov	r3, r0
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <calculate_rotation+0xa0>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	d2f1a9fc 	.word	0xd2f1a9fc
 800149c:	3f50624d 	.word	0x3f50624d
 80014a0:	20000218 	.word	0x20000218
 80014a4:	2000021c 	.word	0x2000021c
 80014a8:	20000220 	.word	0x20000220

080014ac <velocity_PID>:

/*並進速度のPID制御*/
void velocity_PID(void) {
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

    // P項
    velocity_error = target_velocity;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <velocity_PID+0xb4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001564 <velocity_PID+0xb8>)
 80014b6:	6013      	str	r3, [r2, #0]

    if (velocity_error > 10000 || velocity_error < -10000) {
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <velocity_PID+0xb8>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001568 <velocity_PID+0xbc>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dc09      	bgt.n	80014e0 <velocity_PID+0x34>
 80014cc:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <velocity_PID+0xb8>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800156c <velocity_PID+0xc0>
 80014d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d504      	bpl.n	80014ea <velocity_PID+0x3e>
        MF.FLAG.FAILED = 1;
 80014e0:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <velocity_PID+0xc4>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014e8:	6013      	str	r3, [r2, #0]
    }

    // I項
    velocity_integral += velocity_error;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <velocity_PID+0xb8>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <velocity_PID+0xc8>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <velocity_PID+0xc8>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]

    // D項
    velocity_error_error = velocity_error - previous_velocity_error;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <velocity_PID+0xb8>)
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <velocity_PID+0xcc>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <velocity_PID+0xd0>)
 8001512:	edc3 7a00 	vstr	s15, [r3]

    // モータ制御量を計算
    out_translation = KP_VELOCITY * velocity_error +
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <velocity_PID+0xb8>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001520:	ee27 7a87 	vmul.f32	s14, s15, s14
                      KI_VEROCITY * velocity_integral +
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <velocity_PID+0xc8>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001580 <velocity_PID+0xd4>
 800152e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    out_translation = KP_VELOCITY * velocity_error +
 8001532:	ee37 7a27 	vadd.f32	s14, s14, s15
                      KD_VEROCITY * velocity_error_error;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <velocity_PID+0xd0>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8001540:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      KI_VEROCITY * velocity_integral +
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
    out_translation = KP_VELOCITY * velocity_error +
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <velocity_PID+0xd8>)
 800154a:	edc3 7a00 	vstr	s15, [r3]

    // 並進速度の偏差を保存
    previous_velocity_error = velocity_error;
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <velocity_PID+0xb8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <velocity_PID+0xcc>)
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000238 	.word	0x20000238
 8001564:	20000240 	.word	0x20000240
 8001568:	461c4000 	.word	0x461c4000
 800156c:	c61c4000 	.word	0xc61c4000
 8001570:	200001f8 	.word	0x200001f8
 8001574:	2000024c 	.word	0x2000024c
 8001578:	20000248 	.word	0x20000248
 800157c:	20000244 	.word	0x20000244
 8001580:	3c83126f 	.word	0x3c83126f
 8001584:	20000250 	.word	0x20000250

08001588 <distance_PID>:

/*並進距離のPID制御*/
void distance_PID(void) {
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

    // P項
    distance_error = target_distance - real_distance;
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <distance_PID+0x90>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <distance_PID+0x94>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <distance_PID+0x98>)
 800159e:	edc3 7a00 	vstr	s15, [r3]

    // I項
    distance_integral += distance_error;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <distance_PID+0x98>)
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <distance_PID+0x9c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <distance_PID+0x9c>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]

    // D項
    distance_error_error = distance_error - previous_distance_error;
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <distance_PID+0x98>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <distance_PID+0xa0>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <distance_PID+0xa4>)
 80015ca:	edc3 7a00 	vstr	s15, [r3]

    // 目標並進速度を計算
    target_velocity = KP_DISTANCE * distance_error +
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <distance_PID+0x98>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80015d8:	ee27 7a87 	vmul.f32	s14, s15, s14
                      KI_DISTANCE * distance_integral +
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <distance_PID+0x9c>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001630 <distance_PID+0xa8>
 80015e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    target_velocity = KP_DISTANCE * distance_error +
 80015ea:	ee37 7a27 	vadd.f32	s14, s14, s15
                      KD_DISTANCE * distance_error_error;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <distance_PID+0xa4>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 80015f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      KI_DISTANCE * distance_integral +
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
    target_velocity = KP_DISTANCE * distance_error +
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <distance_PID+0xac>)
 8001602:	edc3 7a00 	vstr	s15, [r3]

    // 並進位置の偏差を保存
    previous_distance_error = distance_error;
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <distance_PID+0x98>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <distance_PID+0xa0>)
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000214 	.word	0x20000214
 800161c:	20000224 	.word	0x20000224
 8001620:	20000228 	.word	0x20000228
 8001624:	20000234 	.word	0x20000234
 8001628:	20000230 	.word	0x20000230
 800162c:	2000022c 	.word	0x2000022c
 8001630:	3c23d70a 	.word	0x3c23d70a
 8001634:	20000238 	.word	0x20000238

08001638 <omega_PID>:

/*角速度のPID制御*/
void omega_PID(void) {
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

    // P項
    // omega_error = target_omega - real_omega;

    omega_error =
        omega_interrupt - real_omega + wall_control + diagonal_control;
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <omega_PID+0xa4>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <omega_PID+0xa8>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <omega_PID+0xac>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <omega_PID+0xb0>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
    omega_error =
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <omega_PID+0xb4>)
 8001662:	edc3 7a00 	vstr	s15, [r3]

    // I項
    omega_integral += omega_error;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <omega_PID+0xb4>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <omega_PID+0xb8>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <omega_PID+0xb8>)
 8001678:	edc3 7a00 	vstr	s15, [r3]

    // D項
    omega_error_error = angle_error - previous_omega_error;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <omega_PID+0xbc>)
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <omega_PID+0xc0>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <omega_PID+0xc4>)
 800168e:	edc3 7a00 	vstr	s15, [r3]

    // モータ制御量を計算

    out_rotate = KP_OMEGA * omega_error + KI_OMEGA * omega_integral +
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <omega_PID+0xb4>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800169c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <omega_PID+0xb8>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001700 <omega_PID+0xc8>
 80016aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016ae:	ee37 7a27 	vadd.f32	s14, s14, s15
                 KD_OMEGA * omega_error_error;
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <omega_PID+0xc4>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001704 <omega_PID+0xcc>
 80016bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    out_rotate = KP_OMEGA * omega_error + KI_OMEGA * omega_integral +
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <omega_PID+0xd0>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]
    // out_rotate = omega_interrupt * 0.5 + KP_OMEGA * omega_error +
    // KI_OMEGA *omega_integral + KD_OMEGA *omega_error_error;

    // 角速度の偏差を保存
    previous_omega_error = omega_error;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <omega_PID+0xb4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <omega_PID+0xc0>)
 80016d0:	6013      	str	r3, [r2, #0]
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	2000021c 	.word	0x2000021c
 80016e0:	2000025c 	.word	0x2000025c
 80016e4:	20000298 	.word	0x20000298
 80016e8:	200002b0 	.word	0x200002b0
 80016ec:	20000260 	.word	0x20000260
 80016f0:	2000026c 	.word	0x2000026c
 80016f4:	20000258 	.word	0x20000258
 80016f8:	20000268 	.word	0x20000268
 80016fc:	20000264 	.word	0x20000264
 8001700:	3ca3d70a 	.word	0x3ca3d70a
 8001704:	00000000 	.word	0x00000000
 8001708:	20000270 	.word	0x20000270
 800170c:	00000000 	.word	0x00000000

08001710 <wall_PID>:
    // 角度の偏差を保存
    previous_angle_error = angle_error;
}

/*壁のPID制御*/
void wall_PID(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

    // 制御フラグがあれば制御
    if (MF.FLAG.CTRL) {
 8001716:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <wall_PID+0x238>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80ff 	beq.w	8001924 <wall_PID+0x214>

        float wall_error = 0;
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
        uint16_t wall_thr_r;
        uint16_t wall_thr_l;
        float sense_diff_r;
        float sense_diff_l;

        sense_diff_r = ad_r - previous_ad_r;
 800172c:	4b87      	ldr	r3, [pc, #540]	@ (800194c <wall_PID+0x23c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173a:	4b85      	ldr	r3, [pc, #532]	@ (8001950 <wall_PID+0x240>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001744:	edc7 7a01 	vstr	s15, [r7, #4]
        sense_diff_l = ad_l - previous_ad_l;
 8001748:	4b82      	ldr	r3, [pc, #520]	@ (8001954 <wall_PID+0x244>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <wall_PID+0x248>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a00 	vstr	s15, [r7]

        if (abs(sense_diff_r) > WALL_DIFF_THR) {
 8001764:	edd7 7a01 	vldr	s15, [r7, #4]
 8001768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176c:	ee17 3a90 	vmov	r3, s15
 8001770:	2b00      	cmp	r3, #0
 8001772:	bfb8      	it	lt
 8001774:	425b      	neglt	r3, r3
 8001776:	2b16      	cmp	r3, #22
 8001778:	dd03      	ble.n	8001782 <wall_PID+0x72>
            wall_thr_r = WALL_BASE_R + 30;
 800177a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800177e:	817b      	strh	r3, [r7, #10]
 8001780:	e002      	b.n	8001788 <wall_PID+0x78>
        } else {
            wall_thr_r = WALL_BASE_R;
 8001782:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8001786:	817b      	strh	r3, [r7, #10]
        }
        if (abs(sense_diff_l) > WALL_DIFF_THR) {
 8001788:	edd7 7a00 	vldr	s15, [r7]
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 3a90 	vmov	r3, s15
 8001794:	2b00      	cmp	r3, #0
 8001796:	bfb8      	it	lt
 8001798:	425b      	neglt	r3, r3
 800179a:	2b16      	cmp	r3, #22
 800179c:	dd03      	ble.n	80017a6 <wall_PID+0x96>
            wall_thr_l = WALL_BASE_L + 30;
 800179e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80017a2:	813b      	strh	r3, [r7, #8]
 80017a4:	e002      	b.n	80017ac <wall_PID+0x9c>
        } else {
            wall_thr_l = WALL_BASE_L;
 80017a6:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 80017aa:	813b      	strh	r3, [r7, #8]
        }

        if (ad_r > wall_thr_r && ad_l > wall_thr_l) {
 80017ac:	4b67      	ldr	r3, [pc, #412]	@ (800194c <wall_PID+0x23c>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	897a      	ldrh	r2, [r7, #10]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d21d      	bcs.n	80017f4 <wall_PID+0xe4>
 80017b8:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <wall_PID+0x244>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	893a      	ldrh	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d217      	bcs.n	80017f4 <wall_PID+0xe4>
            // 左右壁が両方ある場合
            wall_error = (ad_l - base_l) - (ad_r - base_r);
 80017c4:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <wall_PID+0x244>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b63      	ldr	r3, [pc, #396]	@ (800195c <wall_PID+0x24c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <wall_PID+0x23c>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	4b60      	ldr	r3, [pc, #384]	@ (8001960 <wall_PID+0x250>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	1acb      	subs	r3, r1, r3
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	edc7 7a03 	vstr	s15, [r7, #12]
 80017f2:	e049      	b.n	8001888 <wall_PID+0x178>
        } else if (ad_r < wall_thr_r && ad_l < wall_thr_l) {
 80017f4:	4b55      	ldr	r3, [pc, #340]	@ (800194c <wall_PID+0x23c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	897a      	ldrh	r2, [r7, #10]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d909      	bls.n	8001814 <wall_PID+0x104>
 8001800:	4b54      	ldr	r3, [pc, #336]	@ (8001954 <wall_PID+0x244>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	893a      	ldrh	r2, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	d903      	bls.n	8001814 <wall_PID+0x104>
            // 左右壁が両方ない場合
            wall_error = 0;
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e039      	b.n	8001888 <wall_PID+0x178>
        } else if (ad_r > wall_thr_r && ad_l < wall_thr_l) {
 8001814:	4b4d      	ldr	r3, [pc, #308]	@ (800194c <wall_PID+0x23c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	897a      	ldrh	r2, [r7, #10]
 800181c:	429a      	cmp	r2, r3
 800181e:	d218      	bcs.n	8001852 <wall_PID+0x142>
 8001820:	4b4c      	ldr	r3, [pc, #304]	@ (8001954 <wall_PID+0x244>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	893a      	ldrh	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d912      	bls.n	8001852 <wall_PID+0x142>
            // 右壁のみある場合
            wall_error = -2 * (ad_r - base_r);
 800182c:	4b47      	ldr	r3, [pc, #284]	@ (800194c <wall_PID+0x23c>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <wall_PID+0x250>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4613      	mov	r3, r2
 800183e:	07db      	lsls	r3, r3, #31
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001850:	e01a      	b.n	8001888 <wall_PID+0x178>
        } else if (ad_r < wall_thr_r && ad_l > wall_thr_l) {
 8001852:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <wall_PID+0x23c>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	897a      	ldrh	r2, [r7, #10]
 800185a:	429a      	cmp	r2, r3
 800185c:	d914      	bls.n	8001888 <wall_PID+0x178>
 800185e:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <wall_PID+0x244>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	893a      	ldrh	r2, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20e      	bcs.n	8001888 <wall_PID+0x178>
            // 左壁のみある場合
            wall_error = 2 * (ad_l - base_l);
 800186a:	4b3a      	ldr	r3, [pc, #232]	@ (8001954 <wall_PID+0x244>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4b3a      	ldr	r3, [pc, #232]	@ (800195c <wall_PID+0x24c>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001884:	edc7 7a03 	vstr	s15, [r7, #12]
        }

        wall_control = wall_error * kp_wall;
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <wall_PID+0x254>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001896:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <wall_PID+0x258>)
 8001898:	edc3 7a00 	vstr	s15, [r3]

        if (wall_control > 0) {
 800189c:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <wall_PID+0x258>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd13      	ble.n	80018d4 <wall_PID+0x1c4>
            wall_control = max(wall_control, WALL_CTRL_MAX);
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <wall_PID+0x258>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	a320      	add	r3, pc, #128	@ (adr r3, 8001938 <wall_PID+0x228>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7ff f92c 	bl	8000b18 <__aeabi_dcmpgt>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <wall_PID+0x1bc>
 80018c6:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <wall_PID+0x258>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e000      	b.n	80018ce <wall_PID+0x1be>
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <wall_PID+0x25c>)
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <wall_PID+0x258>)
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e012      	b.n	80018fa <wall_PID+0x1ea>
        } else {
            wall_control = min(wall_control, -WALL_CTRL_MAX);
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <wall_PID+0x258>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	a318      	add	r3, pc, #96	@ (adr r3, 8001940 <wall_PID+0x230>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7ff f918 	bl	8000b18 <__aeabi_dcmpgt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <wall_PID+0x1e2>
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <wall_PID+0x260>)
 80018f0:	e001      	b.n	80018f6 <wall_PID+0x1e6>
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <wall_PID+0x258>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <wall_PID+0x258>)
 80018f8:	6013      	str	r3, [r2, #0]
        }

        previous_ad_r = ad_r;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <wall_PID+0x23c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <wall_PID+0x240>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
        previous_ad_l = ad_l;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <wall_PID+0x244>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <wall_PID+0x248>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

    } else {
        // 制御フラグがなければ制御値0
        wall_control = 0;
    }
}
 8001922:	e003      	b.n	800192c <wall_PID+0x21c>
        wall_control = 0;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <wall_PID+0x258>)
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	f3af 8000 	nop.w
 8001938:	d2f1a9fc 	.word	0xd2f1a9fc
 800193c:	3f60624d 	.word	0x3f60624d
 8001940:	d2f1a9fc 	.word	0xd2f1a9fc
 8001944:	bf60624d 	.word	0xbf60624d
 8001948:	200001f8 	.word	0x200001f8
 800194c:	200082de 	.word	0x200082de
 8001950:	2000029c 	.word	0x2000029c
 8001954:	200082e4 	.word	0x200082e4
 8001958:	200002a0 	.word	0x200002a0
 800195c:	200082e8 	.word	0x200082e8
 8001960:	200082ea 	.word	0x200082ea
 8001964:	200002a4 	.word	0x200002a4
 8001968:	20000298 	.word	0x20000298
 800196c:	3b03126f 	.word	0x3b03126f
 8001970:	bb03126f 	.word	0xbb03126f

08001974 <diagonal_CTRL>:

/*斜めの制御*/
void diagonal_CTRL(void) {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

    // 制御フラグがあれば制御
    if (MF.FLAG.CTRL_DIAGONAL) {
 8001978:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <diagonal_CTRL+0x144>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8093 	beq.w	8001aae <diagonal_CTRL+0x13a>

        if (ad_fr > diagonal_control_thr && ad_fl > diagonal_control_thr) {
 8001988:	4b4c      	ldr	r3, [pc, #304]	@ (8001abc <diagonal_CTRL+0x148>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001996:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <diagonal_CTRL+0x14c>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	dd42      	ble.n	8001a2c <diagonal_CTRL+0xb8>
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <diagonal_CTRL+0x150>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4b42      	ldr	r3, [pc, #264]	@ (8001ac0 <diagonal_CTRL+0x14c>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	dd33      	ble.n	8001a2c <diagonal_CTRL+0xb8>
            // 左右センサが閾値以上なら，差分で制御
            if (ad_fr > ad_fl) {
 80019c4:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <diagonal_CTRL+0x148>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <diagonal_CTRL+0x150>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d916      	bls.n	8001a02 <diagonal_CTRL+0x8e>
                diagonal_control = -kp_diagonal * (ad_fr - ad_fl);
 80019d4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <diagonal_CTRL+0x154>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eeb1 7a67 	vneg.f32	s14, s15
 80019de:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <diagonal_CTRL+0x148>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <diagonal_CTRL+0x150>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <diagonal_CTRL+0x158>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
            if (ad_fr > ad_fl) {
 8001a00:	e055      	b.n	8001aae <diagonal_CTRL+0x13a>
            } else {
                diagonal_control = kp_diagonal * (ad_fl - ad_fr);
 8001a02:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <diagonal_CTRL+0x150>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <diagonal_CTRL+0x148>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <diagonal_CTRL+0x154>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <diagonal_CTRL+0x158>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
            if (ad_fr > ad_fl) {
 8001a2a:	e040      	b.n	8001aae <diagonal_CTRL+0x13a>
            }

        } else if (ad_fr > diagonal_control_thr) {
 8001a2c:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <diagonal_CTRL+0x148>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <diagonal_CTRL+0x14c>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	dd11      	ble.n	8001a6e <diagonal_CTRL+0xfa>
            // 右センサのみHigh
            diagonal_control = -kp_diagonal * ad_fr;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <diagonal_CTRL+0x154>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	eeb1 7a67 	vneg.f32	s14, s15
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <diagonal_CTRL+0x148>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <diagonal_CTRL+0x158>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
        } else if (ad_fl > diagonal_control_thr) {
            // 左センサのみHigh
            diagonal_control = kp_diagonal * ad_fl;
        }
    }
}
 8001a6c:	e01f      	b.n	8001aae <diagonal_CTRL+0x13a>
        } else if (ad_fl > diagonal_control_thr) {
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <diagonal_CTRL+0x150>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <diagonal_CTRL+0x14c>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	dc00      	bgt.n	8001a8e <diagonal_CTRL+0x11a>
}
 8001a8c:	e00f      	b.n	8001aae <diagonal_CTRL+0x13a>
            diagonal_control = kp_diagonal * ad_fl;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <diagonal_CTRL+0x150>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <diagonal_CTRL+0x154>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <diagonal_CTRL+0x158>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
}
 8001aac:	e7ff      	b.n	8001aae <diagonal_CTRL+0x13a>
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	200001f8 	.word	0x200001f8
 8001abc:	200082e0 	.word	0x200082e0
 8001ac0:	200002a8 	.word	0x200002a8
 8001ac4:	200082e2 	.word	0x200082e2
 8001ac8:	200002ac 	.word	0x200002ac
 8001acc:	200002b0 	.word	0x200002b0

08001ad0 <drive_init>:
// drive_init
// 走行系の変数の初期化，モータードライバ関係のGPIO設定とPWM出力に使うタイマの設定をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    // エンコーダの読み取り開始
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001ad4:	213c      	movs	r1, #60	@ 0x3c
 8001ad6:	4809      	ldr	r0, [pc, #36]	@ (8001afc <drive_init+0x2c>)
 8001ad8:	f004 fea8 	bl	800682c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001adc:	213c      	movs	r1, #60	@ 0x3c
 8001ade:	4808      	ldr	r0, [pc, #32]	@ (8001b00 <drive_init+0x30>)
 8001ae0:	f004 fea4 	bl	800682c <HAL_TIM_Encoder_Start>

    wall_end_count = 0;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <drive_init+0x34>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]

    //====走行系の変数の初期化====

    //====マウスフラグの初期化===
    MF.FLAGS = 0; // フラグクリア
 8001aea:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <drive_init+0x38>)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000859c 	.word	0x2000859c
 8001b00:	2000850c 	.word	0x2000850c
 8001b04:	200002be 	.word	0x200002be
 8001b08:	200001f8 	.word	0x200001f8

08001b0c <drive_set_dir>:
// drive_set_dir
// 進行方向を設定する
// 引数1：d_dir …… どの方向に進行するか  0桁目で左，1桁目で右の方向設定
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_set_dir(uint8_t d_dir) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
    // printf("DIR\n");

    //====左モータ====
    switch (d_dir & 0x0f) { // 0~3ビット目を取り出す
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <drive_set_dir+0x1a>
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d00b      	beq.n	8001b3c <drive_set_dir+0x30>
 8001b24:	e015      	b.n	8001b52 <drive_set_dir+0x46>
    //----正回転----
    case 0x00: // 0x00の場合
        HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, DIR_FWD_L);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2120      	movs	r1, #32
 8001b2a:	481c      	ldr	r0, [pc, #112]	@ (8001b9c <drive_set_dir+0x90>)
 8001b2c:	f003 f91e 	bl	8004d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, DIR_BACK_L);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2110      	movs	r1, #16
 8001b34:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <drive_set_dir+0x90>)
 8001b36:	f003 f919 	bl	8004d6c <HAL_GPIO_WritePin>
        // 左を前進方向に設定
        break;
 8001b3a:	e00a      	b.n	8001b52 <drive_set_dir+0x46>
    //----逆回転----
    case 0x01: // 0x01の場合
        HAL_GPIO_WritePin(MOTOR_L_CW_GPIO_Port, MOTOR_L_CW_Pin, DIR_BACK_L);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4816      	ldr	r0, [pc, #88]	@ (8001b9c <drive_set_dir+0x90>)
 8001b42:	f003 f913 	bl	8004d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_L_CCW_GPIO_Port, MOTOR_L_CCW_Pin, DIR_FWD_L);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2110      	movs	r1, #16
 8001b4a:	4814      	ldr	r0, [pc, #80]	@ (8001b9c <drive_set_dir+0x90>)
 8001b4c:	f003 f90e 	bl	8004d6c <HAL_GPIO_WritePin>
        // 左を後進方向に設定
        break;
 8001b50:	bf00      	nop
    }
    //====右モータ====
    switch (d_dir & 0xf0) { // 4~7ビット目を取り出す
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <drive_set_dir+0x56>
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d00c      	beq.n	8001b7a <drive_set_dir+0x6e>
        HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, DIR_BACK_R);
        HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, DIR_FWD_R);
        // 右を後進方向に設定
        break;
    }
}
 8001b60:	e017      	b.n	8001b92 <drive_set_dir+0x86>
        HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, DIR_FWD_R);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2102      	movs	r1, #2
 8001b66:	480e      	ldr	r0, [pc, #56]	@ (8001ba0 <drive_set_dir+0x94>)
 8001b68:	f003 f900 	bl	8004d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, DIR_BACK_R);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b72:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <drive_set_dir+0x94>)
 8001b74:	f003 f8fa 	bl	8004d6c <HAL_GPIO_WritePin>
        break;
 8001b78:	e00b      	b.n	8001b92 <drive_set_dir+0x86>
        HAL_GPIO_WritePin(MOTOR_R_CW_GPIO_Port, MOTOR_R_CW_Pin, DIR_BACK_R);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <drive_set_dir+0x94>)
 8001b80:	f003 f8f4 	bl	8004d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_CCW_GPIO_Port, MOTOR_R_CCW_Pin, DIR_FWD_R);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <drive_set_dir+0x94>)
 8001b8c:	f003 f8ee 	bl	8004d6c <HAL_GPIO_WritePin>
        break;
 8001b90:	bf00      	nop
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <drive_motor>:
// drive_motor
// モータを回す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_motor(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

    // 並進と回転の出力を合算
    out_r = out_translation - out_rotate;
 8001ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8001e30 <drive_motor+0x28c>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4ba1      	ldr	r3, [pc, #644]	@ (8001e34 <drive_motor+0x290>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	4b9f      	ldr	r3, [pc, #636]	@ (8001e38 <drive_motor+0x294>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]
    out_l = out_translation + out_rotate;
 8001bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8001e30 <drive_motor+0x28c>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b9b      	ldr	r3, [pc, #620]	@ (8001e34 <drive_motor+0x290>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	4b9b      	ldr	r3, [pc, #620]	@ (8001e3c <drive_motor+0x298>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]

    // 回転のフェイルセーフ
    if (((out_r - out_l > FAIL_LR_ERROR || out_r - out_l < -FAIL_LR_ERROR)) &&
 8001bd4:	4b98      	ldr	r3, [pc, #608]	@ (8001e38 <drive_motor+0x294>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	4b98      	ldr	r3, [pc, #608]	@ (8001e3c <drive_motor+0x298>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001e40 <drive_motor+0x29c>
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	dc0e      	bgt.n	8001c10 <drive_motor+0x6c>
 8001bf2:	4b91      	ldr	r3, [pc, #580]	@ (8001e38 <drive_motor+0x294>)
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <drive_motor+0x298>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8001e44 <drive_motor+0x2a0>
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d50e      	bpl.n	8001c2e <drive_motor+0x8a>
        MF.FLAG.RUNNING) {
 8001c10:	4b8d      	ldr	r3, [pc, #564]	@ (8001e48 <drive_motor+0x2a4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 7380 	ubfx	r3, r3, #30, #1
 8001c18:	b2db      	uxtb	r3, r3
    if (((out_r - out_l > FAIL_LR_ERROR || out_r - out_l < -FAIL_LR_ERROR)) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <drive_motor+0x8a>
        fail_count_lr++;
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e4c <drive_motor+0x2a8>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b88      	ldr	r3, [pc, #544]	@ (8001e4c <drive_motor+0x2a8>)
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	e002      	b.n	8001c34 <drive_motor+0x90>
    } else {
        fail_count_lr = 0;
 8001c2e:	4b87      	ldr	r3, [pc, #540]	@ (8001e4c <drive_motor+0x2a8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
    }

    if (fail_count_lr > FAIL_COUNT_LR) {
 8001c34:	4b85      	ldr	r3, [pc, #532]	@ (8001e4c <drive_motor+0x2a8>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b32      	cmp	r3, #50	@ 0x32
 8001c3c:	d907      	bls.n	8001c4e <drive_motor+0xaa>
        MF.FLAG.FAILED = 1;
 8001c3e:	4a82      	ldr	r2, [pc, #520]	@ (8001e48 <drive_motor+0x2a4>)
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c46:	6013      	str	r3, [r2, #0]
        fail_count_lr = 0;
 8001c48:	4b80      	ldr	r3, [pc, #512]	@ (8001e4c <drive_motor+0x2a8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
    }

    // 並進衝突のフェイルセーフ
    if ((IMU_acceleration < -FAIL_ACC || IMU_acceleration > FAIL_ACC) &&
 8001c4e:	4b80      	ldr	r3, [pc, #512]	@ (8001e50 <drive_motor+0x2ac>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001e54 <drive_motor+0x2b0>
 8001c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d409      	bmi.n	8001c76 <drive_motor+0xd2>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <drive_motor+0x2ac>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001e58 <drive_motor+0x2b4>
 8001c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	dd0e      	ble.n	8001c94 <drive_motor+0xf0>
        MF.FLAG.RUNNING) {
 8001c76:	4b74      	ldr	r3, [pc, #464]	@ (8001e48 <drive_motor+0x2a4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f3c3 7380 	ubfx	r3, r3, #30, #1
 8001c7e:	b2db      	uxtb	r3, r3
    if ((IMU_acceleration < -FAIL_ACC || IMU_acceleration > FAIL_ACC) &&
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <drive_motor+0xf0>
        fail_count_acc++;
 8001c84:	4b75      	ldr	r3, [pc, #468]	@ (8001e5c <drive_motor+0x2b8>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <drive_motor+0x2b8>)
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	e002      	b.n	8001c9a <drive_motor+0xf6>
    } else {
        fail_count_acc = 0;
 8001c94:	4b71      	ldr	r3, [pc, #452]	@ (8001e5c <drive_motor+0x2b8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
    }

    if (fail_count_acc > FAIL_COUNT_ACC && MF.FLAG.RUNNING) {
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <drive_motor+0x2b8>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b14      	cmp	r3, #20
 8001ca2:	d90e      	bls.n	8001cc2 <drive_motor+0x11e>
 8001ca4:	4b68      	ldr	r3, [pc, #416]	@ (8001e48 <drive_motor+0x2a4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 7380 	ubfx	r3, r3, #30, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <drive_motor+0x11e>
        MF.FLAG.FAILED = 1;
 8001cb2:	4a65      	ldr	r2, [pc, #404]	@ (8001e48 <drive_motor+0x2a4>)
 8001cb4:	6813      	ldr	r3, [r2, #0]
 8001cb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cba:	6013      	str	r3, [r2, #0]
        fail_count_acc = 0;
 8001cbc:	4b67      	ldr	r3, [pc, #412]	@ (8001e5c <drive_motor+0x2b8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	801a      	strh	r2, [r3, #0]
    }

    // 左右モータの回転方向の指定
    if (out_r >= 0 && out_l >= 0) {
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <drive_motor+0x294>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	db0b      	blt.n	8001cea <drive_motor+0x146>
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <drive_motor+0x298>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	db03      	blt.n	8001cea <drive_motor+0x146>
        drive_set_dir(0x00);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff ff12 	bl	8001b0c <drive_set_dir>
 8001ce8:	e05a      	b.n	8001da0 <drive_motor+0x1fc>
    } else if (out_r >= 0 && out_l < 0) {
 8001cea:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <drive_motor+0x294>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	db13      	blt.n	8001d22 <drive_motor+0x17e>
 8001cfa:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <drive_motor+0x298>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d50b      	bpl.n	8001d22 <drive_motor+0x17e>
        drive_set_dir(0x01);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fefe 	bl	8001b0c <drive_set_dir>
        out_l = -out_l;
 8001d10:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <drive_motor+0x298>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eef1 7a67 	vneg.f32	s15, s15
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <drive_motor+0x298>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
 8001d20:	e03e      	b.n	8001da0 <drive_motor+0x1fc>
    } else if (out_r < 0 && out_l >= 0) {
 8001d22:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <drive_motor+0x294>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d513      	bpl.n	8001d5a <drive_motor+0x1b6>
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <drive_motor+0x298>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	db0b      	blt.n	8001d5a <drive_motor+0x1b6>
        drive_set_dir(0x10);
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff fee2 	bl	8001b0c <drive_set_dir>
        out_r = -out_r;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <drive_motor+0x294>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	eef1 7a67 	vneg.f32	s15, s15
 8001d52:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <drive_motor+0x294>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]
 8001d58:	e022      	b.n	8001da0 <drive_motor+0x1fc>
    } else if (out_r < 0 && out_l < 0) {
 8001d5a:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <drive_motor+0x294>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d51a      	bpl.n	8001da0 <drive_motor+0x1fc>
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <drive_motor+0x298>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	d512      	bpl.n	8001da0 <drive_motor+0x1fc>
        drive_set_dir(0x11);
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f7ff fec6 	bl	8001b0c <drive_set_dir>
        out_r = -out_r;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <drive_motor+0x294>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eef1 7a67 	vneg.f32	s15, s15
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <drive_motor+0x294>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
        out_l = -out_l;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <drive_motor+0x298>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	eef1 7a67 	vneg.f32	s15, s15
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <drive_motor+0x298>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
    }

    // PWM出力
    if (MF.FLAG.FAILED) {
 8001da0:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <drive_motor+0x2a4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00f      	beq.n	8001dce <drive_motor+0x22a>
        // フェイルセーフ発動の場合，強制的にDuty=0で停止
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001dae:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <drive_motor+0x2bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <drive_motor+0x2bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34
        drive_fan(0);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 f852 	bl	8001e68 <drive_fan>

        buzzer_beep(1200);
 8001dc4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001dc8:	f7ff f8f6 	bl	8000fb8 <buzzer_beep>

    } else {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, min(out_r, 1000));
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, min(out_l, 1000));
    }
}
 8001dcc:	e02d      	b.n	8001e2a <drive_motor+0x286>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, min(out_r, 1000));
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <drive_motor+0x294>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001e64 <drive_motor+0x2c0>
 8001dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	dd02      	ble.n	8001de8 <drive_motor+0x244>
 8001de2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001de6:	e006      	b.n	8001df6 <drive_motor+0x252>
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <drive_motor+0x294>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df2:	ee17 2a90 	vmov	r2, s15
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <drive_motor+0x2bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, min(out_l, 1000));
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <drive_motor+0x298>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001e64 <drive_motor+0x2c0>
 8001e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	dd02      	ble.n	8001e16 <drive_motor+0x272>
 8001e10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e14:	e006      	b.n	8001e24 <drive_motor+0x280>
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <drive_motor+0x298>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e20:	ee17 2a90 	vmov	r2, s15
 8001e24:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <drive_motor+0x2bc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000250 	.word	0x20000250
 8001e34:	20000270 	.word	0x20000270
 8001e38:	20000204 	.word	0x20000204
 8001e3c:	20000208 	.word	0x20000208
 8001e40:	461c4000 	.word	0x461c4000
 8001e44:	c61c4000 	.word	0xc61c4000
 8001e48:	200001f8 	.word	0x200001f8
 8001e4c:	200002b4 	.word	0x200002b4
 8001e50:	200002b8 	.word	0x200002b8
 8001e54:	c684d000 	.word	0xc684d000
 8001e58:	4684d000 	.word	0x4684d000
 8001e5c:	200002b6 	.word	0x200002b6
 8001e60:	2000847c 	.word	0x2000847c
 8001e64:	447a0000 	.word	0x447a0000

08001e68 <drive_fan>:
// drive_fan
// ファンを回す
// 引数：fan_power (0~1000)
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_fan(uint16_t fan_power) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]

    if (fan_power > 0) {
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <drive_fan+0x1c>
        MF.FLAG.SUCTION = 1;
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <drive_fan+0x70>)
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e004      	b.n	8001e8e <drive_fan+0x26>
    } else {
        MF.FLAG.SUCTION = 0;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <drive_fan+0x70>)
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e8c:	6013      	str	r3, [r2, #0]
    }

    if (fan_power) {
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <drive_fan+0x58>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4811      	ldr	r0, [pc, #68]	@ (8001edc <drive_fan+0x74>)
 8001e98:	f004 faea 	bl	8006470 <HAL_TIM_PWM_Start>

        for (uint16_t i = 0; i < fan_power; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	81fb      	strh	r3, [r7, #14]
 8001ea0:	e009      	b.n	8001eb6 <drive_fan+0x4e>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <drive_fan+0x74>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	89fa      	ldrh	r2, [r7, #14]
 8001ea8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(4);
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f002 f8a8 	bl	8004000 <HAL_Delay>
        for (uint16_t i = 0; i < fan_power; i++) {
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	81fb      	strh	r3, [r7, #14]
 8001eb6:	89fa      	ldrh	r2, [r7, #14]
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3f1      	bcc.n	8001ea2 <drive_fan+0x3a>
        }
    } else {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
    }
}
 8001ebe:	e007      	b.n	8001ed0 <drive_fan+0x68>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <drive_fan+0x74>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4804      	ldr	r0, [pc, #16]	@ (8001edc <drive_fan+0x74>)
 8001ecc:	f004 fb98 	bl	8006600 <HAL_TIM_PWM_Stop>
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200001f8 	.word	0x200001f8
 8001edc:	200084c4 	.word	0x200084c4

08001ee0 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: yuho-
 */

#include "global.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
        // TIM1の割り込み処理

        // printf("TIM1 Interrupt\n");
    }

    if (htim->Instance == htim5.Instance) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4ba6      	ldr	r3, [pc, #664]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 80a7 	bne.w	8002044 <HAL_TIM_PeriodElapsedCallback+0x164>
        // TIM5の割り込み処理 1kHz

        if (HAL_GPIO_ReadPin(SW_POWER_GPIO_Port, SW_POWER_Pin) == 0) {
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	48a4      	ldr	r0, [pc, #656]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001efa:	f002 ff1f 	bl	8004d3c <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_TIM_PeriodElapsedCallback+0x28>
            while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <HAL_TIM_PeriodElapsedCallback+0x24>
                ;
        }

        // センサ値の取得
        if (ADC_task_counter == 0) {
 8001f08:	4ba1      	ldr	r3, [pc, #644]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12c      	bne.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x8c>
            // 左右壁センサ値の取得
            HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2101      	movs	r1, #1
 8001f16:	489f      	ldr	r0, [pc, #636]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f18:	f002 ff28 	bl	8004d6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f22:	489a      	ldr	r0, [pc, #616]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f24:	f002 ff22 	bl	8004d6c <HAL_GPIO_WritePin>
            tim1_wait_us(IR_WAIT_US);
 8001f28:	2014      	movs	r0, #20
 8001f2a:	f000 f96f 	bl	800220c <tim1_wait_us>
            ad_r = get_sensor_value_r();
 8001f2e:	f001 f869 	bl	8003004 <get_sensor_value_r>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b98      	ldr	r3, [pc, #608]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f38:	801a      	strh	r2, [r3, #0]
            ad_l = get_sensor_value_l();
 8001f3a:	f001 f887 	bl	800304c <get_sensor_value_l>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b96      	ldr	r3, [pc, #600]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f44:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(IR_R_GPIO_Port, IR_R_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4892      	ldr	r0, [pc, #584]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f4c:	f002 ff0e 	bl	8004d6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IR_L_GPIO_Port, IR_L_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f56:	488d      	ldr	r0, [pc, #564]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f58:	f002 ff08 	bl	8004d6c <HAL_GPIO_WritePin>

            ADC_task_counter++;
 8001f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b8a      	ldr	r3, [pc, #552]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e03a      	b.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x102>

        } else if (ADC_task_counter == 1) {
 8001f6c:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12c      	bne.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0xf0>
            // 前壁センサ値の取得
            HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4886      	ldr	r0, [pc, #536]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f7c:	f002 fef6 	bl	8004d6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f86:	4881      	ldr	r0, [pc, #516]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f88:	f002 fef0 	bl	8004d6c <HAL_GPIO_WritePin>
            tim1_wait_us(IR_WAIT_US);
 8001f8c:	2014      	movs	r0, #20
 8001f8e:	f000 f93d 	bl	800220c <tim1_wait_us>
            ad_fr = get_sensor_value_fr();
 8001f92:	f001 f843 	bl	800301c <get_sensor_value_fr>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b81      	ldr	r3, [pc, #516]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f9c:	801a      	strh	r2, [r3, #0]
            ad_fl = get_sensor_value_fl();
 8001f9e:	f001 f849 	bl	8003034 <get_sensor_value_fl>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001fa8:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(IR_FR_GPIO_Port, IR_FR_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	4879      	ldr	r0, [pc, #484]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001fb0:	f002 fedc 	bl	8004d6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IR_FL_GPIO_Port, IR_FL_Pin, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fba:	4874      	ldr	r0, [pc, #464]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001fbc:	f002 fed6 	bl	8004d6c <HAL_GPIO_WritePin>

            ADC_task_counter++;
 8001fc0:	4b73      	ldr	r3, [pc, #460]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e008      	b.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x102>

        } else {
            // バッテリー電圧値の取得
            ad_bat = get_battery_value();
 8001fd0:	f001 f848 	bl	8003064 <get_battery_value>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b73      	ldr	r3, [pc, #460]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001fda:	801a      	strh	r2, [r3, #0]
            ADC_task_counter = 0;
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
        }

        indicate_sensor();
 8001fe2:	f001 fabb 	bl	800355c <indicate_sensor>

        // 壁切れ
        wall_end();
 8001fe6:	f001 faf5 	bl	80035d4 <wall_end>

        // エンコーダ値の取得
        read_encoder();
 8001fea:	f7ff f839 	bl	8001060 <read_encoder>

        // IMU値の取得
        read_IMU();
 8001fee:	f7ff f967 	bl	80012c0 <read_IMU>

        // バッテリー電圧の監視
        if (ad_bat > 3000) { // 3.3*3060/4095*3=7.4[V]で発動
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d80a      	bhi.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x136>
            //HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
            //HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);

        } else {
            // バッテリー消耗
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002006:	4869      	ldr	r0, [pc, #420]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002008:	f002 feb0 	bl	8004d6c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	4867      	ldr	r0, [pc, #412]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002012:	f002 feab 	bl	8004d6c <HAL_GPIO_WritePin>
        }

        if (MF.FLAG.OVERRIDE == 0) {
 8002016:	4b67      	ldr	r3, [pc, #412]	@ (80021b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10f      	bne.n	8002044 <HAL_TIM_PeriodElapsedCallback+0x164>

            // 壁制御
            wall_PID();
 8002024:	f7ff fb74 	bl	8001710 <wall_PID>
            diagonal_CTRL();
 8002028:	f7ff fca4 	bl	8001974 <diagonal_CTRL>

            // 目標値の積算計算
            calculate_translation();
 800202c:	f7ff f998 	bl	8001360 <calculate_translation>
            calculate_rotation();
 8002030:	f7ff f9ea 	bl	8001408 <calculate_rotation>

            // 並進位置→並進速度のPID
            distance_PID();
 8002034:	f7ff faa8 	bl	8001588 <distance_PID>
            velocity_PID();
 8002038:	f7ff fa38 	bl	80014ac <velocity_PID>

            // 角度→角速度のPID
            // angle_PID();
            omega_PID();
 800203c:	f7ff fafc 	bl	8001638 <omega_PID>

            drive_motor();
 8002040:	f7ff fdb0 	bl	8001ba4 <drive_motor>
        }
    }

    if (wall_end_count > 1) {
 8002044:	4b5c      	ldr	r3, [pc, #368]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d906      	bls.n	800205c <HAL_TIM_PeriodElapsedCallback+0x17c>
        wall_end_count--;
 800204e:	4b5a      	ldr	r3, [pc, #360]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b57      	ldr	r3, [pc, #348]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800205a:	801a      	strh	r2, [r3, #0]
    }

    if (buzzer_count > 1) {
 800205c:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d907      	bls.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x196>
        buzzer_count--;
 8002066:	4b55      	ldr	r3, [pc, #340]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b52      	ldr	r3, [pc, #328]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e00b      	b.n	800208e <HAL_TIM_PeriodElapsedCallback+0x1ae>
    } else if (buzzer_count) {
 8002076:	4b51      	ldr	r3, [pc, #324]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_TIM_PeriodElapsedCallback+0x1ae>
        // ブザーを止める
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002080:	2104      	movs	r1, #4
 8002082:	484f      	ldr	r0, [pc, #316]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002084:	f004 fabc 	bl	8006600 <HAL_TIM_PWM_Stop>
        buzzer_count = 0;
 8002088:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
    }

    if (MF.FLAG.GET_LOG_1) {
 800208e:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d070      	beq.n	800217e <HAL_TIM_PeriodElapsedCallback+0x29e>
        if (log_cnt < 1000) {
 800209c:	4b49      	ldr	r3, [pc, #292]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020a6:	d26a      	bcs.n	800217e <HAL_TIM_PeriodElapsedCallback+0x29e>

            log_1[log_cnt] = log_cnt;
 80020a8:	4b46      	ldr	r3, [pc, #280]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	ee07 2a90 	vmov	s15, r2
 80020b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020bc:	4a42      	ldr	r2, [pc, #264]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	edc3 7a00 	vstr	s15, [r3]
            log_2[log_cnt] = omega_interrupt;
 80020c6:	4b3f      	ldr	r3, [pc, #252]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	4b3f      	ldr	r3, [pc, #252]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	493f      	ldr	r1, [pc, #252]	@ (80021d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80020d4:	0083      	lsls	r3, r0, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	601a      	str	r2, [r3, #0]
            log_3[log_cnt] = real_omega;
 80020da:	4b3a      	ldr	r3, [pc, #232]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	493c      	ldr	r1, [pc, #240]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80020e8:	0083      	lsls	r3, r0, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	601a      	str	r2, [r3, #0]
            log_4[log_cnt] = KP_OMEGA * omega_error;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80020fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002102:	4a37      	ldr	r2, [pc, #220]	@ (80021e0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	edc3 7a00 	vstr	s15, [r3]
            log_5[log_cnt] = KI_OMEGA * omega_integral;
 800210c:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80021e8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	edc3 7a00 	vstr	s15, [r3]
            log_6[log_cnt] = KD_OMEGA * omega_error_error;
 800212a:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80021f4 <HAL_TIM_PeriodElapsedCallback+0x314>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	4a2e      	ldr	r2, [pc, #184]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	edc3 7a00 	vstr	s15, [r3]
            // log_7[log_cnt] = alpha_interrupt * FF_OMEGA;
            log_7[log_cnt] = out_r;
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	492a      	ldr	r1, [pc, #168]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002156:	0083      	lsls	r3, r0, #2
 8002158:	440b      	add	r3, r1
 800215a:	601a      	str	r2, [r3, #0]
            log_8[log_cnt] = out_l;
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4927      	ldr	r1, [pc, #156]	@ (8002208 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800216a:	0083      	lsls	r3, r0, #2
 800216c:	440b      	add	r3, r1
 800216e:	601a      	str	r2, [r3, #0]
            log_6[log_cnt] = KD_ANGLE * angle_error_error;
            log_7[log_cnt] = 0;
            log_8[log_cnt] = 0;
            */

            log_cnt++;
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800217c:	801a      	strh	r2, [r3, #0]
        }
    }

} /* HAL_TIM_PeriodElapsedCallback */
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20008554 	.word	0x20008554
 800218c:	40020800 	.word	0x40020800
 8002190:	200002c0 	.word	0x200002c0
 8002194:	40021c00 	.word	0x40021c00
 8002198:	200082de 	.word	0x200082de
 800219c:	200082e4 	.word	0x200082e4
 80021a0:	200082e0 	.word	0x200082e0
 80021a4:	200082e2 	.word	0x200082e2
 80021a8:	200082e6 	.word	0x200082e6
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020000 	.word	0x40020000
 80021b4:	200001f8 	.word	0x200001f8
 80021b8:	200002be 	.word	0x200002be
 80021bc:	200002bc 	.word	0x200002bc
 80021c0:	200084c4 	.word	0x200084c4
 80021c4:	20007fc4 	.word	0x20007fc4
 80021c8:	200002c4 	.word	0x200002c4
 80021cc:	2000021c 	.word	0x2000021c
 80021d0:	20001264 	.word	0x20001264
 80021d4:	2000025c 	.word	0x2000025c
 80021d8:	20002204 	.word	0x20002204
 80021dc:	20000260 	.word	0x20000260
 80021e0:	200031a4 	.word	0x200031a4
 80021e4:	2000026c 	.word	0x2000026c
 80021e8:	3ca3d70a 	.word	0x3ca3d70a
 80021ec:	20004144 	.word	0x20004144
 80021f0:	20000264 	.word	0x20000264
 80021f4:	00000000 	.word	0x00000000
 80021f8:	200050e4 	.word	0x200050e4
 80021fc:	20000204 	.word	0x20000204
 8002200:	20006084 	.word	0x20006084
 8002204:	20000208 	.word	0x20000208
 8002208:	20007024 	.word	0x20007024

0800220c <tim1_wait_us>:
// 1us毎にカウントアップするTIM5を使ってusマイクロ秒処理を止める関数。
// （whileループ中にオーバーフローが起こると機能しないのでTIM5タイマ更新割り込みハンドラ内のみで使用することを推奨する）
// 引数：us …… 処理を止めたいマイクロ秒
// 戻り値：無し
//+++++++++++++++++++++++++++++++++++++++++++++++
void tim1_wait_us(uint32_t us) {
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    uint32_t dest = __HAL_TIM_GET_COUNTER(&htim1) + us;
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <tim1_wait_us+0x30>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
    while (__HAL_TIM_GET_COUNTER(&htim1) < dest)
 8002220:	bf00      	nop
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <tim1_wait_us+0x30>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	429a      	cmp	r2, r3
 800222c:	d8f9      	bhi.n	8002222 <tim1_wait_us+0x16>
        ;
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20008434 	.word	0x20008434

08002240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002246:	f001 fe69 	bl	8003f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800224a:	f000 f85f 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224e:	f000 fcab 	bl	8002ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002252:	f000 f8c5 	bl	80023e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002256:	f000 fc7d 	bl	8002b54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800225a:	f000 fa59 	bl	8002710 <MX_TIM2_Init>
  MX_TIM3_Init();
 800225e:	f000 fad7 	bl	8002810 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002262:	f000 fb57 	bl	8002914 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002266:	f000 fc1d 	bl	8002aa4 <MX_TIM8_Init>
  MX_SPI1_Init();
 800226a:	f000 f945 	bl	80024f8 <MX_SPI1_Init>
  MX_TIM5_Init();
 800226e:	f000 fbcb 	bl	8002a08 <MX_TIM5_Init>
  MX_SPI3_Init();
 8002272:	f000 f979 	bl	8002568 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002276:	f000 f9ad 	bl	80025d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    // setbuf(stdout, NULL); // printf用

    search_init();
 800227a:	f000 fdad 	bl	8002dd8 <search_init>

    sensor_init();
 800227e:	f000 fe67 	bl	8002f50 <sensor_init>

    drive_init();
 8002282:	f7ff fc25 	bl	8001ad0 <drive_init>

    printf("Classic Mouse Nightfall-Lite 2024\n");
 8002286:	481a      	ldr	r0, [pc, #104]	@ (80022f0 <main+0xb0>)
 8002288:	f006 fba8 	bl	80089dc <puts>
    for (uint16_t i = 1100; i > 300; i -= 150) {
 800228c:	f240 434c 	movw	r3, #1100	@ 0x44c
 8002290:	80fb      	strh	r3, [r7, #6]
 8002292:	e006      	b.n	80022a2 <main+0x62>
        buzzer_beep(i);
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe8e 	bl	8000fb8 <buzzer_beep>
    for (uint16_t i = 1100; i > 300; i -= 150) {
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	3b96      	subs	r3, #150	@ 0x96
 80022a0:	80fb      	strh	r3, [r7, #6]
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80022a8:	d8f4      	bhi.n	8002294 <main+0x54>
    }

    int mode = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

      while(1){
        printf("R: %d, L: %d, FR: %d, FL: %d, BAT: %d\n", ad_r, ad_l,
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <main+0xb4>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <main+0xb8>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <main+0xbc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461c      	mov	r4, r3
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <main+0xc0>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <main+0xc4>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	9200      	str	r2, [sp, #0]
 80022d8:	4623      	mov	r3, r4
 80022da:	4602      	mov	r2, r0
 80022dc:	480a      	ldr	r0, [pc, #40]	@ (8002308 <main+0xc8>)
 80022de:	f006 fb15 	bl	800890c <iprintf>
          ad_fr, ad_fl, ad_bat);
  
        HAL_Delay(300);
 80022e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80022e6:	f001 fe8b 	bl	8004000 <HAL_Delay>
        printf("R: %d, L: %d, FR: %d, FL: %d, BAT: %d\n", ad_r, ad_l,
 80022ea:	bf00      	nop
 80022ec:	e7df      	b.n	80022ae <main+0x6e>
 80022ee:	bf00      	nop
 80022f0:	0800a8e0 	.word	0x0800a8e0
 80022f4:	200082de 	.word	0x200082de
 80022f8:	200082e4 	.word	0x200082e4
 80022fc:	200082e0 	.word	0x200082e0
 8002300:	200082e2 	.word	0x200082e2
 8002304:	200082e6 	.word	0x200082e6
 8002308:	0800a904 	.word	0x0800a904

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	@ 0x50
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2230      	movs	r2, #48	@ 0x30
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f006 fc3e 	bl	8008b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <SystemClock_Config+0xcc>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	4a27      	ldr	r2, [pc, #156]	@ (80023d8 <SystemClock_Config+0xcc>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <SystemClock_Config+0xcc>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <SystemClock_Config+0xd0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <SystemClock_Config+0xd0>)
 8002356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <SystemClock_Config+0xd0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002370:	2310      	movs	r3, #16
 8002372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800237c:	2308      	movs	r3, #8
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002380:	23a8      	movs	r3, #168	@ 0xa8
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002384:	2302      	movs	r3, #2
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002388:	2304      	movs	r3, #4
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fd05 	bl	8004da0 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800239c:	f000 fd16 	bl	8002dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a0:	230f      	movs	r3, #15
 80023a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	2302      	movs	r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80023b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	2105      	movs	r1, #5
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 ff66 	bl	8005290 <HAL_RCC_ClockConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023ca:	f000 fcff 	bl	8002dcc <Error_Handler>
  }
}
 80023ce:	bf00      	nop
 80023d0:	3750      	adds	r7, #80	@ 0x50
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000

080023e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023f2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <MX_ADC1_Init+0x10c>)
 80023f4:	4a3e      	ldr	r2, [pc, #248]	@ (80024f0 <MX_ADC1_Init+0x110>)
 80023f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023f8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <MX_ADC1_Init+0x10c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002406:	2201      	movs	r2, #1
 8002408:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <MX_ADC1_Init+0x10c>)
 800240c:	2200      	movs	r2, #0
 800240e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002418:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <MX_ADC1_Init+0x10c>)
 800241a:	2201      	movs	r2, #1
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800241e:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002420:	2200      	movs	r2, #0
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002426:	4a33      	ldr	r2, [pc, #204]	@ (80024f4 <MX_ADC1_Init+0x114>)
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242a:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <MX_ADC1_Init+0x10c>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002430:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002432:	2205      	movs	r2, #5
 8002434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800243e:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002440:	2201      	movs	r2, #1
 8002442:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002444:	4829      	ldr	r0, [pc, #164]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002446:	f001 fdff 	bl	8004048 <HAL_ADC_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002450:	f000 fcbc 	bl	8002dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002454:	2301      	movs	r3, #1
 8002456:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800245c:	2301      	movs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4821      	ldr	r0, [pc, #132]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002466:	f001 ff9d 	bl	80043a4 <HAL_ADC_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002470:	f000 fcac 	bl	8002dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002474:	2303      	movs	r3, #3
 8002476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002478:	2302      	movs	r3, #2
 800247a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	481a      	ldr	r0, [pc, #104]	@ (80024ec <MX_ADC1_Init+0x10c>)
 8002482:	f001 ff8f 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800248c:	f000 fc9e 	bl	8002dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002494:	2303      	movs	r3, #3
 8002496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	4619      	mov	r1, r3
 800249c:	4813      	ldr	r0, [pc, #76]	@ (80024ec <MX_ADC1_Init+0x10c>)
 800249e:	f001 ff81 	bl	80043a4 <HAL_ADC_ConfigChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80024a8:	f000 fc90 	bl	8002dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80024b0:	2304      	movs	r3, #4
 80024b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	4619      	mov	r1, r3
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <MX_ADC1_Init+0x10c>)
 80024ba:	f001 ff73 	bl	80043a4 <HAL_ADC_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80024c4:	f000 fc82 	bl	8002dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80024c8:	230a      	movs	r3, #10
 80024ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80024cc:	2305      	movs	r3, #5
 80024ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_ADC1_Init+0x10c>)
 80024d6:	f001 ff65 	bl	80043a4 <HAL_ADC_ConfigChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80024e0:	f000 fc74 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000833c 	.word	0x2000833c
 80024f0:	40012000 	.word	0x40012000
 80024f4:	0f000001 	.word	0x0f000001

080024f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <MX_SPI1_Init+0x68>)
 80024fe:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <MX_SPI1_Init+0x6c>)
 8002500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002502:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002504:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <MX_SPI1_Init+0x68>)
 800250c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002510:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_SPI1_Init+0x68>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800252a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_SPI1_Init+0x68>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_SPI1_Init+0x68>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002540:	2200      	movs	r2, #0
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <MX_SPI1_Init+0x68>)
 8002546:	220a      	movs	r2, #10
 8002548:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_SPI1_Init+0x68>)
 800254c:	f003 f880 	bl	8005650 <HAL_SPI_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002556:	f000 fc39 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20008384 	.word	0x20008384
 8002564:	40013000 	.word	0x40013000

08002568 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800256c:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <MX_SPI3_Init+0x64>)
 800256e:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <MX_SPI3_Init+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002572:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <MX_SPI3_Init+0x64>)
 8002574:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002578:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <MX_SPI3_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <MX_SPI3_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <MX_SPI3_Init+0x64>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800258c:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <MX_SPI3_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_SPI3_Init+0x64>)
 8002594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002598:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <MX_SPI3_Init+0x64>)
 800259c:	2220      	movs	r2, #32
 800259e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <MX_SPI3_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025a6:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_SPI3_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <MX_SPI3_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_SPI3_Init+0x64>)
 80025b4:	220a      	movs	r2, #10
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80025b8:	4804      	ldr	r0, [pc, #16]	@ (80025cc <MX_SPI3_Init+0x64>)
 80025ba:	f003 f849 	bl	8005650 <HAL_SPI_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80025c4:	f000 fc02 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200083dc 	.word	0x200083dc
 80025d0:	40003c00 	.word	0x40003c00

080025d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b096      	sub	sp, #88	@ 0x58
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]
 8002602:	615a      	str	r2, [r3, #20]
 8002604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2220      	movs	r2, #32
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f006 fac5 	bl	8008b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <MX_TIM1_Init+0x134>)
 8002614:	4a3d      	ldr	r2, [pc, #244]	@ (800270c <MX_TIM1_Init+0x138>)
 8002616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002618:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <MX_TIM1_Init+0x134>)
 800261a:	2253      	movs	r2, #83	@ 0x53
 800261c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261e:	4b3a      	ldr	r3, [pc, #232]	@ (8002708 <MX_TIM1_Init+0x134>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002624:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <MX_TIM1_Init+0x134>)
 8002626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800262a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262c:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <MX_TIM1_Init+0x134>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002632:	4b35      	ldr	r3, [pc, #212]	@ (8002708 <MX_TIM1_Init+0x134>)
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002638:	4b33      	ldr	r3, [pc, #204]	@ (8002708 <MX_TIM1_Init+0x134>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800263e:	4832      	ldr	r0, [pc, #200]	@ (8002708 <MX_TIM1_Init+0x134>)
 8002640:	f003 fdae 	bl	80061a0 <HAL_TIM_Base_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800264a:	f000 fbbf 	bl	8002dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002652:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002654:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002658:	4619      	mov	r1, r3
 800265a:	482b      	ldr	r0, [pc, #172]	@ (8002708 <MX_TIM1_Init+0x134>)
 800265c:	f004 fb9a 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002666:	f000 fbb1 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800266a:	4827      	ldr	r0, [pc, #156]	@ (8002708 <MX_TIM1_Init+0x134>)
 800266c:	f003 fe58 	bl	8006320 <HAL_TIM_OC_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002676:	f000 fba9 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002682:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002686:	4619      	mov	r1, r3
 8002688:	481f      	ldr	r0, [pc, #124]	@ (8002708 <MX_TIM1_Init+0x134>)
 800268a:	f004 ff83 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002694:	f000 fb9a 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b8:	2200      	movs	r2, #0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4812      	ldr	r0, [pc, #72]	@ (8002708 <MX_TIM1_Init+0x134>)
 80026be:	f004 fa4b 	bl	8006b58 <HAL_TIM_OC_ConfigChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80026c8:	f000 fb80 	bl	8002dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	@ (8002708 <MX_TIM1_Init+0x134>)
 80026f0:	f004 ffcc 	bl	800768c <HAL_TIMEx_ConfigBreakDeadTime>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80026fa:	f000 fb67 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3758      	adds	r7, #88	@ 0x58
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20008434 	.word	0x20008434
 800270c:	40010000 	.word	0x40010000

08002710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	@ 0x38
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002724:	f107 0320 	add.w	r3, r7, #32
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	615a      	str	r2, [r3, #20]
 800273e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002742:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002748:	4b30      	ldr	r3, [pc, #192]	@ (800280c <MX_TIM2_Init+0xfc>)
 800274a:	2200      	movs	r2, #0
 800274c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274e:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800275a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <MX_TIM2_Init+0xfc>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002762:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002768:	4828      	ldr	r0, [pc, #160]	@ (800280c <MX_TIM2_Init+0xfc>)
 800276a:	f003 fd19 	bl	80061a0 <HAL_TIM_Base_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002774:	f000 fb2a 	bl	8002dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800277e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002782:	4619      	mov	r1, r3
 8002784:	4821      	ldr	r0, [pc, #132]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002786:	f004 fb05 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002790:	f000 fb1c 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002794:	481d      	ldr	r0, [pc, #116]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002796:	f003 fe12 	bl	80063be <HAL_TIM_PWM_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027a0:	f000 fb14 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	4619      	mov	r1, r3
 80027b2:	4816      	ldr	r0, [pc, #88]	@ (800280c <MX_TIM2_Init+0xfc>)
 80027b4:	f004 feee 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027be:	f000 fb05 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c2:	2360      	movs	r3, #96	@ 0x60
 80027c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	480c      	ldr	r0, [pc, #48]	@ (800280c <MX_TIM2_Init+0xfc>)
 80027da:	f004 fa19 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80027e4:	f000 faf2 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	220c      	movs	r2, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4807      	ldr	r0, [pc, #28]	@ (800280c <MX_TIM2_Init+0xfc>)
 80027f0:	f004 fa0e 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80027fa:	f000 fae7 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027fe:	4803      	ldr	r0, [pc, #12]	@ (800280c <MX_TIM2_Init+0xfc>)
 8002800:	f001 f980 	bl	8003b04 <HAL_TIM_MspPostInit>

}
 8002804:	bf00      	nop
 8002806:	3738      	adds	r7, #56	@ 0x38
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000847c 	.word	0x2000847c

08002810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08e      	sub	sp, #56	@ 0x38
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002840:	4b32      	ldr	r3, [pc, #200]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002842:	4a33      	ldr	r2, [pc, #204]	@ (8002910 <MX_TIM3_Init+0x100>)
 8002844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002846:	4b31      	ldr	r3, [pc, #196]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002848:	2253      	movs	r2, #83	@ 0x53
 800284a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <MX_TIM3_Init+0xfc>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002852:	4b2e      	ldr	r3, [pc, #184]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002854:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002858:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285a:	4b2c      	ldr	r3, [pc, #176]	@ (800290c <MX_TIM3_Init+0xfc>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002860:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002866:	4829      	ldr	r0, [pc, #164]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002868:	f003 fc9a 	bl	80061a0 <HAL_TIM_Base_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002872:	f000 faab 	bl	8002dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800287c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002880:	4619      	mov	r1, r3
 8002882:	4822      	ldr	r0, [pc, #136]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002884:	f004 fa86 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800288e:	f000 fa9d 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002892:	481e      	ldr	r0, [pc, #120]	@ (800290c <MX_TIM3_Init+0xfc>)
 8002894:	f003 fd93 	bl	80063be <HAL_TIM_PWM_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800289e:	f000 fa95 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4619      	mov	r1, r3
 80028b0:	4816      	ldr	r0, [pc, #88]	@ (800290c <MX_TIM3_Init+0xfc>)
 80028b2:	f004 fe6f 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028bc:	f000 fa86 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c0:	2360      	movs	r3, #96	@ 0x60
 80028c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	4619      	mov	r1, r3
 80028d6:	480d      	ldr	r0, [pc, #52]	@ (800290c <MX_TIM3_Init+0xfc>)
 80028d8:	f004 f99a 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028e2:	f000 fa73 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	2204      	movs	r2, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4807      	ldr	r0, [pc, #28]	@ (800290c <MX_TIM3_Init+0xfc>)
 80028ee:	f004 f98f 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80028f8:	f000 fa68 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028fc:	4803      	ldr	r0, [pc, #12]	@ (800290c <MX_TIM3_Init+0xfc>)
 80028fe:	f001 f901 	bl	8003b04 <HAL_TIM_MspPostInit>

}
 8002902:	bf00      	nop
 8002904:	3738      	adds	r7, #56	@ 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200084c4 	.word	0x200084c4
 8002910:	40000400 	.word	0x40000400

08002914 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b092      	sub	sp, #72	@ 0x48
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	2224      	movs	r2, #36	@ 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f006 f93a 	bl	8008b9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002932:	463b      	mov	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
 8002940:	615a      	str	r2, [r3, #20]
 8002942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <MX_TIM4_Init+0xec>)
 8002946:	4a2f      	ldr	r2, [pc, #188]	@ (8002a04 <MX_TIM4_Init+0xf0>)
 8002948:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <MX_TIM4_Init+0xec>)
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <MX_TIM4_Init+0xec>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <MX_TIM4_Init+0xec>)
 8002958:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800295c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295e:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <MX_TIM4_Init+0xec>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002964:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <MX_TIM4_Init+0xec>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800296a:	4825      	ldr	r0, [pc, #148]	@ (8002a00 <MX_TIM4_Init+0xec>)
 800296c:	f003 fcd8 	bl	8006320 <HAL_TIM_OC_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002976:	f000 fa29 	bl	8002dcc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800297a:	2303      	movs	r3, #3
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002982:	2301      	movs	r3, #1
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800298e:	2300      	movs	r3, #0
 8002990:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002992:	2301      	movs	r3, #1
 8002994:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800299e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a2:	4619      	mov	r1, r3
 80029a4:	4816      	ldr	r0, [pc, #88]	@ (8002a00 <MX_TIM4_Init+0xec>)
 80029a6:	f003 fe9b 	bl	80066e0 <HAL_TIM_Encoder_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80029b0:	f000 fa0c 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4619      	mov	r1, r3
 80029c2:	480f      	ldr	r0, [pc, #60]	@ (8002a00 <MX_TIM4_Init+0xec>)
 80029c4:	f004 fde6 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 80029ce:	f000 f9fd 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029e2:	463b      	mov	r3, r7
 80029e4:	2208      	movs	r2, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <MX_TIM4_Init+0xec>)
 80029ea:	f004 f8b5 	bl	8006b58 <HAL_TIM_OC_ConfigChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80029f4:	f000 f9ea 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3748      	adds	r7, #72	@ 0x48
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000850c 	.word	0x2000850c
 8002a04:	40000800 	.word	0x40000800

08002a08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <MX_TIM5_Init+0x98>)
 8002a28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a2c:	2253      	movs	r2, #83	@ 0x53
 8002a2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8002a36:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a4a:	4814      	ldr	r0, [pc, #80]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a4c:	f003 fba8 	bl	80061a0 <HAL_TIM_Base_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002a56:	f000 f9b9 	bl	8002dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4619      	mov	r1, r3
 8002a66:	480d      	ldr	r0, [pc, #52]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a68:	f004 f994 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002a72:	f000 f9ab 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4619      	mov	r1, r3
 8002a82:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <MX_TIM5_Init+0x94>)
 8002a84:	f004 fd86 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002a8e:	f000 f99d 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20008554 	.word	0x20008554
 8002aa0:	40000c00 	.word	0x40000c00

08002aa4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2224      	movs	r2, #36	@ 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f006 f872 	bl	8008b9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ac0:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ac2:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <MX_TIM8_Init+0xac>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ac6:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ad4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002ad8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b1c      	ldr	r3, [pc, #112]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002aec:	2303      	movs	r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002af4:	2301      	movs	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b04:	2301      	movs	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4619      	mov	r1, r3
 8002b16:	480d      	ldr	r0, [pc, #52]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002b18:	f003 fde2 	bl	80066e0 <HAL_TIM_Encoder_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002b22:	f000 f953 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002b26:	2310      	movs	r3, #16
 8002b28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	@ (8002b4c <MX_TIM8_Init+0xa8>)
 8002b34:	f004 fd2e 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002b3e:	f000 f945 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	3730      	adds	r7, #48	@ 0x30
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000859c 	.word	0x2000859c
 8002b50:	40010400 	.word	0x40010400

08002b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <MX_USART1_UART_Init+0x50>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	f004 fde4 	bl	8007758 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b96:	f000 f919 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200085e4 	.word	0x200085e4
 8002ba4:	40011000 	.word	0x40011000

08002ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b79      	ldr	r3, [pc, #484]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b75      	ldr	r3, [pc, #468]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a74      	ldr	r2, [pc, #464]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b72      	ldr	r3, [pc, #456]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b6b      	ldr	r3, [pc, #428]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	4b67      	ldr	r3, [pc, #412]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a66      	ldr	r2, [pc, #408]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b64      	ldr	r3, [pc, #400]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4b60      	ldr	r3, [pc, #384]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	4a5f      	ldr	r2, [pc, #380]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002db4 <MX_GPIO_Init+0x20c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_L_Pin|IR_FL_Pin|MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin, GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f24c 0130 	movw	r1, #49200	@ 0xc030
 8002c50:	4859      	ldr	r0, [pc, #356]	@ (8002db8 <MX_GPIO_Init+0x210>)
 8002c52:	f002 f88b 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, IR_R_Pin|IR_FR_Pin, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4858      	ldr	r0, [pc, #352]	@ (8002dbc <MX_GPIO_Init+0x214>)
 8002c5c:	f002 f886 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_4_Pin|LED_6_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	f649 0140 	movw	r1, #38976	@ 0x9840
 8002c66:	4856      	ldr	r0, [pc, #344]	@ (8002dc0 <MX_GPIO_Init+0x218>)
 8002c68:	f002 f880 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STBY_Pin|MOTOR_R_CW_Pin|MOTOR_R_CCW_Pin|LED_1_Pin
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f24b 6103 	movw	r1, #46595	@ 0xb603
 8002c72:	4854      	ldr	r0, [pc, #336]	@ (8002dc4 <MX_GPIO_Init+0x21c>)
 8002c74:	f002 f87a 	bl	8004d6c <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_1_NF_U_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	4852      	ldr	r0, [pc, #328]	@ (8002dc8 <MX_GPIO_Init+0x220>)
 8002c7e:	f002 f875 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IR_L_Pin IR_FL_Pin MOTOR_L_CCW_Pin MOTOR_L_CW_Pin */
  GPIO_InitStruct.Pin = IR_L_Pin|IR_FL_Pin|MOTOR_L_CCW_Pin|MOTOR_L_CW_Pin;
 8002c82:	f24c 0330 	movw	r3, #49200	@ 0xc030
 8002c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4847      	ldr	r0, [pc, #284]	@ (8002db8 <MX_GPIO_Init+0x210>)
 8002c9c:	f001 feb2 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_R_Pin IR_FR_Pin */
  GPIO_InitStruct.Pin = IR_R_Pin|IR_FR_Pin;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4841      	ldr	r0, [pc, #260]	@ (8002dbc <MX_GPIO_Init+0x214>)
 8002cb8:	f001 fea4 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_IN_1_Pin SW_POWER_Pin */
  GPIO_InitStruct.Pin = PUSH_IN_1_Pin|SW_POWER_Pin;
 8002cbc:	2306      	movs	r3, #6
 8002cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4619      	mov	r1, r3
 8002cce:	483a      	ldr	r0, [pc, #232]	@ (8002db8 <MX_GPIO_Init+0x210>)
 8002cd0:	f001 fe98 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_6_Pin LED_7_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_6_Pin|LED_7_Pin;
 8002cd4:	f648 0340 	movw	r3, #34880	@ 0x8840
 8002cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4834      	ldr	r0, [pc, #208]	@ (8002dc0 <MX_GPIO_Init+0x218>)
 8002cee:	f001 fe89 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_STBY_Pin MOTOR_R_CW_Pin MOTOR_R_CCW_Pin LED_1_Pin
                           LED_3_Pin LED_1_NF_U_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin|MOTOR_R_CW_Pin|MOTOR_R_CCW_Pin|LED_1_Pin
 8002cf2:	f249 6303 	movw	r3, #38403	@ 0x9603
 8002cf6:	617b      	str	r3, [r7, #20]
                          |LED_3_Pin|LED_1_NF_U_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482e      	ldr	r0, [pc, #184]	@ (8002dc4 <MX_GPIO_Init+0x21c>)
 8002d0c:	f001 fe7a 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8002d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	4826      	ldr	r0, [pc, #152]	@ (8002dc4 <MX_GPIO_Init+0x21c>)
 8002d2a:	f001 fe6b 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin */
  GPIO_InitStruct.Pin = SDA_Pin;
 8002d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d34:	2312      	movs	r3, #18
 8002d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d40:	2304      	movs	r3, #4
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	481b      	ldr	r0, [pc, #108]	@ (8002db8 <MX_GPIO_Init+0x210>)
 8002d4c:	f001 fe5a 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCL_Pin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8002d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d56:	2312      	movs	r3, #18
 8002d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d62:	2304      	movs	r3, #4
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4814      	ldr	r0, [pc, #80]	@ (8002dc0 <MX_GPIO_Init+0x218>)
 8002d6e:	f001 fe49 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5_Pin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8002d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	@ (8002dc0 <MX_GPIO_Init+0x218>)
 8002d8c:	f001 fe3a 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002d90:	2304      	movs	r3, #4
 8002d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d94:	2301      	movs	r3, #1
 8002d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <MX_GPIO_Init+0x220>)
 8002da8:	f001 fe2c 	bl	8004a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dac:	bf00      	nop
 8002dae:	3728      	adds	r7, #40	@ 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40021c00 	.word	0x40021c00
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020c00 	.word	0x40020c00

08002dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd0:	b672      	cpsid	i
}
 8002dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return
     * state
     */
    __disable_irq();
    while (1) {
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <Error_Handler+0x8>

08002dd8 <search_init>:
// search_init
// 探索系の変数とマップの初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void search_init(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
    //====マウスフラグの初期化===
    MF.FLAGS = 0; // フラグクリア
 8002ddc:	490f      	ldr	r1, [pc, #60]	@ (8002e1c <search_init+0x44>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9c1 2300 	strd	r2, r3, [r1]

    //====探索系の変数の初期化====
    goal_x = GOAL_X; // GOAL_Xはglobal.hにマクロ定義あり
 8002dea:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <search_init+0x48>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	801a      	strh	r2, [r3, #0]
    goal_y = GOAL_Y; // GOAL_Yはglobal.hにマクロ定義あり
 8002df0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <search_init+0x4c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	801a      	strh	r2, [r3, #0]
    map_Init();      // マップの初期化
 8002df6:	f000 f81d 	bl	8002e34 <map_Init>
    mouse.x = 0;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <search_init+0x50>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
    mouse.y = 0;   // 現在地の初期化
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <search_init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
    mouse.dir = 0; // マウスの向きの初期化
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <search_init+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	709a      	strb	r2, [r3, #2]
    search_end = false;
 8002e0c:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <search_init+0x54>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
    save_count = 0;
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <search_init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200001f8 	.word	0x200001f8
 8002e20:	200082d0 	.word	0x200082d0
 8002e24:	200082d2 	.word	0x200082d2
 8002e28:	20007fc8 	.word	0x20007fc8
 8002e2c:	200082cc 	.word	0x200082cc
 8002e30:	200082d4 	.word	0x200082d4

08002e34 <map_Init>:
// map_Init
// マップ格納配列map[][]の初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init() {
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
    //====変数宣言====
    uint8_t x, y; // for文用変数

    //====初期化開始====
    // マップのクリア
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	71bb      	strb	r3, [r7, #6]
 8002e3e:	e013      	b.n	8002e68 <map_Init+0x34>
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8002e40:	2300      	movs	r3, #0
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	e00a      	b.n	8002e5c <map_Init+0x28>
            map[y][x] =
 8002e46:	79ba      	ldrb	r2, [r7, #6]
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	493f      	ldr	r1, [pc, #252]	@ (8002f48 <map_Init+0x114>)
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	4413      	add	r3, r2
 8002e50:	22f0      	movs	r2, #240	@ 0xf0
 8002e52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	d9f1      	bls.n	8002e46 <map_Init+0x12>
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8002e62:	79bb      	ldrb	r3, [r7, #6]
 8002e64:	3301      	adds	r3, #1
 8002e66:	71bb      	strb	r3, [r7, #6]
 8002e68:	79bb      	ldrb	r3, [r7, #6]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d9e8      	bls.n	8002e40 <map_Init+0xc>
                0xf0; // 上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
        }
    }

    // 探索済区画のクリア
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8002e6e:	2300      	movs	r3, #0
 8002e70:	71bb      	strb	r3, [r7, #6]
 8002e72:	e013      	b.n	8002e9c <map_Init+0x68>
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8002e74:	2300      	movs	r3, #0
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	e00a      	b.n	8002e90 <map_Init+0x5c>
            visited[y][x] = false;
 8002e7a:	79ba      	ldrb	r2, [r7, #6]
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4933      	ldr	r1, [pc, #204]	@ (8002f4c <map_Init+0x118>)
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	440a      	add	r2, r1
 8002e84:	4413      	add	r3, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d9f1      	bls.n	8002e7a <map_Init+0x46>
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	71bb      	strb	r3, [r7, #6]
 8002e9c:	79bb      	ldrb	r3, [r7, #6]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d9e8      	bls.n	8002e74 <map_Init+0x40>
        }
    }
    visited[0][0] = true;
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <map_Init+0x118>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]

    // 確定壁の配置
    for (y = 0; y < MAZE_SIZE; y++) {  // 各Y座標で実行
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	71bb      	strb	r3, [r7, #6]
 8002eac:	e020      	b.n	8002ef0 <map_Init+0xbc>
        map[y][0] |= 0xf1;             // 最西に壁を配置
 8002eae:	79bb      	ldrb	r3, [r7, #6]
 8002eb0:	4a25      	ldr	r2, [pc, #148]	@ (8002f48 <map_Init+0x114>)
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	4413      	add	r3, r2
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	79bb      	ldrb	r3, [r7, #6]
 8002eba:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8002ebe:	b291      	uxth	r1, r2
 8002ec0:	4a21      	ldr	r2, [pc, #132]	@ (8002f48 <map_Init+0x114>)
 8002ec2:	015b      	lsls	r3, r3, #5
 8002ec4:	4413      	add	r3, r2
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	801a      	strh	r2, [r3, #0]
        map[y][MAZE_SIZE - 1] |= 0xf4; // 最東に壁を配置
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <map_Init+0x114>)
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3306      	adds	r3, #6
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	f042 02f4 	orr.w	r2, r2, #244	@ 0xf4
 8002edc:	b291      	uxth	r1, r2
 8002ede:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <map_Init+0x114>)
 8002ee0:	015b      	lsls	r3, r3, #5
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3306      	adds	r3, #6
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	801a      	strh	r2, [r3, #0]
    for (y = 0; y < MAZE_SIZE; y++) {  // 各Y座標で実行
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	3301      	adds	r3, #1
 8002eee:	71bb      	strb	r3, [r7, #6]
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d9db      	bls.n	8002eae <map_Init+0x7a>
    }
    for (x = 0; x < MAZE_SIZE; x++) {  // 各X座標で実行
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	e01a      	b.n	8002f32 <map_Init+0xfe>
        map[0][x] |= 0xf2;             // 最南に壁を配置
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <map_Init+0x114>)
 8002f00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f042 02f2 	orr.w	r2, r2, #242	@ 0xf2
 8002f0a:	b291      	uxth	r1, r2
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <map_Init+0x114>)
 8002f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        map[MAZE_SIZE - 1][x] |= 0xf8; // 最北に壁を配置
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	@ (8002f48 <map_Init+0x114>)
 8002f16:	3330      	adds	r3, #48	@ 0x30
 8002f18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f042 02f8 	orr.w	r2, r2, #248	@ 0xf8
 8002f22:	b291      	uxth	r1, r2
 8002f24:	4a08      	ldr	r2, [pc, #32]	@ (8002f48 <map_Init+0x114>)
 8002f26:	3330      	adds	r3, #48	@ 0x30
 8002f28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (x = 0; x < MAZE_SIZE; x++) {  // 各X座標で実行
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d9e1      	bls.n	8002efc <map_Init+0xc8>
    }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20007fcc 	.word	0x20007fcc
 8002f4c:	200081cc 	.word	0x200081cc

08002f50 <sensor_init>:
// sensor_init
// センサ系の変数の初期化，ADコンバータの設定とセンサ値取得に使用するタイマの設定をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_init(void) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
    //====センサ系の変数の初期化====
    tp = 0;
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <sensor_init+0x50>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
    ad_l = ad_r = ad_fr = ad_fl = 0;
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <sensor_init+0x54>)
 8002f5e:	4611      	mov	r1, r2
 8002f60:	8019      	strh	r1, [r3, #0]
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <sensor_init+0x58>)
 8002f64:	4611      	mov	r1, r2
 8002f66:	8019      	strh	r1, [r3, #0]
 8002f68:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <sensor_init+0x5c>)
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	8019      	strh	r1, [r3, #0]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <sensor_init+0x60>)
 8002f70:	801a      	strh	r2, [r3, #0]
    base_l = base_r = base_f = 0;
 8002f72:	2200      	movs	r2, #0
 8002f74:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <sensor_init+0x64>)
 8002f76:	4611      	mov	r1, r2
 8002f78:	8019      	strh	r1, [r3, #0]
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <sensor_init+0x68>)
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	8019      	strh	r1, [r3, #0]
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <sensor_init+0x6c>)
 8002f82:	801a      	strh	r2, [r3, #0]
    ADC_task_counter = 0;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <sensor_init+0x70>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim1);
 8002f8a:	480e      	ldr	r0, [pc, #56]	@ (8002fc4 <sensor_init+0x74>)
 8002f8c:	f003 f958 	bl	8006240 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8002f90:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <sensor_init+0x78>)
 8002f92:	f003 f955 	bl	8006240 <HAL_TIM_Base_Start_IT>

    ICM20689_Init();
 8002f96:	f000 f98d 	bl	80032b4 <ICM20689_Init>
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200082dc 	.word	0x200082dc
 8002fa4:	200082e2 	.word	0x200082e2
 8002fa8:	200082e0 	.word	0x200082e0
 8002fac:	200082de 	.word	0x200082de
 8002fb0:	200082e4 	.word	0x200082e4
 8002fb4:	200082ec 	.word	0x200082ec
 8002fb8:	200082ea 	.word	0x200082ea
 8002fbc:	200082e8 	.word	0x200082e8
 8002fc0:	200002c0 	.word	0x200002c0
 8002fc4:	20008434 	.word	0x20008434
 8002fc8:	20008554 	.word	0x20008554

08002fcc <get_adc_value>:
// 指定されたチャンネルのアナログ電圧値を取り出す
// 引数1：hadc …… 電圧値を取り出すチャンネルが属すADCのHandler
// 引数2：channel …… 電圧値を取り出すチャンネル
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);                  // AD変換を開始する
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f001 f87a 	bl	80040d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 150); // AD変換終了まで待機する
 8002fdc:	2196      	movs	r1, #150	@ 0x96
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 f948 	bl	8004274 <HAL_ADC_PollForConversion>
    return (HAL_ADC_GetValue(hadc) * K_SENSOR); // AD変換結果を取得する
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 f9d0 	bl	800438a <HAL_ADC_GetValue>
 8002fea:	ee07 0a90 	vmov	s15, r0
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff6:	ee17 3a90 	vmov	r3, s15
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <get_sensor_value_r>:
// get_sensor_value_r
// Sensor R の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_r(void) { return get_adc_value(&hadc1, ADC_CHANNEL_1); }
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
 8003008:	2101      	movs	r1, #1
 800300a:	4803      	ldr	r0, [pc, #12]	@ (8003018 <get_sensor_value_r+0x14>)
 800300c:	f7ff ffde 	bl	8002fcc <get_adc_value>
 8003010:	4603      	mov	r3, r0
 8003012:	4618      	mov	r0, r3
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000833c 	.word	0x2000833c

0800301c <get_sensor_value_fr>:
// get_sensor_value_fr
// Sensor FR の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_fr(void) { return get_adc_value(&hadc1, ADC_CHANNEL_0); }
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
 8003020:	2100      	movs	r1, #0
 8003022:	4803      	ldr	r0, [pc, #12]	@ (8003030 <get_sensor_value_fr+0x14>)
 8003024:	f7ff ffd2 	bl	8002fcc <get_adc_value>
 8003028:	4603      	mov	r3, r0
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000833c 	.word	0x2000833c

08003034 <get_sensor_value_fl>:
// get_sensor_value_fl
// Sensor FL の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_fl(void) { return get_adc_value(&hadc1, ADC_CHANNEL_2); }
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
 8003038:	2102      	movs	r1, #2
 800303a:	4803      	ldr	r0, [pc, #12]	@ (8003048 <get_sensor_value_fl+0x14>)
 800303c:	f7ff ffc6 	bl	8002fcc <get_adc_value>
 8003040:	4603      	mov	r3, r0
 8003042:	4618      	mov	r0, r3
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000833c 	.word	0x2000833c

0800304c <get_sensor_value_l>:
// get_sensor_value_l
// Sensor L の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_l(void) { return get_adc_value(&hadc1, ADC_CHANNEL_3); }
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
 8003050:	2103      	movs	r1, #3
 8003052:	4803      	ldr	r0, [pc, #12]	@ (8003060 <get_sensor_value_l+0x14>)
 8003054:	f7ff ffba 	bl	8002fcc <get_adc_value>
 8003058:	4603      	mov	r3, r0
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000833c 	.word	0x2000833c

08003064 <get_battery_value>:
// get_battery_value
// VOL Check の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_battery_value(void) { return get_adc_value(&hadc1, ADC_CHANNEL_10); }
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
 8003068:	210a      	movs	r1, #10
 800306a:	4803      	ldr	r0, [pc, #12]	@ (8003078 <get_battery_value+0x14>)
 800306c:	f7ff ffae 	bl	8002fcc <get_adc_value>
 8003070:	4603      	mov	r3, r0
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000833c 	.word	0x2000833c
 800307c:	00000000 	.word	0x00000000

08003080 <get_wall_info>:
// get_wall_info
// 壁情報を取得する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void get_wall_info() {
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0

    // センサ補正値が未定義なら1.0にする
    if (sensor_kx < 0.3 || sensor_kx > 2.0) {
 8003084:	4b54      	ldr	r3, [pc, #336]	@ (80031d8 <get_wall_info+0x158>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa5d 	bl	8000548 <__aeabi_f2d>
 800308e:	a350      	add	r3, pc, #320	@ (adr r3, 80031d0 <get_wall_info+0x150>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fd22 	bl	8000adc <__aeabi_dcmplt>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <get_wall_info+0x32>
 800309e:	4b4e      	ldr	r3, [pc, #312]	@ (80031d8 <get_wall_info+0x158>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80030a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	dd03      	ble.n	80030ba <get_wall_info+0x3a>
        sensor_kx = 1.0;
 80030b2:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <get_wall_info+0x158>)
 80030b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030b8:	601a      	str	r2, [r3, #0]
    }
    //----壁情報の初期化----
    wall_info = 0x00; // 壁情報を初期化
 80030ba:	4b48      	ldr	r3, [pc, #288]	@ (80031dc <get_wall_info+0x15c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	801a      	strh	r2, [r3, #0]
    //----前壁を見る----
    if (ad_fr > WALL_BASE_FR * sensor_kx || ad_fl > WALL_BASE_FL * sensor_kx) {
 80030c0:	4b47      	ldr	r3, [pc, #284]	@ (80031e0 <get_wall_info+0x160>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ce:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <get_wall_info+0x158>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80031e4 <get_wall_info+0x164>
 80030d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	dc12      	bgt.n	800310c <get_wall_info+0x8c>
 80030e6:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <get_wall_info+0x168>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f4:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <get_wall_info+0x158>)
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80031e4 <get_wall_info+0x164>
 80030fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	dd1d      	ble.n	8003148 <get_wall_info+0xc8>
        // AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
        wall_info |= 0x88; // 壁情報を更新
 800310c:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <get_wall_info+0x15c>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8003114:	b29a      	uxth	r2, r3
 8003116:	4b31      	ldr	r3, [pc, #196]	@ (80031dc <get_wall_info+0x15c>)
 8003118:	801a      	strh	r2, [r3, #0]

        if (ad_fr > WALL_BASE_FR * 1.1 && ad_fl > WALL_BASE_FL * 1.1) {
 800311a:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <get_wall_info+0x160>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003124:	d90b      	bls.n	800313e <get_wall_info+0xbe>
 8003126:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <get_wall_info+0x168>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003130:	d905      	bls.n	800313e <get_wall_info+0xbe>
            MF.FLAG.F_WALL = 1;
 8003132:	4a2e      	ldr	r2, [pc, #184]	@ (80031ec <get_wall_info+0x16c>)
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e004      	b.n	8003148 <get_wall_info+0xc8>
        } else {
            MF.FLAG.F_WALL = 0;
 800313e:	4a2b      	ldr	r2, [pc, #172]	@ (80031ec <get_wall_info+0x16c>)
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003146:	6013      	str	r3, [r2, #0]
        }
    }
    //----右壁を見る----
    if (ad_r > WALL_BASE_R * sensor_kx) {
 8003148:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <get_wall_info+0x170>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <get_wall_info+0x158>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80031f4 <get_wall_info+0x174>
 8003160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	dd0a      	ble.n	8003184 <get_wall_info+0x104>
        // AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
        wall_info |= 0x44; // 壁情報を更新
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <get_wall_info+0x15c>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003176:	b29a      	uxth	r2, r3
 8003178:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <get_wall_info+0x15c>)
 800317a:	801a      	strh	r2, [r3, #0]
        r_wall = true;
 800317c:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <get_wall_info+0x178>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e002      	b.n	800318a <get_wall_info+0x10a>
    } else {
        r_wall = false;
 8003184:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <get_wall_info+0x178>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
    }
    //----左壁を見る----
    if (ad_l > WALL_BASE_L * sensor_kx) {
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <get_wall_info+0x17c>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <get_wall_info+0x158>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80031f4 <get_wall_info+0x174>
 80031a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	dd0a      	ble.n	80031c6 <get_wall_info+0x146>
        // AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
        wall_info |= 0x11; // 壁情報を更新
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <get_wall_info+0x15c>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	f043 0311 	orr.w	r3, r3, #17
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <get_wall_info+0x15c>)
 80031bc:	801a      	strh	r2, [r3, #0]
        l_wall = true;
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <get_wall_info+0x180>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
    } else {
        l_wall = false;
    }
}
 80031c4:	e002      	b.n	80031cc <get_wall_info+0x14c>
        l_wall = false;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <get_wall_info+0x180>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	33333333 	.word	0x33333333
 80031d4:	3fd33333 	.word	0x3fd33333
 80031d8:	200082d8 	.word	0x200082d8
 80031dc:	200082ce 	.word	0x200082ce
 80031e0:	200082e0 	.word	0x200082e0
 80031e4:	438c0000 	.word	0x438c0000
 80031e8:	200082e2 	.word	0x200082e2
 80031ec:	200001f8 	.word	0x200001f8
 80031f0:	200082de 	.word	0x200082de
 80031f4:	43b90000 	.word	0x43b90000
 80031f8:	20000200 	.word	0x20000200
 80031fc:	200082e4 	.word	0x200082e4
 8003200:	20000201 	.word	0x20000201

08003204 <read_byte>:

uint8_t read_byte(uint8_t reg) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
    uint8_t ret, val;
    HAL_GPIO_WritePin(GPIOD, CS_Pin, GPIO_PIN_RESET); // cs = 0;
 800320e:	2200      	movs	r2, #0
 8003210:	2104      	movs	r1, #4
 8003212:	4810      	ldr	r0, [pc, #64]	@ (8003254 <read_byte+0x50>)
 8003214:	f001 fdaa 	bl	8004d6c <HAL_GPIO_WritePin>
    ret = reg | 0x80;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800321e:	b2db      	uxtb	r3, r3
 8003220:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003222:	f107 010f 	add.w	r1, r7, #15
 8003226:	2364      	movs	r3, #100	@ 0x64
 8003228:	2201      	movs	r2, #1
 800322a:	480b      	ldr	r0, [pc, #44]	@ (8003258 <read_byte+0x54>)
 800322c:	f002 fa99 	bl	8005762 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003230:	f107 010e 	add.w	r1, r7, #14
 8003234:	2364      	movs	r3, #100	@ 0x64
 8003236:	2201      	movs	r2, #1
 8003238:	4807      	ldr	r0, [pc, #28]	@ (8003258 <read_byte+0x54>)
 800323a:	f002 fbce 	bl	80059da <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOD, CS_Pin, GPIO_PIN_SET); // cs = 1;
 800323e:	2201      	movs	r2, #1
 8003240:	2104      	movs	r1, #4
 8003242:	4804      	ldr	r0, [pc, #16]	@ (8003254 <read_byte+0x50>)
 8003244:	f001 fd92 	bl	8004d6c <HAL_GPIO_WritePin>
    return val;
 8003248:	7bbb      	ldrb	r3, [r7, #14]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020c00 	.word	0x40020c00
 8003258:	200083dc 	.word	0x200083dc

0800325c <write_byte>:
indicates the Read(1) or Write(0) operation. The following 7 bits is the
Resister Address.
*/
//+++++++++++++++++++++++++++++++++++++++++++++++

void write_byte(uint8_t reg, uint8_t val) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	460a      	mov	r2, r1
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	4613      	mov	r3, r2
 800326a:	71bb      	strb	r3, [r7, #6]
    uint8_t ret;
    ret = reg & 0x7F;
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003272:	b2db      	uxtb	r3, r3
 8003274:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOD, CS_Pin, GPIO_PIN_RESET); // cs = 0;
 8003276:	2200      	movs	r2, #0
 8003278:	2104      	movs	r1, #4
 800327a:	480c      	ldr	r0, [pc, #48]	@ (80032ac <write_byte+0x50>)
 800327c:	f001 fd76 	bl	8004d6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003280:	f107 010f 	add.w	r1, r7, #15
 8003284:	2364      	movs	r3, #100	@ 0x64
 8003286:	2201      	movs	r2, #1
 8003288:	4809      	ldr	r0, [pc, #36]	@ (80032b0 <write_byte+0x54>)
 800328a:	f002 fa6a 	bl	8005762 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &val, 1, 100);
 800328e:	1db9      	adds	r1, r7, #6
 8003290:	2364      	movs	r3, #100	@ 0x64
 8003292:	2201      	movs	r2, #1
 8003294:	4806      	ldr	r0, [pc, #24]	@ (80032b0 <write_byte+0x54>)
 8003296:	f002 fa64 	bl	8005762 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOD, CS_Pin, GPIO_PIN_SET); // cs = 1;
 800329a:	2201      	movs	r2, #1
 800329c:	2104      	movs	r1, #4
 800329e:	4803      	ldr	r0, [pc, #12]	@ (80032ac <write_byte+0x50>)
 80032a0:	f001 fd64 	bl	8004d6c <HAL_GPIO_WritePin>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40020c00 	.word	0x40020c00
 80032b0:	200083dc 	.word	0x200083dc

080032b4 <ICM20689_Init>:

//+++++++++++++++++++++++++++++++++++++++++++++++
// ICM20602_Init
//+++++++++++++++++++++++++++++++++++++++++++++++

void ICM20689_Init(void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
    uint8_t who_am_i = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	71fb      	strb	r3, [r7, #7]
    who_am_i = read_byte(0x75);              // check WHO_AM_I (0x75)
 80032be:	2075      	movs	r0, #117	@ 0x75
 80032c0:	f7ff ffa0 	bl	8003204 <read_byte>
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
    printf("who_am_i = 0x%x\r\n", who_am_i); // Who am I = 0x98
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4820      	ldr	r0, [pc, #128]	@ (8003350 <ICM20689_Init+0x9c>)
 80032ce:	f005 fb1d 	bl	800890c <iprintf>

    if (who_am_i != 0x98) { // recheck 0x98
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b98      	cmp	r3, #152	@ 0x98
 80032d6:	d017      	beq.n	8003308 <ICM20689_Init+0x54>
        HAL_Delay(100);
 80032d8:	2064      	movs	r0, #100	@ 0x64
 80032da:	f000 fe91 	bl	8004000 <HAL_Delay>
        who_am_i = read_byte(0x98);
 80032de:	2098      	movs	r0, #152	@ 0x98
 80032e0:	f7ff ff90 	bl	8003204 <read_byte>
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]

        if (who_am_i != 0x98) {
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2b98      	cmp	r3, #152	@ 0x98
 80032ec:	d00c      	beq.n	8003308 <ICM20689_Init+0x54>
            printf("gyro_error\r\n\n");
 80032ee:	4819      	ldr	r0, [pc, #100]	@ (8003354 <ICM20689_Init+0xa0>)
 80032f0:	f005 fb74 	bl	80089dc <puts>
            buzzer_beep(3000);
 80032f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80032f8:	f7fd fe5e 	bl	8000fb8 <buzzer_beep>
            buzzer_beep(3000);
 80032fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003300:	f7fd fe5a 	bl	8000fb8 <buzzer_beep>
            while (1) {
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <ICM20689_Init+0x50>
            }
        }
    }

    // PWR_MIGHT_1 0x6B
    write_byte(0x6B, 0x00); // Set pwr might
 8003308:	2100      	movs	r1, #0
 800330a:	206b      	movs	r0, #107	@ 0x6b
 800330c:	f7ff ffa6 	bl	800325c <write_byte>
    HAL_Delay(50);
 8003310:	2032      	movs	r0, #50	@ 0x32
 8003312:	f000 fe75 	bl	8004000 <HAL_Delay>
    // PWR_MIGHT_2 0x6C
    write_byte(0x6C, 0x00);
 8003316:	2100      	movs	r1, #0
 8003318:	206c      	movs	r0, #108	@ 0x6c
 800331a:	f7ff ff9f 	bl	800325c <write_byte>
    HAL_Delay(50);
 800331e:	2032      	movs	r0, #50	@ 0x32
 8003320:	f000 fe6e 	bl	8004000 <HAL_Delay>
    // set gyro config
    // GYRO_CONFIG 0x1B
    write_byte(0x1B, 0x18); // use 2000 dps
 8003324:	2118      	movs	r1, #24
 8003326:	201b      	movs	r0, #27
 8003328:	f7ff ff98 	bl	800325c <write_byte>
    HAL_Delay(50);
 800332c:	2032      	movs	r0, #50	@ 0x32
 800332e:	f000 fe67 	bl	8004000 <HAL_Delay>
    // ACCEL_CONFIG 0x1C
    write_byte(0x1B, 0x18); // use pm 16g
 8003332:	2118      	movs	r1, #24
 8003334:	201b      	movs	r0, #27
 8003336:	f7ff ff91 	bl	800325c <write_byte>
    HAL_Delay(50);
 800333a:	2032      	movs	r0, #50	@ 0x32
 800333c:	f000 fe60 	bl	8004000 <HAL_Delay>

    set_flag = 1;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <ICM20689_Init+0xa4>)
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	0800a92c 	.word	0x0800a92c
 8003354:	0800a940 	.word	0x0800a940
 8003358:	20008338 	.word	0x20008338

0800335c <ICM20689_GYRO_READ>:

float ICM20689_GYRO_READ(uint8_t H_reg) {
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
    int16_t data = (int16_t)(((uint8_t)read_byte(H_reg) << 8) |
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff4b 	bl	8003204 <read_byte>
 800336e:	4603      	mov	r3, r0
 8003370:	b21b      	sxth	r3, r3
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	b21c      	sxth	r4, r3
                             (uint8_t)read_byte(H_reg + 1));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	3301      	adds	r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff41 	bl	8003204 <read_byte>
 8003382:	4603      	mov	r3, r0
 8003384:	b21b      	sxth	r3, r3
    int16_t data = (int16_t)(((uint8_t)read_byte(H_reg) << 8) |
 8003386:	4323      	orrs	r3, r4
 8003388:	81fb      	strh	r3, [r7, #14]
    float omega =
        (float)(data / 16.4f); //[deg/s] FS_SEL=3-> Scale Factor=16.4[LSB/(dps)]
 800338a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float omega =
 8003396:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80033b4 <ICM20689_GYRO_READ+0x58>
 800339a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800339e:	edc7 7a02 	vstr	s15, [r7, #8]
    return omega;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	ee07 3a90 	vmov	s15, r3
}
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd90      	pop	{r4, r7, pc}
 80033b2:	bf00      	nop
 80033b4:	41833333 	.word	0x41833333

080033b8 <ICM20689_ACCEL_READ>:

float ICM20689_ACCEL_READ(uint8_t H_reg) {
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
    int16_t data = (int16_t)(((uint8_t)read_byte(H_reg) << 8) |
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff1d 	bl	8003204 <read_byte>
 80033ca:	4603      	mov	r3, r0
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	b21c      	sxth	r4, r3
                             (uint8_t)read_byte(H_reg + 1));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	3301      	adds	r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff13 	bl	8003204 <read_byte>
 80033de:	4603      	mov	r3, r0
 80033e0:	b21b      	sxth	r3, r3
    int16_t data = (int16_t)(((uint8_t)read_byte(H_reg) << 8) |
 80033e2:	4323      	orrs	r3, r4
 80033e4:	81fb      	strh	r3, [r7, #14]
    float accel = (float)(data / 2048.0f);
 80033e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f2:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003410 <ICM20689_ACCEL_READ+0x58>
 80033f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033fa:	edc7 7a02 	vstr	s15, [r7, #8]
    return accel;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	ee07 3a90 	vmov	s15, r3
}
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	45000000 	.word	0x45000000

08003414 <ICM20689_DataUpdate>:

void ICM20689_DataUpdate(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
    if (set_flag == 1) {
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <ICM20689_DataUpdate+0xfc>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d175      	bne.n	800350c <ICM20689_DataUpdate+0xf8>
        // get yawrate
        omega_x_raw = -1 * ICM20689_GYRO_READ(0x43);
 8003420:	2043      	movs	r0, #67	@ 0x43
 8003422:	f7ff ff9b 	bl	800335c <ICM20689_GYRO_READ>
 8003426:	eef0 7a40 	vmov.f32	s15, s0
 800342a:	eef1 7a67 	vneg.f32	s15, s15
 800342e:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <ICM20689_DataUpdate+0x100>)
 8003430:	edc3 7a00 	vstr	s15, [r3]
        omega_y_raw = ICM20689_GYRO_READ(0x45);
 8003434:	2045      	movs	r0, #69	@ 0x45
 8003436:	f7ff ff91 	bl	800335c <ICM20689_GYRO_READ>
 800343a:	eef0 7a40 	vmov.f32	s15, s0
 800343e:	4b36      	ldr	r3, [pc, #216]	@ (8003518 <ICM20689_DataUpdate+0x104>)
 8003440:	edc3 7a00 	vstr	s15, [r3]
        omega_z_raw = ICM20689_GYRO_READ(0x47);
 8003444:	2047      	movs	r0, #71	@ 0x47
 8003446:	f7ff ff89 	bl	800335c <ICM20689_GYRO_READ>
 800344a:	eef0 7a40 	vmov.f32	s15, s0
 800344e:	4b33      	ldr	r3, [pc, #204]	@ (800351c <ICM20689_DataUpdate+0x108>)
 8003450:	edc3 7a00 	vstr	s15, [r3]

        // get accel

        accel_x_raw = -1 * ICM20689_ACCEL_READ(0x3B);
 8003454:	203b      	movs	r0, #59	@ 0x3b
 8003456:	f7ff ffaf 	bl	80033b8 <ICM20689_ACCEL_READ>
 800345a:	eef0 7a40 	vmov.f32	s15, s0
 800345e:	eef1 7a67 	vneg.f32	s15, s15
 8003462:	4b2f      	ldr	r3, [pc, #188]	@ (8003520 <ICM20689_DataUpdate+0x10c>)
 8003464:	edc3 7a00 	vstr	s15, [r3]
        accel_y_raw = ICM20689_ACCEL_READ(0x3D);
 8003468:	203d      	movs	r0, #61	@ 0x3d
 800346a:	f7ff ffa5 	bl	80033b8 <ICM20689_ACCEL_READ>
 800346e:	eef0 7a40 	vmov.f32	s15, s0
 8003472:	4b2c      	ldr	r3, [pc, #176]	@ (8003524 <ICM20689_DataUpdate+0x110>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
        accel_z_raw = ICM20689_ACCEL_READ(0x3F);
 8003478:	203f      	movs	r0, #63	@ 0x3f
 800347a:	f7ff ff9d 	bl	80033b8 <ICM20689_ACCEL_READ>
 800347e:	eef0 7a40 	vmov.f32	s15, s0
 8003482:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <ICM20689_DataUpdate+0x114>)
 8003484:	edc3 7a00 	vstr	s15, [r3]

        // True Value(Consider Offset)
        omega_x_true = omega_x_raw - omega_x_offset;
 8003488:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <ICM20689_DataUpdate+0x100>)
 800348a:	ed93 7a00 	vldr	s14, [r3]
 800348e:	4b27      	ldr	r3, [pc, #156]	@ (800352c <ICM20689_DataUpdate+0x118>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <ICM20689_DataUpdate+0x11c>)
 800349a:	edc3 7a00 	vstr	s15, [r3]
        omega_y_true = omega_y_raw - omega_y_offset;
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <ICM20689_DataUpdate+0x104>)
 80034a0:	ed93 7a00 	vldr	s14, [r3]
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <ICM20689_DataUpdate+0x120>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <ICM20689_DataUpdate+0x124>)
 80034b0:	edc3 7a00 	vstr	s15, [r3]
        omega_z_true = omega_z_raw - omega_z_offset;
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <ICM20689_DataUpdate+0x108>)
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <ICM20689_DataUpdate+0x128>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <ICM20689_DataUpdate+0x12c>)
 80034c6:	edc3 7a00 	vstr	s15, [r3]
        accel_x_true = accel_x_raw - accel_x_offset;
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <ICM20689_DataUpdate+0x10c>)
 80034cc:	ed93 7a00 	vldr	s14, [r3]
 80034d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <ICM20689_DataUpdate+0x130>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <ICM20689_DataUpdate+0x134>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
        accel_y_true = accel_y_raw - accel_y_offset;
 80034e0:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <ICM20689_DataUpdate+0x110>)
 80034e2:	ed93 7a00 	vldr	s14, [r3]
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <ICM20689_DataUpdate+0x138>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <ICM20689_DataUpdate+0x13c>)
 80034f2:	edc3 7a00 	vstr	s15, [r3]
        accel_z_true = accel_z_raw - accel_z_offset;
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <ICM20689_DataUpdate+0x114>)
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <ICM20689_DataUpdate+0x140>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003506:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <ICM20689_DataUpdate+0x144>)
 8003508:	edc3 7a00 	vstr	s15, [r3]
    }
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20008338 	.word	0x20008338
 8003514:	200082f0 	.word	0x200082f0
 8003518:	200082f4 	.word	0x200082f4
 800351c:	200082f8 	.word	0x200082f8
 8003520:	200082fc 	.word	0x200082fc
 8003524:	20008300 	.word	0x20008300
 8003528:	20008304 	.word	0x20008304
 800352c:	20008320 	.word	0x20008320
 8003530:	20008308 	.word	0x20008308
 8003534:	20008324 	.word	0x20008324
 8003538:	2000830c 	.word	0x2000830c
 800353c:	20008328 	.word	0x20008328
 8003540:	20008310 	.word	0x20008310
 8003544:	2000832c 	.word	0x2000832c
 8003548:	20008314 	.word	0x20008314
 800354c:	20008330 	.word	0x20008330
 8003550:	20008318 	.word	0x20008318
 8003554:	20008334 	.word	0x20008334
 8003558:	2000831c 	.word	0x2000831c

0800355c <indicate_sensor>:
    printf("offset: %f, %f, %f\n", omega_x_offset, omega_y_offset,
           omega_z_offset);
}

// センサからの壁判断をLEDで表示
void indicate_sensor(void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0

    // 左センサ
    if (ad_l > WALL_BASE_L) {
 8003560:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <indicate_sensor+0x60>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 800356a:	d805      	bhi.n	8003578 <indicate_sensor+0x1c>
        //HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
    } else {
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003572:	4813      	ldr	r0, [pc, #76]	@ (80035c0 <indicate_sensor+0x64>)
 8003574:	f001 fbfa 	bl	8004d6c <HAL_GPIO_WritePin>
    }

    // 右センサ
    if (ad_r > WALL_BASE_R) {
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <indicate_sensor+0x68>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 8003582:	d805      	bhi.n	8003590 <indicate_sensor+0x34>
        //HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
    } else {
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800358a:	480d      	ldr	r0, [pc, #52]	@ (80035c0 <indicate_sensor+0x64>)
 800358c:	f001 fbee 	bl	8004d6c <HAL_GPIO_WritePin>
    }

    // 前壁センサ
    if (ad_fr > WALL_BASE_FR && ad_fl > WALL_BASE_FL) {
 8003590:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <indicate_sensor+0x6c>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800359a:	d905      	bls.n	80035a8 <indicate_sensor+0x4c>
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <indicate_sensor+0x70>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80035a6:	d806      	bhi.n	80035b6 <indicate_sensor+0x5a>
        //HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
    } else {
        HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_RESET);
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ae:	4808      	ldr	r0, [pc, #32]	@ (80035d0 <indicate_sensor+0x74>)
 80035b0:	f001 fbdc 	bl	8004d6c <HAL_GPIO_WritePin>
    }
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200082e4 	.word	0x200082e4
 80035c0:	40020400 	.word	0x40020400
 80035c4:	200082de 	.word	0x200082de
 80035c8:	200082e0 	.word	0x200082e0
 80035cc:	200082e2 	.word	0x200082e2
 80035d0:	40020000 	.word	0x40020000

080035d4 <wall_end>:

// 壁切れの判定
void wall_end(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
    get_wall_info();
 80035d8:	f7ff fd52 	bl	8003080 <get_wall_info>

    if (1) {
        // 直前に右壁が有ったとき
        if (MF.FLAG.R_WALL) {
 80035dc:	4b32      	ldr	r3, [pc, #200]	@ (80036a8 <wall_end+0xd4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <wall_end+0x42>
            // 右壁がなくなっていたら
            if (!r_wall && wall_end_count < 2) {
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <wall_end+0xd8>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <wall_end+0x4c>
 80035fa:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <wall_end+0xdc>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d80d      	bhi.n	8003620 <wall_end+0x4c>
                MF.FLAG.R_WALL_END = 1; // 右壁切れフラグを立てる
 8003604:	4a28      	ldr	r2, [pc, #160]	@ (80036a8 <wall_end+0xd4>)
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
                wall_end_count = 3;
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <wall_end+0xdc>)
 8003610:	2203      	movs	r2, #3
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	e004      	b.n	8003620 <wall_end+0x4c>
            }
        } else {
            MF.FLAG.R_WALL_END = 0;
 8003616:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <wall_end+0xd4>)
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361e:	6013      	str	r3, [r2, #0]
        }
        if (MF.FLAG.L_WALL) {
 8003620:	4b21      	ldr	r3, [pc, #132]	@ (80036a8 <wall_end+0xd4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d015      	beq.n	800365a <wall_end+0x86>
            if (!l_wall && wall_end_count < 2) {
 800362e:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <wall_end+0xe0>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <wall_end+0x90>
 800363e:	4b1c      	ldr	r3, [pc, #112]	@ (80036b0 <wall_end+0xdc>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d80d      	bhi.n	8003664 <wall_end+0x90>
                MF.FLAG.L_WALL_END = 1; // 左壁切れフラグを立てる
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <wall_end+0xd4>)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003650:	6013      	str	r3, [r2, #0]
                wall_end_count = 3;
 8003652:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <wall_end+0xdc>)
 8003654:	2203      	movs	r2, #3
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	e004      	b.n	8003664 <wall_end+0x90>
            }
        } else {
            MF.FLAG.L_WALL_END = 0;
 800365a:	4a13      	ldr	r2, [pc, #76]	@ (80036a8 <wall_end+0xd4>)
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003662:	6013      	str	r3, [r2, #0]
        }

        // 壁情報からフラグを管理
        if (r_wall) {
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <wall_end+0xd8>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <wall_end+0xa6>
            MF.FLAG.R_WALL = 1;
 800366e:	4a0e      	ldr	r2, [pc, #56]	@ (80036a8 <wall_end+0xd4>)
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e004      	b.n	8003684 <wall_end+0xb0>
        } else {
            MF.FLAG.R_WALL = 0;
 800367a:	4a0b      	ldr	r2, [pc, #44]	@ (80036a8 <wall_end+0xd4>)
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003682:	6013      	str	r3, [r2, #0]
        }
        if (l_wall) {
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <wall_end+0xe0>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <wall_end+0xc6>
            MF.FLAG.L_WALL = 1;
 800368e:	4a06      	ldr	r2, [pc, #24]	@ (80036a8 <wall_end+0xd4>)
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003696:	6013      	str	r3, [r2, #0]
        MF.FLAG.R_WALL = 0;
        MF.FLAG.L_WALL = 0;
        MF.FLAG.R_WALL_END = 0;
        MF.FLAG.L_WALL_END = 0;
    }
 8003698:	e004      	b.n	80036a4 <wall_end+0xd0>
            MF.FLAG.L_WALL = 0;
 800369a:	4a03      	ldr	r2, [pc, #12]	@ (80036a8 <wall_end+0xd4>)
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200001f8 	.word	0x200001f8
 80036ac:	20000200 	.word	0x20000200
 80036b0:	200002be 	.word	0x200002be
 80036b4:	20000201 	.word	0x20000201

080036b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <HAL_MspInit+0x4c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003704 <HAL_MspInit+0x4c>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <HAL_MspInit+0x4c>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <HAL_MspInit+0x4c>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_MspInit+0x4c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a24      	ldr	r2, [pc, #144]	@ (80037b8 <HAL_ADC_MspInit+0xb0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d141      	bne.n	80037ae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	4a22      	ldr	r2, [pc, #136]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	6453      	str	r3, [r2, #68]	@ 0x44
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6313      	str	r3, [r2, #48]	@ 0x30
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	4a14      	ldr	r2, [pc, #80]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6313      	str	r3, [r2, #48]	@ 0x30
 8003772:	4b12      	ldr	r3, [pc, #72]	@ (80037bc <HAL_ADC_MspInit+0xb4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VOL_CHECK_Pin;
 800377e:	2301      	movs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003782:	2303      	movs	r3, #3
 8003784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOL_CHECK_GPIO_Port, &GPIO_InitStruct);
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	4619      	mov	r1, r3
 8003790:	480b      	ldr	r0, [pc, #44]	@ (80037c0 <HAL_ADC_MspInit+0xb8>)
 8003792:	f001 f937 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_FR_Pin|SENSOR_R_Pin|SENSOR_FL_Pin|SENSOR_L_Pin;
 8003796:	230f      	movs	r3, #15
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800379a:	2303      	movs	r3, #3
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	4806      	ldr	r0, [pc, #24]	@ (80037c4 <HAL_ADC_MspInit+0xbc>)
 80037aa:	f001 f92b 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	@ 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40012000 	.word	0x40012000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020800 	.word	0x40020800
 80037c4:	40020000 	.word	0x40020000

080037c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	@ 0x30
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a41      	ldr	r2, [pc, #260]	@ (80038ec <HAL_SPI_MspInit+0x124>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d14a      	bne.n	8003880 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	4a3f      	ldr	r2, [pc, #252]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80037f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a38      	ldr	r2, [pc, #224]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b36      	ldr	r3, [pc, #216]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b2f      	ldr	r3, [pc, #188]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384a:	2303      	movs	r3, #3
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800384e:	2305      	movs	r3, #5
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	4826      	ldr	r0, [pc, #152]	@ (80038f4 <HAL_SPI_MspInit+0x12c>)
 800385a:	f001 f8d3 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800385e:	2308      	movs	r3, #8
 8003860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800386e:	2305      	movs	r3, #5
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003872:	f107 031c 	add.w	r3, r7, #28
 8003876:	4619      	mov	r1, r3
 8003878:	481f      	ldr	r0, [pc, #124]	@ (80038f8 <HAL_SPI_MspInit+0x130>)
 800387a:	f001 f8c3 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800387e:	e031      	b.n	80038e4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <HAL_SPI_MspInit+0x134>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12c      	bne.n	80038e4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 8003894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003898:	6413      	str	r3, [r2, #64]	@ 0x40
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a10      	ldr	r2, [pc, #64]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_SPI_MspInit+0x128>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80038c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80038c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038d4:	2306      	movs	r3, #6
 80038d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	4808      	ldr	r0, [pc, #32]	@ (8003900 <HAL_SPI_MspInit+0x138>)
 80038e0:	f001 f890 	bl	8004a04 <HAL_GPIO_Init>
}
 80038e4:	bf00      	nop
 80038e6:	3730      	adds	r7, #48	@ 0x30
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40013000 	.word	0x40013000
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40003c00 	.word	0x40003c00
 8003900:	40020800 	.word	0x40020800

08003904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a30      	ldr	r2, [pc, #192]	@ (80039d4 <HAL_TIM_Base_MspInit+0xd0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d116      	bne.n	8003944 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6453      	str	r3, [r2, #68]	@ 0x44
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2101      	movs	r1, #1
 8003936:	2018      	movs	r0, #24
 8003938:	f001 f82d 	bl	8004996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800393c:	2018      	movs	r0, #24
 800393e:	f001 f846 	bl	80049ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003942:	e042      	b.n	80039ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394c:	d10e      	bne.n	800396c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6413      	str	r3, [r2, #64]	@ 0x40
 800395e:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
}
 800396a:	e02e      	b.n	80039ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <HAL_TIM_Base_MspInit+0xd8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
 8003986:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
}
 8003992:	e01a      	b.n	80039ca <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <HAL_TIM_Base_MspInit+0xdc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d115      	bne.n	80039ca <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_TIM_Base_MspInit+0xd4>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	2032      	movs	r0, #50	@ 0x32
 80039c0:	f000 ffe9 	bl	8004996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80039c4:	2032      	movs	r0, #50	@ 0x32
 80039c6:	f001 f802 	bl	80049ce <HAL_NVIC_EnableIRQ>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000c00 	.word	0x40000c00

080039e4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	@ 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM4)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_TIM_OC_MspInit+0x84>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d12b      	bne.n	8003a5e <HAL_TIM_OC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	4b18      	ldr	r3, [pc, #96]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a10      	ldr	r2, [pc, #64]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <HAL_TIM_OC_MspInit+0x88>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EC_L_A_Pin|EC_L_B_Pin;
 8003a3e:	23c0      	movs	r3, #192	@ 0xc0
 8003a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4619      	mov	r1, r3
 8003a58:	4805      	ldr	r0, [pc, #20]	@ (8003a70 <HAL_TIM_OC_MspInit+0x8c>)
 8003a5a:	f000 ffd3 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	@ 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020400 	.word	0x40020400

08003a74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	@ 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d12b      	bne.n	8003aee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <HAL_TIM_Encoder_MspInit+0x88>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|EC_R_B_Pin;
 8003ace:	23c0      	movs	r3, #192	@ 0xc0
 8003ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4805      	ldr	r0, [pc, #20]	@ (8003b00 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003aea:	f000 ff8b 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003aee:	bf00      	nop
 8003af0:	3728      	adds	r7, #40	@ 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40010400 	.word	0x40010400
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020800 	.word	0x40020800

08003b04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b24:	d13d      	bne.n	8003ba2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	4b31      	ldr	r3, [pc, #196]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b36:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b52:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_L_PWM_Pin;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4619      	mov	r1, r3
 8003b78:	481e      	ldr	r0, [pc, #120]	@ (8003bf4 <HAL_TIM_MspPostInit+0xf0>)
 8003b7a:	f000 ff43 	bl	8004a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin;
 8003b7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4817      	ldr	r0, [pc, #92]	@ (8003bf8 <HAL_TIM_MspPostInit+0xf4>)
 8003b9c:	f000 ff32 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ba0:	e022      	b.n	8003be8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <HAL_TIM_MspPostInit+0xf8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d11d      	bne.n	8003be8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <HAL_TIM_MspPostInit+0xec>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN_Pin|BUZZER_Pin;
 8003bc8:	2330      	movs	r3, #48	@ 0x30
 8003bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	4619      	mov	r1, r3
 8003be2:	4805      	ldr	r0, [pc, #20]	@ (8003bf8 <HAL_TIM_MspPostInit+0xf4>)
 8003be4:	f000 ff0e 	bl	8004a04 <HAL_GPIO_Init>
}
 8003be8:	bf00      	nop
 8003bea:	3728      	adds	r7, #40	@ 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	40000400 	.word	0x40000400

08003c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <HAL_UART_MspInit+0x84>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d12c      	bne.n	8003c7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c2c:	f043 0310 	orr.w	r3, r3, #16
 8003c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a10      	ldr	r2, [pc, #64]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <HAL_UART_MspInit+0x88>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003c5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c6c:	2307      	movs	r3, #7
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	4619      	mov	r1, r3
 8003c76:	4805      	ldr	r0, [pc, #20]	@ (8003c8c <HAL_UART_MspInit+0x8c>)
 8003c78:	f000 fec4 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c7c:	bf00      	nop
 8003c7e:	3728      	adds	r7, #40	@ 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000

08003c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <NMI_Handler+0x4>

08003c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <HardFault_Handler+0x4>

08003ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <MemManage_Handler+0x4>

08003ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <BusFault_Handler+0x4>

08003cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <UsageFault_Handler+0x4>

08003cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce6:	f000 f96b 	bl	8003fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cf4:	4802      	ldr	r0, [pc, #8]	@ (8003d00 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003cf6:	f002 fe27 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20008434 	.word	0x20008434

08003d04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <TIM5_IRQHandler+0x10>)
 8003d0a:	f002 fe1d 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20008554 	.word	0x20008554

08003d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return 1;
 8003d1c:	2301      	movs	r3, #1
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_kill>:

int _kill(int pid, int sig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d32:	f004 ff85 	bl	8008c40 <__errno>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2216      	movs	r2, #22
 8003d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_exit>:

void _exit (int status)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d50:	f04f 31ff 	mov.w	r1, #4294967295
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ffe7 	bl	8003d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <_exit+0x12>

08003d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e00a      	b.n	8003d86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d70:	f3af 8000 	nop.w
 8003d74:	4601      	mov	r1, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	60ba      	str	r2, [r7, #8]
 8003d7c:	b2ca      	uxtb	r2, r1
 8003d7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3301      	adds	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	dbf0      	blt.n	8003d70 <_read+0x12>
	}

return len;
 8003d8e:	687b      	ldr	r3, [r7, #4]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e009      	b.n	8003dbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	60ba      	str	r2, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd f940 	bl	8001038 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	dbf1      	blt.n	8003daa <_write+0x12>
	}
	return len;
 8003dc6:	687b      	ldr	r3, [r7, #4]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_close>:

int _close(int file)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	return -1;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003df8:	605a      	str	r2, [r3, #4]
	return 0;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <_isatty>:

int _isatty(int file)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	return 1;
 8003e10:	2301      	movs	r3, #1
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
	return 0;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e40:	4a14      	ldr	r2, [pc, #80]	@ (8003e94 <_sbrk+0x5c>)
 8003e42:	4b15      	ldr	r3, [pc, #84]	@ (8003e98 <_sbrk+0x60>)
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e4c:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <_sbrk+0x64>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <_sbrk+0x68>)
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d207      	bcs.n	8003e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e68:	f004 feea 	bl	8008c40 <__errno>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	220c      	movs	r2, #12
 8003e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e009      	b.n	8003e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e78:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e7e:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <_sbrk+0x64>)
 8003e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20020000 	.word	0x20020000
 8003e98:	00000400 	.word	0x00000400
 8003e9c:	20008628 	.word	0x20008628
 8003ea0:	20008780 	.word	0x20008780

08003ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <SystemInit+0x20>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	4a05      	ldr	r2, [pc, #20]	@ (8003ec4 <SystemInit+0x20>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ecc:	480d      	ldr	r0, [pc, #52]	@ (8003f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ece:	490e      	ldr	r1, [pc, #56]	@ (8003f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8003f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed4:	e002      	b.n	8003edc <LoopCopyDataInit>

08003ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eda:	3304      	adds	r3, #4

08003edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee0:	d3f9      	bcc.n	8003ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8003f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8003f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee8:	e001      	b.n	8003eee <LoopFillZerobss>

08003eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eec:	3204      	adds	r2, #4

08003eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef0:	d3fb      	bcc.n	8003eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ef2:	f7ff ffd7 	bl	8003ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f004 fea9 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003efa:	f7fe f9a1 	bl	8002240 <main>
  bx  lr    
 8003efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003f0c:	0800ad04 	.word	0x0800ad04
  ldr r2, =_sbss
 8003f10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003f14:	2000877c 	.word	0x2000877c

08003f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC_IRQHandler>
	...

08003f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f20:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0d      	ldr	r2, [pc, #52]	@ (8003f5c <HAL_Init+0x40>)
 8003f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_Init+0x40>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <HAL_Init+0x40>)
 8003f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <HAL_Init+0x40>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <HAL_Init+0x40>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f44:	2003      	movs	r0, #3
 8003f46:	f000 fd1b 	bl	8004980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f000 f808 	bl	8003f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f50:	f7ff fbb2 	bl	80036b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00

08003f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_InitTick+0x54>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_InitTick+0x58>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fd33 	bl	80049ea <HAL_SYSTICK_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00e      	b.n	8003fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d80a      	bhi.n	8003faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f94:	2200      	movs	r2, #0
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f000 fcfb 	bl	8004996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa0:	4a06      	ldr	r2, [pc, #24]	@ (8003fbc <HAL_InitTick+0x5c>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000008 	.word	0x20000008
 8003fe4:	2000862c 	.word	0x2000862c

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000862c 	.word	0x2000862c

08004000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff ffee 	bl	8003fe8 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d005      	beq.n	8004026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <HAL_Delay+0x44>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004026:	bf00      	nop
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d8f7      	bhi.n	8004028 <HAL_Delay+0x28>
  {
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000008 	.word	0x20000008

08004048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e033      	b.n	80040c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fb4e 	bl	8003708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800408e:	f023 0302 	bic.w	r3, r3, #2
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 faa4 	bl	80045e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80040b6:	e001      	b.n	80040bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_Start+0x1a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0b2      	b.n	8004250 <HAL_ADC_Start+0x180>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d018      	beq.n	8004132 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004110:	4b52      	ldr	r3, [pc, #328]	@ (800425c <HAL_ADC_Start+0x18c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a52      	ldr	r2, [pc, #328]	@ (8004260 <HAL_ADC_Start+0x190>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	0c9a      	lsrs	r2, r3, #18
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004124:	e002      	b.n	800412c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3b01      	subs	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f9      	bne.n	8004126 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d17a      	bne.n	8004236 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800416a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417e:	d106      	bne.n	800418e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	f023 0206 	bic.w	r2, r3, #6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	@ 0x44
 800418c:	e002      	b.n	8004194 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800419c:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_ADC_Start+0x194>)
 800419e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80041a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d12a      	bne.n	800420c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004268 <HAL_ADC_Start+0x198>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d015      	beq.n	80041ec <HAL_ADC_Start+0x11c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a29      	ldr	r2, [pc, #164]	@ (800426c <HAL_ADC_Start+0x19c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d105      	bne.n	80041d6 <HAL_ADC_Start+0x106>
 80041ca:	4b26      	ldr	r3, [pc, #152]	@ (8004264 <HAL_ADC_Start+0x194>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a25      	ldr	r2, [pc, #148]	@ (8004270 <HAL_ADC_Start+0x1a0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d136      	bne.n	800424e <HAL_ADC_Start+0x17e>
 80041e0:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <HAL_ADC_Start+0x194>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d130      	bne.n	800424e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d129      	bne.n	800424e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	e020      	b.n	800424e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a15      	ldr	r2, [pc, #84]	@ (8004268 <HAL_ADC_Start+0x198>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d11b      	bne.n	800424e <HAL_ADC_Start+0x17e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d114      	bne.n	800424e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e00b      	b.n	800424e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000000 	.word	0x20000000
 8004260:	431bde83 	.word	0x431bde83
 8004264:	40012300 	.word	0x40012300
 8004268:	40012000 	.word	0x40012000
 800426c:	40012100 	.word	0x40012100
 8004270:	40012200 	.word	0x40012200

08004274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004290:	d113      	bne.n	80042ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800429c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a0:	d10b      	bne.n	80042ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e063      	b.n	8004382 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80042ba:	f7ff fe95 	bl	8003fe8 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042c0:	e021      	b.n	8004306 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d01d      	beq.n	8004306 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_ADC_PollForConversion+0x6c>
 80042d0:	f7ff fe8a 	bl	8003fe8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d212      	bcs.n	8004306 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d00b      	beq.n	8004306 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e03d      	b.n	8004382 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d1d6      	bne.n	80042c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0212 	mvn.w	r2, #18
 800431c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d123      	bne.n	8004380 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11f      	bne.n	8004380 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e105      	b.n	80045cc <HAL_ADC_ConfigChannel+0x228>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d925      	bls.n	800441c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	3b1e      	subs	r3, #30
 80043e6:	2207      	movs	r2, #7
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68d9      	ldr	r1, [r3, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	4603      	mov	r3, r0
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4403      	add	r3, r0
 800440e:	3b1e      	subs	r3, #30
 8004410:	409a      	lsls	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e022      	b.n	8004462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6919      	ldr	r1, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	2207      	movs	r2, #7
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43da      	mvns	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	400a      	ands	r2, r1
 800443e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	4603      	mov	r3, r0
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4403      	add	r3, r0
 8004458:	409a      	lsls	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d824      	bhi.n	80044b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b05      	subs	r3, #5
 800447c:	221f      	movs	r2, #31
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4618      	mov	r0, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b05      	subs	r3, #5
 80044a6:	fa00 f203 	lsl.w	r2, r0, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80044b2:	e04c      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d824      	bhi.n	8004506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	3b23      	subs	r3, #35	@ 0x23
 80044ce:	221f      	movs	r2, #31
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43da      	mvns	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	400a      	ands	r2, r1
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	3b23      	subs	r3, #35	@ 0x23
 80044f8:	fa00 f203 	lsl.w	r2, r0, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
 8004504:	e023      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3b41      	subs	r3, #65	@ 0x41
 8004518:	221f      	movs	r2, #31
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	400a      	ands	r2, r1
 8004526:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	3b41      	subs	r3, #65	@ 0x41
 8004542:	fa00 f203 	lsl.w	r2, r0, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454e:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <HAL_ADC_ConfigChannel+0x234>)
 8004550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <HAL_ADC_ConfigChannel+0x238>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x1cc>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b12      	cmp	r3, #18
 8004562:	d105      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <HAL_ADC_ConfigChannel+0x238>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d123      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d003      	beq.n	800458a <HAL_ADC_ConfigChannel+0x1e6>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b11      	cmp	r3, #17
 8004588:	d11b      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d111      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <HAL_ADC_ConfigChannel+0x23c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a10      	ldr	r2, [pc, #64]	@ (80045e4 <HAL_ADC_ConfigChannel+0x240>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	0c9a      	lsrs	r2, r3, #18
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045b4:	e002      	b.n	80045bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f9      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012300 	.word	0x40012300
 80045dc:	40012000 	.word	0x40012000
 80045e0:	20000000 	.word	0x20000000
 80045e4:	431bde83 	.word	0x431bde83

080045e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045f0:	4b79      	ldr	r3, [pc, #484]	@ (80047d8 <ADC_Init+0x1f0>)
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800461c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	4a58      	ldr	r2, [pc, #352]	@ (80047dc <ADC_Init+0x1f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800468e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6899      	ldr	r1, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e00f      	b.n	80046e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0202 	bic.w	r2, r2, #2
 80046f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6899      	ldr	r1, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7e1b      	ldrb	r3, [r3, #24]
 8004700:	005a      	lsls	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	3b01      	subs	r3, #1
 8004740:	035a      	lsls	r2, r3, #13
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	e007      	b.n	800475c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	3b01      	subs	r3, #1
 8004778:	051a      	lsls	r2, r3, #20
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800479e:	025a      	lsls	r2, r3, #9
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	029a      	lsls	r2, r3, #10
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012300 	.word	0x40012300
 80047dc:	0f000001 	.word	0x0f000001

080047e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <__NVIC_SetPriorityGrouping+0x44>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047fc:	4013      	ands	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800480c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004812:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <__NVIC_SetPriorityGrouping+0x44>)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	60d3      	str	r3, [r2, #12]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <__NVIC_GetPriorityGrouping+0x18>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	f003 0307 	and.w	r3, r3, #7
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	db0b      	blt.n	800486e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	f003 021f 	and.w	r2, r3, #31
 800485c:	4907      	ldr	r1, [pc, #28]	@ (800487c <__NVIC_EnableIRQ+0x38>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2001      	movs	r0, #1
 8004866:	fa00 f202 	lsl.w	r2, r0, r2
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e100 	.word	0xe000e100

08004880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004890:	2b00      	cmp	r3, #0
 8004892:	db0a      	blt.n	80048aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	490c      	ldr	r1, [pc, #48]	@ (80048cc <__NVIC_SetPriority+0x4c>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	440b      	add	r3, r1
 80048a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a8:	e00a      	b.n	80048c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4908      	ldr	r1, [pc, #32]	@ (80048d0 <__NVIC_SetPriority+0x50>)
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3b04      	subs	r3, #4
 80048b8:	0112      	lsls	r2, r2, #4
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	440b      	add	r3, r1
 80048be:	761a      	strb	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	e000e100 	.word	0xe000e100
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f1c3 0307 	rsb	r3, r3, #7
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf28      	it	cs
 80048f2:	2304      	movcs	r3, #4
 80048f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3304      	adds	r3, #4
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d902      	bls.n	8004904 <NVIC_EncodePriority+0x30>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3b03      	subs	r3, #3
 8004902:	e000      	b.n	8004906 <NVIC_EncodePriority+0x32>
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	401a      	ands	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800491c:	f04f 31ff 	mov.w	r1, #4294967295
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	43d9      	mvns	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	4313      	orrs	r3, r2
         );
}
 800492e:	4618      	mov	r0, r3
 8004930:	3724      	adds	r7, #36	@ 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800494c:	d301      	bcc.n	8004952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800494e:	2301      	movs	r3, #1
 8004950:	e00f      	b.n	8004972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004952:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <SysTick_Config+0x40>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800495a:	210f      	movs	r1, #15
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	f7ff ff8e 	bl	8004880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <SysTick_Config+0x40>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800496a:	4b04      	ldr	r3, [pc, #16]	@ (800497c <SysTick_Config+0x40>)
 800496c:	2207      	movs	r2, #7
 800496e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	e000e010 	.word	0xe000e010

08004980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff29 	bl	80047e0 <__NVIC_SetPriorityGrouping>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049a8:	f7ff ff3e 	bl	8004828 <__NVIC_GetPriorityGrouping>
 80049ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff8e 	bl	80048d4 <NVIC_EncodePriority>
 80049b8:	4602      	mov	r2, r0
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff5d 	bl	8004880 <__NVIC_SetPriority>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	4603      	mov	r3, r0
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff31 	bl	8004844 <__NVIC_EnableIRQ>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff ffa2 	bl	800493c <SysTick_Config>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	@ 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e16b      	b.n	8004cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a20:	2201      	movs	r2, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4013      	ands	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	f040 815a 	bne.w	8004cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d005      	beq.n	8004a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d130      	bne.n	8004ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2203      	movs	r2, #3
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 0201 	and.w	r2, r3, #1
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d017      	beq.n	8004af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d123      	bne.n	8004b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	220f      	movs	r2, #15
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	08da      	lsrs	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3208      	adds	r2, #8
 8004b42:	69b9      	ldr	r1, [r7, #24]
 8004b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	2203      	movs	r2, #3
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 0203 	and.w	r2, r3, #3
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80b4 	beq.w	8004cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	4b60      	ldr	r3, [pc, #384]	@ (8004d10 <HAL_GPIO_Init+0x30c>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	4a5f      	ldr	r2, [pc, #380]	@ (8004d10 <HAL_GPIO_Init+0x30c>)
 8004b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004d10 <HAL_GPIO_Init+0x30c>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d14 <HAL_GPIO_Init+0x310>)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	3302      	adds	r3, #2
 8004bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	@ (8004d18 <HAL_GPIO_Init+0x314>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02b      	beq.n	8004c2a <HAL_GPIO_Init+0x226>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a51      	ldr	r2, [pc, #324]	@ (8004d1c <HAL_GPIO_Init+0x318>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d025      	beq.n	8004c26 <HAL_GPIO_Init+0x222>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a50      	ldr	r2, [pc, #320]	@ (8004d20 <HAL_GPIO_Init+0x31c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <HAL_GPIO_Init+0x21e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a4f      	ldr	r2, [pc, #316]	@ (8004d24 <HAL_GPIO_Init+0x320>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d019      	beq.n	8004c1e <HAL_GPIO_Init+0x21a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a4e      	ldr	r2, [pc, #312]	@ (8004d28 <HAL_GPIO_Init+0x324>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_GPIO_Init+0x216>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8004d2c <HAL_GPIO_Init+0x328>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_GPIO_Init+0x212>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8004d30 <HAL_GPIO_Init+0x32c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <HAL_GPIO_Init+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	@ (8004d34 <HAL_GPIO_Init+0x330>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_GPIO_Init+0x20a>
 8004c0a:	2307      	movs	r3, #7
 8004c0c:	e00e      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	e00c      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c12:	2306      	movs	r3, #6
 8004c14:	e00a      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c16:	2305      	movs	r3, #5
 8004c18:	e008      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e006      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e004      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e002      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_GPIO_Init+0x228>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	f002 0203 	and.w	r2, r2, #3
 8004c32:	0092      	lsls	r2, r2, #2
 8004c34:	4093      	lsls	r3, r2
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c3c:	4935      	ldr	r1, [pc, #212]	@ (8004d14 <HAL_GPIO_Init+0x310>)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c6e:	4a32      	ldr	r2, [pc, #200]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c74:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c98:	4a27      	ldr	r2, [pc, #156]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c9e:	4b26      	ldr	r3, [pc, #152]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cec:	4a12      	ldr	r2, [pc, #72]	@ (8004d38 <HAL_GPIO_Init+0x334>)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	f67f ae90 	bls.w	8004a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40021400 	.word	0x40021400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	40021c00 	.word	0x40021c00
 8004d38:	40013c00 	.word	0x40013c00

08004d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
 8004d58:	e001      	b.n	8004d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d7c:	787b      	ldrb	r3, [r7, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d88:	e003      	b.n	8004d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	041a      	lsls	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	619a      	str	r2, [r3, #24]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e267      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d075      	beq.n	8004eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dbe:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d00c      	beq.n	8004de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dca:	4b85      	ldr	r3, [pc, #532]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d112      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd6:	4b82      	ldr	r3, [pc, #520]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de2:	d10b      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05b      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x108>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d157      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e242      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d106      	bne.n	8004e14 <HAL_RCC_OscConfig+0x74>
 8004e06:	4b76      	ldr	r3, [pc, #472]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a75      	ldr	r2, [pc, #468]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x98>
 8004e1e:	4b70      	ldr	r3, [pc, #448]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e38:	4b69      	ldr	r3, [pc, #420]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a68      	ldr	r2, [pc, #416]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b66      	ldr	r3, [pc, #408]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a65      	ldr	r2, [pc, #404]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7ff f8c6 	bl	8003fe8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7ff f8c2 	bl	8003fe8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	@ 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e207      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xc0>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7ff f8b2 	bl	8003fe8 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e88:	f7ff f8ae 	bl	8003fe8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1f3      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0xe8>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d063      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec2:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d11c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ece:	4b44      	ldr	r3, [pc, #272]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	4b41      	ldr	r3, [pc, #260]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x152>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e1c7      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4937      	ldr	r1, [pc, #220]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	e03a      	b.n	8004f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <HAL_RCC_OscConfig+0x244>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7ff f867 	bl	8003fe8 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1e:	f7ff f863 	bl	8003fe8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e1a8      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3c:	4b28      	ldr	r3, [pc, #160]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4925      	ldr	r1, [pc, #148]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]
 8004f50:	e015      	b.n	8004f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <HAL_RCC_OscConfig+0x244>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7ff f846 	bl	8003fe8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f60:	f7ff f842 	bl	8003fe8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e187      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d036      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_RCC_OscConfig+0x248>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7ff f826 	bl	8003fe8 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7ff f822 	bl	8003fe8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e167      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x200>
 8004fbe:	e01b      	b.n	8004ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <HAL_RCC_OscConfig+0x248>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc6:	f7ff f80f 	bl	8003fe8 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	e00e      	b.n	8004fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fce:	f7ff f80b 	bl	8003fe8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d907      	bls.n	8004fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e150      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	42470000 	.word	0x42470000
 8004fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fec:	4b88      	ldr	r3, [pc, #544]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ea      	bne.n	8004fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8097 	beq.w	8005134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500a:	4b81      	ldr	r3, [pc, #516]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	4b7d      	ldr	r3, [pc, #500]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	4a7c      	ldr	r2, [pc, #496]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005024:	6413      	str	r3, [r2, #64]	@ 0x40
 8005026:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005036:	4b77      	ldr	r3, [pc, #476]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d118      	bne.n	8005074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005042:	4b74      	ldr	r3, [pc, #464]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a73      	ldr	r2, [pc, #460]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504e:	f7fe ffcb 	bl	8003fe8 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005056:	f7fe ffc7 	bl	8003fe8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e10c      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005068:	4b6a      	ldr	r3, [pc, #424]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x2ea>
 800507c:	4b64      	ldr	r3, [pc, #400]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a63      	ldr	r2, [pc, #396]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
 8005088:	e01c      	b.n	80050c4 <HAL_RCC_OscConfig+0x324>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x30c>
 8005092:	4b5f      	ldr	r3, [pc, #380]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	4a5e      	ldr	r2, [pc, #376]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	6713      	str	r3, [r2, #112]	@ 0x70
 800509e:	4b5c      	ldr	r3, [pc, #368]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0x324>
 80050ac:	4b58      	ldr	r3, [pc, #352]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	4a57      	ldr	r2, [pc, #348]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b8:	4b55      	ldr	r3, [pc, #340]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a54      	ldr	r2, [pc, #336]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050be:	f023 0304 	bic.w	r3, r3, #4
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fe ff8c 	bl	8003fe8 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fe ff88 	bl	8003fe8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0cb      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ea:	4b49      	ldr	r3, [pc, #292]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0ee      	beq.n	80050d4 <HAL_RCC_OscConfig+0x334>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f8:	f7fe ff76 	bl	8003fe8 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fe ff72 	bl	8003fe8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0b5      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005116:	4b3e      	ldr	r3, [pc, #248]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ee      	bne.n	8005100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005128:	4b39      	ldr	r3, [pc, #228]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	4a38      	ldr	r2, [pc, #224]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005132:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a1 	beq.w	8005280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800513e:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b08      	cmp	r3, #8
 8005148:	d05c      	beq.n	8005204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d141      	bne.n	80051d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b31      	ldr	r3, [pc, #196]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fe ff46 	bl	8003fe8 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fe ff42 	bl	8003fe8 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e087      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	4b27      	ldr	r3, [pc, #156]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	3b01      	subs	r3, #1
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	491b      	ldr	r1, [pc, #108]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fe ff1b 	bl	8003fe8 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fe ff17 	bl	8003fe8 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e05c      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x416>
 80051d4:	e054      	b.n	8005280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fe ff04 	bl	8003fe8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe ff00 	bl	8003fe8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e045      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x444>
 8005202:	e03d      	b.n	8005280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e038      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
 8005210:	40023800 	.word	0x40023800
 8005214:	40007000 	.word	0x40007000
 8005218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <HAL_RCC_OscConfig+0x4ec>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d028      	beq.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d121      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d11a      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005254:	4293      	cmp	r3, r2
 8005256:	d111      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	3b01      	subs	r3, #1
 8005266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d107      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0cc      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b68      	ldr	r3, [pc, #416]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d90c      	bls.n	80052cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b65      	ldr	r3, [pc, #404]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a52      	ldr	r2, [pc, #328]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	494d      	ldr	r1, [pc, #308]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d044      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d119      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d003      	beq.n	800534e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	2b03      	cmp	r3, #3
 800534c:	d107      	bne.n	800535e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534e:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e06f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535e:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e067      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4934      	ldr	r1, [pc, #208]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005380:	f7fe fe32 	bl	8003fe8 <HAL_GetTick>
 8005384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	e00a      	b.n	800539e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005388:	f7fe fe2e 	bl	8003fe8 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e04f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 020c 	and.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1eb      	bne.n	8005388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b0:	4b25      	ldr	r3, [pc, #148]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d20c      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e032      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b19      	ldr	r3, [pc, #100]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4916      	ldr	r1, [pc, #88]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	490e      	ldr	r1, [pc, #56]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005416:	f000 f821 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490a      	ldr	r1, [pc, #40]	@ (8005450 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fd92 	bl	8003f60 <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023c00 	.word	0x40023c00
 800544c:	40023800 	.word	0x40023800
 8005450:	0800a964 	.word	0x0800a964
 8005454:	20000000 	.word	0x20000000
 8005458:	20000004 	.word	0x20000004

0800545c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005460:	b090      	sub	sp, #64	@ 0x40
 8005462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546c:	2300      	movs	r3, #0
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005474:	4b59      	ldr	r3, [pc, #356]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d00d      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x40>
 8005480:	2b08      	cmp	r3, #8
 8005482:	f200 80a1 	bhi.w	80055c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x34>
 800548a:	2b04      	cmp	r3, #4
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x3a>
 800548e:	e09b      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005492:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005494:	e09b      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005496:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005498:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800549a:	e098      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800549c:	4b4f      	ldr	r3, [pc, #316]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054a6:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d028      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b2:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	2200      	movs	r2, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054c4:	2100      	movs	r1, #0
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80054c8:	fb03 f201 	mul.w	r2, r3, r1
 80054cc:	2300      	movs	r3, #0
 80054ce:	fb00 f303 	mul.w	r3, r0, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	4a43      	ldr	r2, [pc, #268]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80054d6:	fba0 1202 	umull	r1, r2, r0, r2
 80054da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054dc:	460a      	mov	r2, r1
 80054de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e8:	2200      	movs	r2, #0
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054f6:	f7fb fbc7 	bl	8000c88 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4613      	mov	r3, r2
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005502:	e053      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005504:	4b35      	ldr	r3, [pc, #212]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	2200      	movs	r2, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	617a      	str	r2, [r7, #20]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005516:	f04f 0b00 	mov.w	fp, #0
 800551a:	4652      	mov	r2, sl
 800551c:	465b      	mov	r3, fp
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552c:	0150      	lsls	r0, r2, #5
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	ebb2 080a 	subs.w	r8, r2, sl
 8005536:	eb63 090b 	sbc.w	r9, r3, fp
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800554a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800554e:	ebb2 0408 	subs.w	r4, r2, r8
 8005552:	eb63 0509 	sbc.w	r5, r3, r9
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	00eb      	lsls	r3, r5, #3
 8005560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005564:	00e2      	lsls	r2, r4, #3
 8005566:	4614      	mov	r4, r2
 8005568:	461d      	mov	r5, r3
 800556a:	eb14 030a 	adds.w	r3, r4, sl
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	eb45 030b 	adc.w	r3, r5, fp
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005582:	4629      	mov	r1, r5
 8005584:	028b      	lsls	r3, r1, #10
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800558c:	4621      	mov	r1, r4
 800558e:	028a      	lsls	r2, r1, #10
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	2200      	movs	r2, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a0:	f7fb fb72 	bl	8000c88 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80055bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055c6:	e002      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3740      	adds	r7, #64	@ 0x40
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	017d7840 	.word	0x017d7840

080055e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000000 	.word	0x20000000

08005600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005604:	f7ff fff0 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0a9b      	lsrs	r3, r3, #10
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	0800a974 	.word	0x0800a974

08005628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800562c:	f7ff ffdc 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	0b5b      	lsrs	r3, r3, #13
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	4903      	ldr	r1, [pc, #12]	@ (800564c <HAL_RCC_GetPCLK2Freq+0x24>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40023800 	.word	0x40023800
 800564c:	0800a974 	.word	0x0800a974

08005650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e07b      	b.n	800575a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d108      	bne.n	800567c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005672:	d009      	beq.n	8005688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	61da      	str	r2, [r3, #28]
 800567a:	e005      	b.n	8005688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fe f890 	bl	80037c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570c:	ea42 0103 	orr.w	r1, r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	f003 0104 	and.w	r1, r3, #4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	f003 0210 	and.w	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b088      	sub	sp, #32
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_SPI_Transmit+0x22>
 8005780:	2302      	movs	r3, #2
 8005782:	e126      	b.n	80059d2 <HAL_SPI_Transmit+0x270>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578c:	f7fe fc2c 	bl	8003fe8 <HAL_GetTick>
 8005790:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
 80057a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057a6:	e10b      	b.n	80059c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_SPI_Transmit+0x52>
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057b8:	e102      	b.n	80059c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005800:	d10f      	bne.n	8005822 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d007      	beq.n	8005840 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800583e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005848:	d14b      	bne.n	80058e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Transmit+0xf6>
 8005852:	8afb      	ldrh	r3, [r7, #22]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d13e      	bne.n	80058d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800587c:	e02b      	b.n	80058d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d112      	bne.n	80058b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058b0:	e011      	b.n	80058d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b2:	f7fe fb99 	bl	8003fe8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d803      	bhi.n	80058ca <HAL_SPI_Transmit+0x168>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d102      	bne.n	80058d0 <HAL_SPI_Transmit+0x16e>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058d4:	e074      	b.n	80059c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ce      	bne.n	800587e <HAL_SPI_Transmit+0x11c>
 80058e0:	e04c      	b.n	800597c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_Transmit+0x18e>
 80058ea:	8afb      	ldrh	r3, [r7, #22]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d140      	bne.n	8005972 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005916:	e02c      	b.n	8005972 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d113      	bne.n	800594e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800594c:	e011      	b.n	8005972 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594e:	f7fe fb4b 	bl	8003fe8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_Transmit+0x204>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_Transmit+0x20a>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005970:	e026      	b.n	80059c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1cd      	bne.n	8005918 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fbcb 	bl	800611c <SPI_EndRxTxTransaction>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e000      	b.n	80059c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80059be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80059d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b088      	sub	sp, #32
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f6:	d112      	bne.n	8005a1e <HAL_SPI_Receive+0x44>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10e      	bne.n	8005a1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f8f1 	bl	8005bfc <HAL_SPI_TransmitReceive>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	e0ea      	b.n	8005bf4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_SPI_Receive+0x52>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0e3      	b.n	8005bf4 <HAL_SPI_Receive+0x21a>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a34:	f7fe fad8 	bl	8003fe8 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a4a:	e0ca      	b.n	8005be2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_SPI_Receive+0x7e>
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a5c:	e0c1      	b.n	8005be2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2204      	movs	r2, #4
 8005a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa4:	d10f      	bne.n	8005ac6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	d007      	beq.n	8005ae4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d162      	bne.n	8005bb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005aec:	e02e      	b.n	8005b4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d115      	bne.n	8005b28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f103 020c 	add.w	r2, r3, #12
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b26:	e011      	b.n	8005b4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b28:	f7fe fa5e 	bl	8003fe8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d803      	bhi.n	8005b40 <HAL_SPI_Receive+0x166>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d102      	bne.n	8005b46 <HAL_SPI_Receive+0x16c>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b4a:	e04a      	b.n	8005be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1cb      	bne.n	8005aee <HAL_SPI_Receive+0x114>
 8005b56:	e031      	b.n	8005bbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d113      	bne.n	8005b8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	b292      	uxth	r2, r2
 8005b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	1c9a      	adds	r2, r3, #2
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b8c:	e011      	b.n	8005bb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8e:	f7fe fa2b 	bl	8003fe8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d803      	bhi.n	8005ba6 <HAL_SPI_Receive+0x1cc>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d102      	bne.n	8005bac <HAL_SPI_Receive+0x1d2>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bb0:	e017      	b.n	8005be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1cd      	bne.n	8005b58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fa45 	bl	8006050 <SPI_EndRxTransaction>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
 8005bde:	e000      	b.n	8005be2 <HAL_SPI_Receive+0x208>
  }

error :
 8005be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08c      	sub	sp, #48	@ 0x30
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x26>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e18a      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x33c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c2a:	f7fe f9dd 	bl	8003fe8 <HAL_GetTick>
 8005c2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c40:	887b      	ldrh	r3, [r7, #2]
 8005c42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d00f      	beq.n	8005c6c <HAL_SPI_TransmitReceive+0x70>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c52:	d107      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x68>
 8005c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d003      	beq.n	8005c6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c6a:	e15b      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x82>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x82>
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c84:	e14e      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d003      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2205      	movs	r2, #5
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	887a      	ldrh	r2, [r7, #2]
 8005cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d007      	beq.n	8005cee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf6:	d178      	bne.n	8005dea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x10a>
 8005d00:	8b7b      	ldrh	r3, [r7, #26]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d166      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2a:	e053      	b.n	8005dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d11b      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x176>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d016      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x176>
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d113      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d119      	bne.n	8005db4 <HAL_SPI_TransmitReceive+0x1b8>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	b292      	uxth	r2, r2
 8005d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	1c9a      	adds	r2, r3, #2
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db0:	2301      	movs	r3, #1
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005db4:	f7fe f918 	bl	8003fe8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d807      	bhi.n	8005dd4 <HAL_SPI_TransmitReceive+0x1d8>
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d003      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005dd2:	e0a7      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1a6      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x130>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1a1      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x130>
 8005de8:	e07c      	b.n	8005ee4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x1fc>
 8005df2:	8b7b      	ldrh	r3, [r7, #26]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d16b      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1e:	e057      	b.n	8005ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d11c      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x26c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d017      	beq.n	8005e68 <HAL_SPI_TransmitReceive+0x26c>
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d114      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d119      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x2ae>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d014      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eaa:	f7fe f89d 	bl	8003fe8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d803      	bhi.n	8005ec2 <HAL_SPI_TransmitReceive+0x2c6>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x2cc>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005ece:	e029      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1a2      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x224>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d19d      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f917 	bl	800611c <SPI_EndRxTxTransaction>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005f00:	e010      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	e000      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3730      	adds	r7, #48	@ 0x30
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f50:	f7fe f84a 	bl	8003fe8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f60:	f7fe f842 	bl	8003fe8 <HAL_GetTick>
 8005f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f66:	4b39      	ldr	r3, [pc, #228]	@ (800604c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	015b      	lsls	r3, r3, #5
 8005f6c:	0d1b      	lsrs	r3, r3, #20
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f76:	e054      	b.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d050      	beq.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f80:	f7fe f832 	bl	8003fe8 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d902      	bls.n	8005f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d13d      	bne.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fae:	d111      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb8:	d004      	beq.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc2:	d107      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fdc:	d10f      	bne.n	8005ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e017      	b.n	8006042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3b01      	subs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d19b      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000000 	.word	0x20000000

08006050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006064:	d111      	bne.n	800608a <SPI_EndRxTransaction+0x3a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606e:	d004      	beq.n	800607a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006078:	d107      	bne.n	800608a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006088:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006092:	d12a      	bne.n	80060ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609c:	d012      	beq.n	80060c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff ff49 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02d      	beq.n	8006110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e026      	b.n	8006112 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	2101      	movs	r1, #1
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ff36 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01a      	beq.n	8006110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e013      	b.n	8006112 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2101      	movs	r1, #1
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff23 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e000      	b.n	8006112 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006128:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <SPI_EndRxTxTransaction+0x7c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1b      	ldr	r2, [pc, #108]	@ (800619c <SPI_EndRxTxTransaction+0x80>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	0d5b      	lsrs	r3, r3, #21
 8006134:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006146:	d112      	bne.n	800616e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2200      	movs	r2, #0
 8006150:	2180      	movs	r1, #128	@ 0x80
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fef4 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e00f      	b.n	800618e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	3b01      	subs	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006184:	2b80      	cmp	r3, #128	@ 0x80
 8006186:	d0f2      	beq.n	800616e <SPI_EndRxTxTransaction+0x52>
 8006188:	e000      	b.n	800618c <SPI_EndRxTxTransaction+0x70>
        break;
 800618a:	bf00      	nop
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000000 	.word	0x20000000
 800619c:	165e9f81 	.word	0x165e9f81

080061a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e041      	b.n	8006236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fd fb9c 	bl	8003904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f000 fec8 	bl	8006f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e04e      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a23      	ldr	r2, [pc, #140]	@ (8006304 <HAL_TIM_Base_Start_IT+0xc4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d022      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006282:	d01d      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <HAL_TIM_Base_Start_IT+0xc8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d018      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1e      	ldr	r2, [pc, #120]	@ (800630c <HAL_TIM_Base_Start_IT+0xcc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <HAL_TIM_Base_Start_IT+0xd0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006314 <HAL_TIM_Base_Start_IT+0xd4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d009      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <HAL_TIM_Base_Start_IT+0xd8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x80>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a18      	ldr	r2, [pc, #96]	@ (800631c <HAL_TIM_Base_Start_IT+0xdc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d111      	bne.n	80062e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	e007      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40010400 	.word	0x40010400
 8006318:	40014000 	.word	0x40014000
 800631c:	40001800 	.word	0x40001800

08006320 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e041      	b.n	80063b6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fd fb4c 	bl	80039e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f000 fe08 	bl	8006f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e041      	b.n	8006454 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f839 	bl	800645c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f000 fdb9 	bl	8006f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_TIM_PWM_Start+0x24>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e022      	b.n	80064da <HAL_TIM_PWM_Start+0x6a>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b04      	cmp	r3, #4
 8006498:	d109      	bne.n	80064ae <HAL_TIM_PWM_Start+0x3e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e015      	b.n	80064da <HAL_TIM_PWM_Start+0x6a>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d109      	bne.n	80064c8 <HAL_TIM_PWM_Start+0x58>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	e008      	b.n	80064da <HAL_TIM_PWM_Start+0x6a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07c      	b.n	80065dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_PWM_Start+0x82>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064f0:	e013      	b.n	800651a <HAL_TIM_PWM_Start+0xaa>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_PWM_Start+0x92>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006500:	e00b      	b.n	800651a <HAL_TIM_PWM_Start+0xaa>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d104      	bne.n	8006512 <HAL_TIM_PWM_Start+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006510:	e003      	b.n	800651a <HAL_TIM_PWM_Start+0xaa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2201      	movs	r2, #1
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f810 	bl	8007548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2d      	ldr	r2, [pc, #180]	@ (80065e4 <HAL_TIM_PWM_Start+0x174>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIM_PWM_Start+0xcc>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <HAL_TIM_PWM_Start+0x178>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d101      	bne.n	8006540 <HAL_TIM_PWM_Start+0xd0>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <HAL_TIM_PWM_Start+0xd2>
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a22      	ldr	r2, [pc, #136]	@ (80065e4 <HAL_TIM_PWM_Start+0x174>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d022      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006568:	d01d      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ec <HAL_TIM_PWM_Start+0x17c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1d      	ldr	r2, [pc, #116]	@ (80065f0 <HAL_TIM_PWM_Start+0x180>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <HAL_TIM_PWM_Start+0x184>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a16      	ldr	r2, [pc, #88]	@ (80065e8 <HAL_TIM_PWM_Start+0x178>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <HAL_TIM_PWM_Start+0x188>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x136>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a16      	ldr	r2, [pc, #88]	@ (80065fc <HAL_TIM_PWM_Start+0x18c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d111      	bne.n	80065ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b06      	cmp	r3, #6
 80065b6:	d010      	beq.n	80065da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c8:	e007      	b.n	80065da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40001800 	.word	0x40001800

08006600 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 ff98 	bl	8007548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2e      	ldr	r2, [pc, #184]	@ (80066d8 <HAL_TIM_PWM_Stop+0xd8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIM_PWM_Stop+0x2c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2d      	ldr	r2, [pc, #180]	@ (80066dc <HAL_TIM_PWM_Stop+0xdc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <HAL_TIM_PWM_Stop+0x30>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <HAL_TIM_PWM_Stop+0x32>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d017      	beq.n	8006666 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10f      	bne.n	8006666 <HAL_TIM_PWM_Stop+0x66>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <HAL_TIM_PWM_Stop+0x66>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006664:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a1a      	ldr	r2, [r3, #32]
 800666c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <HAL_TIM_PWM_Stop+0x96>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006680:	4013      	ands	r3, r2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <HAL_TIM_PWM_Stop+0x96>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_PWM_Stop+0xa6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066a4:	e013      	b.n	80066ce <HAL_TIM_PWM_Stop+0xce>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d104      	bne.n	80066b6 <HAL_TIM_PWM_Stop+0xb6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066b4:	e00b      	b.n	80066ce <HAL_TIM_PWM_Stop+0xce>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d104      	bne.n	80066c6 <HAL_TIM_PWM_Stop+0xc6>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066c4:	e003      	b.n	80066ce <HAL_TIM_PWM_Stop+0xce>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400

080066e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e097      	b.n	8006824 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fd f9b3 	bl	8003a74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006724:	f023 0307 	bic.w	r3, r3, #7
 8006728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f000 fc1d 	bl	8006f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	4313      	orrs	r3, r2
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006780:	f023 030c 	bic.w	r3, r3, #12
 8006784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800678c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	4313      	orrs	r3, r2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	011a      	lsls	r2, r3, #4
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	031b      	lsls	r3, r3, #12
 80067b0:	4313      	orrs	r3, r2
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	4313      	orrs	r3, r2
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800683c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800684c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d110      	bne.n	800687e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d102      	bne.n	8006868 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006862:	7b7b      	ldrb	r3, [r7, #13]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e069      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800687c:	e031      	b.n	80068e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b04      	cmp	r3, #4
 8006882:	d110      	bne.n	80068a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d102      	bne.n	8006890 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800688a:	7b3b      	ldrb	r3, [r7, #12]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e055      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a4:	e01d      	b.n	80068e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d108      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d102      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068b8:	7b3b      	ldrb	r3, [r7, #12]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e03e      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_TIM_Encoder_Start+0xc4>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d008      	beq.n	8006900 <HAL_TIM_Encoder_Start+0xd4>
 80068ee:	e00f      	b.n	8006910 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fe25 	bl	8007548 <TIM_CCxChannelCmd>
      break;
 80068fe:	e016      	b.n	800692e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	2104      	movs	r1, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fe1d 	bl	8007548 <TIM_CCxChannelCmd>
      break;
 800690e:	e00e      	b.n	800692e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe15 	bl	8007548 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	2104      	movs	r1, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fe0e 	bl	8007548 <TIM_CCxChannelCmd>
      break;
 800692c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d122      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d11b      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0202 	mvn.w	r2, #2
 8006974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fad3 	bl	8006f36 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fac5 	bl	8006f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fad6 	bl	8006f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0204 	mvn.w	r2, #4
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 faa9 	bl	8006f36 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa9b 	bl	8006f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 faac 	bl	8006f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0208 	mvn.w	r2, #8
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa7f 	bl	8006f36 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa71 	bl	8006f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa82 	bl	8006f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0210 	mvn.w	r2, #16
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2208      	movs	r2, #8
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa55 	bl	8006f36 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa47 	bl	8006f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa58 	bl	8006f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d10e      	bne.n	8006acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d107      	bne.n	8006acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0201 	mvn.w	r2, #1
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fb fa0a 	bl	8001ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d10e      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	2b80      	cmp	r3, #128	@ 0x80
 8006ae6:	d107      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fe26 	bl	8007744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d10e      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b10:	2b40      	cmp	r3, #64	@ 0x40
 8006b12:	d107      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa1d 	bl	8006f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d10e      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d107      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0220 	mvn.w	r2, #32
 8006b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fdf0 	bl	8007730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e048      	b.n	8006c08 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	d839      	bhi.n	8006bf8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006b84:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bc1 	.word	0x08006bc1
 8006b90:	08006bf9 	.word	0x08006bf9
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006bf9 	.word	0x08006bf9
 8006b9c:	08006bcf 	.word	0x08006bcf
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006bf9 	.word	0x08006bf9
 8006bac:	08006bdd 	.word	0x08006bdd
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006beb 	.word	0x08006beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fa74 	bl	80070b4 <TIM_OC1_SetConfig>
      break;
 8006bcc:	e017      	b.n	8006bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fadd 	bl	8007194 <TIM_OC2_SetConfig>
      break;
 8006bda:	e010      	b.n	8006bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fb4c 	bl	8007280 <TIM_OC3_SetConfig>
      break;
 8006be8:	e009      	b.n	8006bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fbb9 	bl	8007368 <TIM_OC4_SetConfig>
      break;
 8006bf6:	e002      	b.n	8006bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e0ae      	b.n	8006d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	f200 809f 	bhi.w	8006d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006d7d 	.word	0x08006d7d
 8006c4c:	08006d7d 	.word	0x08006d7d
 8006c50:	08006d7d 	.word	0x08006d7d
 8006c54:	08006cb9 	.word	0x08006cb9
 8006c58:	08006d7d 	.word	0x08006d7d
 8006c5c:	08006d7d 	.word	0x08006d7d
 8006c60:	08006d7d 	.word	0x08006d7d
 8006c64:	08006cfb 	.word	0x08006cfb
 8006c68:	08006d7d 	.word	0x08006d7d
 8006c6c:	08006d7d 	.word	0x08006d7d
 8006c70:	08006d7d 	.word	0x08006d7d
 8006c74:	08006d3b 	.word	0x08006d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fa18 	bl	80070b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0204 	bic.w	r2, r2, #4
 8006ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	619a      	str	r2, [r3, #24]
      break;
 8006cb6:	e064      	b.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fa68 	bl	8007194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6999      	ldr	r1, [r3, #24]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]
      break;
 8006cf8:	e043      	b.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fabd 	bl	8007280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0208 	orr.w	r2, r2, #8
 8006d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0204 	bic.w	r2, r2, #4
 8006d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69d9      	ldr	r1, [r3, #28]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	61da      	str	r2, [r3, #28]
      break;
 8006d38:	e023      	b.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fb11 	bl	8007368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69da      	ldr	r2, [r3, #28]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69d9      	ldr	r1, [r3, #28]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	021a      	lsls	r2, r3, #8
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	61da      	str	r2, [r3, #28]
      break;
 8006d7a:	e002      	b.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e0b4      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x186>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de8:	d03e      	beq.n	8006e68 <HAL_TIM_ConfigClockSource+0xd4>
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dee:	f200 8087 	bhi.w	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df6:	f000 8086 	beq.w	8006f06 <HAL_TIM_ConfigClockSource+0x172>
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfe:	d87f      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b70      	cmp	r3, #112	@ 0x70
 8006e02:	d01a      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0xa6>
 8006e04:	2b70      	cmp	r3, #112	@ 0x70
 8006e06:	d87b      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e08:	2b60      	cmp	r3, #96	@ 0x60
 8006e0a:	d050      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x11a>
 8006e0c:	2b60      	cmp	r3, #96	@ 0x60
 8006e0e:	d877      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e10:	2b50      	cmp	r3, #80	@ 0x50
 8006e12:	d03c      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0xfa>
 8006e14:	2b50      	cmp	r3, #80	@ 0x50
 8006e16:	d873      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	2b40      	cmp	r3, #64	@ 0x40
 8006e1a:	d058      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x13a>
 8006e1c:	2b40      	cmp	r3, #64	@ 0x40
 8006e1e:	d86f      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e20:	2b30      	cmp	r3, #48	@ 0x30
 8006e22:	d064      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x15a>
 8006e24:	2b30      	cmp	r3, #48	@ 0x30
 8006e26:	d86b      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d060      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x15a>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d867      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d05c      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x15a>
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d05a      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x15a>
 8006e38:	e062      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6899      	ldr	r1, [r3, #8]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f000 fb5d 	bl	8007508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	609a      	str	r2, [r3, #8]
      break;
 8006e66:	e04f      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6899      	ldr	r1, [r3, #8]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f000 fb46 	bl	8007508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e8a:	609a      	str	r2, [r3, #8]
      break;
 8006e8c:	e03c      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f000 faba 	bl	8007414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2150      	movs	r1, #80	@ 0x50
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fb13 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006eac:	e02c      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f000 fad9 	bl	8007472 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2160      	movs	r1, #96	@ 0x60
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fb03 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006ecc:	e01c      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 fa9a 	bl	8007414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2140      	movs	r1, #64	@ 0x40
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 faf3 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006eec:	e00c      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f000 faea 	bl	80074d2 <TIM_ITRx_SetConfig>
      break;
 8006efe:	e003      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
      break;
 8006f04:	e000      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a40      	ldr	r2, [pc, #256]	@ (8007088 <TIM_Base_SetConfig+0x114>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f92:	d00f      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3d      	ldr	r2, [pc, #244]	@ (800708c <TIM_Base_SetConfig+0x118>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8007090 <TIM_Base_SetConfig+0x11c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8007094 <TIM_Base_SetConfig+0x120>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a3a      	ldr	r2, [pc, #232]	@ (8007098 <TIM_Base_SetConfig+0x124>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8007088 <TIM_Base_SetConfig+0x114>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d02b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd4:	d027      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800708c <TIM_Base_SetConfig+0x118>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d023      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8007090 <TIM_Base_SetConfig+0x11c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01f      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8007094 <TIM_Base_SetConfig+0x120>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a29      	ldr	r2, [pc, #164]	@ (8007098 <TIM_Base_SetConfig+0x124>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d017      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a28      	ldr	r2, [pc, #160]	@ (800709c <TIM_Base_SetConfig+0x128>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a27      	ldr	r2, [pc, #156]	@ (80070a0 <TIM_Base_SetConfig+0x12c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00f      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a26      	ldr	r2, [pc, #152]	@ (80070a4 <TIM_Base_SetConfig+0x130>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a25      	ldr	r2, [pc, #148]	@ (80070a8 <TIM_Base_SetConfig+0x134>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a24      	ldr	r2, [pc, #144]	@ (80070ac <TIM_Base_SetConfig+0x138>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a23      	ldr	r2, [pc, #140]	@ (80070b0 <TIM_Base_SetConfig+0x13c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d108      	bne.n	8007038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <TIM_Base_SetConfig+0x114>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_Base_SetConfig+0xf8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a0c      	ldr	r2, [pc, #48]	@ (8007098 <TIM_Base_SetConfig+0x124>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d103      	bne.n	8007074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	615a      	str	r2, [r3, #20]
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40010000 	.word	0x40010000
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	40001800 	.word	0x40001800
 80070ac:	40001c00 	.word	0x40001c00
 80070b0:	40002000 	.word	0x40002000

080070b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f023 0201 	bic.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 0302 	bic.w	r3, r3, #2
 80070fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a20      	ldr	r2, [pc, #128]	@ (800718c <TIM_OC1_SetConfig+0xd8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_OC1_SetConfig+0x64>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <TIM_OC1_SetConfig+0xdc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d10c      	bne.n	8007132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0308 	bic.w	r3, r3, #8
 800711e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 0304 	bic.w	r3, r3, #4
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a15      	ldr	r2, [pc, #84]	@ (800718c <TIM_OC1_SetConfig+0xd8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC1_SetConfig+0x8e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a14      	ldr	r2, [pc, #80]	@ (8007190 <TIM_OC1_SetConfig+0xdc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d111      	bne.n	8007166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	621a      	str	r2, [r3, #32]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400

08007194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0210 	bic.w	r2, r3, #16
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0320 	bic.w	r3, r3, #32
 80071de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <TIM_OC2_SetConfig+0xe4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC2_SetConfig+0x68>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a21      	ldr	r2, [pc, #132]	@ (800727c <TIM_OC2_SetConfig+0xe8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10d      	bne.n	8007218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a17      	ldr	r2, [pc, #92]	@ (8007278 <TIM_OC2_SetConfig+0xe4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_OC2_SetConfig+0x94>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a16      	ldr	r2, [pc, #88]	@ (800727c <TIM_OC2_SetConfig+0xe8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d113      	bne.n	8007250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800722e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	621a      	str	r2, [r3, #32]
}
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400

08007280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <TIM_OC3_SetConfig+0xe0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0x66>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <TIM_OC3_SetConfig+0xe4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d10d      	bne.n	8007302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a16      	ldr	r2, [pc, #88]	@ (8007360 <TIM_OC3_SetConfig+0xe0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_OC3_SetConfig+0x92>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a15      	ldr	r2, [pc, #84]	@ (8007364 <TIM_OC3_SetConfig+0xe4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d113      	bne.n	800733a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400

08007368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800739e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	031b      	lsls	r3, r3, #12
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a12      	ldr	r2, [pc, #72]	@ (800740c <TIM_OC4_SetConfig+0xa4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC4_SetConfig+0x68>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a11      	ldr	r2, [pc, #68]	@ (8007410 <TIM_OC4_SetConfig+0xa8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d109      	bne.n	80073e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	019b      	lsls	r3, r3, #6
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800743e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 030a 	bic.w	r3, r3, #10
 8007450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007472:	b480      	push	{r7}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0210 	bic.w	r2, r3, #16
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800749c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f043 0307 	orr.w	r3, r3, #7
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	609a      	str	r2, [r3, #8]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	021a      	lsls	r2, r3, #8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	431a      	orrs	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4313      	orrs	r3, r2
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2201      	movs	r2, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	43db      	mvns	r3, r3
 800756a:	401a      	ands	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	fa01 f303 	lsl.w	r3, r1, r3
 8007580:	431a      	orrs	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	621a      	str	r2, [r3, #32]
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e05a      	b.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a21      	ldr	r2, [pc, #132]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d022      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f8:	d01d      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1d      	ldr	r2, [pc, #116]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d018      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1b      	ldr	r2, [pc, #108]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d013      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1a      	ldr	r2, [pc, #104]	@ (800767c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00e      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a18      	ldr	r2, [pc, #96]	@ (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d009      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a17      	ldr	r2, [pc, #92]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d004      	beq.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d10c      	bne.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4313      	orrs	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40010000 	.word	0x40010000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	40010400 	.word	0x40010400
 8007684:	40014000 	.word	0x40014000
 8007688:	40001800 	.word	0x40001800

0800768c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e03d      	b.n	8007724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e03f      	b.n	80077ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fc fa3e 	bl	8003c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2224      	movs	r2, #36	@ 0x24
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800779a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f929 	bl	80079f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08a      	sub	sp, #40	@ 0x28
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b20      	cmp	r3, #32
 8007810:	d17c      	bne.n	800790c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_Transmit+0x2c>
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e075      	b.n	800790e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UART_Transmit+0x3e>
 800782c:	2302      	movs	r3, #2
 800782e:	e06e      	b.n	800790e <HAL_UART_Transmit+0x11c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2221      	movs	r2, #33	@ 0x21
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007846:	f7fc fbcf 	bl	8003fe8 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007860:	d108      	bne.n	8007874 <HAL_UART_Transmit+0x82>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	e003      	b.n	800787c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007884:	e02a      	b.n	80078dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2180      	movs	r1, #128	@ 0x80
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f840 	bl	8007916 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e036      	b.n	800790e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	3302      	adds	r3, #2
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e007      	b.n	80078ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1cf      	bne.n	8007886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2140      	movs	r1, #64	@ 0x40
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f810 	bl	8007916 <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e006      	b.n	800790e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b090      	sub	sp, #64	@ 0x40
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	4613      	mov	r3, r2
 8007924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007926:	e050      	b.n	80079ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d04c      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007932:	2b00      	cmp	r3, #0
 8007934:	d007      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0x30>
 8007936:	f7fc fb57 	bl	8003fe8 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007942:	429a      	cmp	r2, r3
 8007944:	d241      	bcs.n	80079ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800795c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	330c      	adds	r3, #12
 8007964:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007966:	637a      	str	r2, [r7, #52]	@ 0x34
 8007968:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800796c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3314      	adds	r3, #20
 8007980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	613b      	str	r3, [r7, #16]
   return(result);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3314      	adds	r3, #20
 8007998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800799a:	623a      	str	r2, [r7, #32]
 800799c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	69f9      	ldr	r1, [r7, #28]
 80079a0:	6a3a      	ldr	r2, [r7, #32]
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e5      	bne.n	800797a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e00f      	b.n	80079ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d09f      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3740      	adds	r7, #64	@ 0x40
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f8:	b0c0      	sub	sp, #256	@ 0x100
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	68d9      	ldr	r1, [r3, #12]
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	ea40 0301 	orr.w	r3, r0, r1
 8007a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a4c:	f021 010c 	bic.w	r1, r1, #12
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6e:	6999      	ldr	r1, [r3, #24]
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	ea40 0301 	orr.w	r3, r0, r1
 8007a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b8f      	ldr	r3, [pc, #572]	@ (8007cc0 <UART_SetConfig+0x2cc>)
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d005      	beq.n	8007a94 <UART_SetConfig+0xa0>
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007cc4 <UART_SetConfig+0x2d0>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d104      	bne.n	8007a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a94:	f7fd fdc8 	bl	8005628 <HAL_RCC_GetPCLK2Freq>
 8007a98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a9c:	e003      	b.n	8007aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a9e:	f7fd fdaf 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 8007aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab0:	f040 810c 	bne.w	8007ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007abe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	1891      	adds	r1, r2, r2
 8007acc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ace:	415b      	adcs	r3, r3
 8007ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	eb12 0801 	adds.w	r8, r2, r1
 8007adc:	4629      	mov	r1, r5
 8007ade:	eb43 0901 	adc.w	r9, r3, r1
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007af6:	4690      	mov	r8, r2
 8007af8:	4699      	mov	r9, r3
 8007afa:	4623      	mov	r3, r4
 8007afc:	eb18 0303 	adds.w	r3, r8, r3
 8007b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b04:	462b      	mov	r3, r5
 8007b06:	eb49 0303 	adc.w	r3, r9, r3
 8007b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b22:	460b      	mov	r3, r1
 8007b24:	18db      	adds	r3, r3, r3
 8007b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b28:	4613      	mov	r3, r2
 8007b2a:	eb42 0303 	adc.w	r3, r2, r3
 8007b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b38:	f7f9 f8a6 	bl	8000c88 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b61      	ldr	r3, [pc, #388]	@ (8007cc8 <UART_SetConfig+0x2d4>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	011c      	lsls	r4, r3, #4
 8007b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b64:	415b      	adcs	r3, r3
 8007b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b72:	4649      	mov	r1, r9
 8007b74:	eb43 0b01 	adc.w	fp, r3, r1
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b8c:	4692      	mov	sl, r2
 8007b8e:	469b      	mov	fp, r3
 8007b90:	4643      	mov	r3, r8
 8007b92:	eb1a 0303 	adds.w	r3, sl, r3
 8007b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8007ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	18db      	adds	r3, r3, r3
 8007bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	eb42 0303 	adc.w	r3, r2, r3
 8007bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007bce:	f7f9 f85b 	bl	8000c88 <__aeabi_uldivmod>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc8 <UART_SetConfig+0x2d4>)
 8007bda:	fba3 2301 	umull	r2, r3, r3, r1
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	2264      	movs	r2, #100	@ 0x64
 8007be2:	fb02 f303 	mul.w	r3, r2, r3
 8007be6:	1acb      	subs	r3, r1, r3
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bee:	4b36      	ldr	r3, [pc, #216]	@ (8007cc8 <UART_SetConfig+0x2d4>)
 8007bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007bfc:	441c      	add	r4, r3
 8007bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c20:	4641      	mov	r1, r8
 8007c22:	1851      	adds	r1, r2, r1
 8007c24:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c26:	4649      	mov	r1, r9
 8007c28:	414b      	adcs	r3, r1
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c38:	4659      	mov	r1, fp
 8007c3a:	00cb      	lsls	r3, r1, #3
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c42:	4651      	mov	r1, sl
 8007c44:	00ca      	lsls	r2, r1, #3
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c54:	464b      	mov	r3, r9
 8007c56:	460a      	mov	r2, r1
 8007c58:	eb42 0303 	adc.w	r3, r2, r3
 8007c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c74:	460b      	mov	r3, r1
 8007c76:	18db      	adds	r3, r3, r3
 8007c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	eb42 0303 	adc.w	r3, r2, r3
 8007c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c8a:	f7f8 fffd 	bl	8000c88 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <UART_SetConfig+0x2d4>)
 8007c94:	fba3 1302 	umull	r1, r3, r3, r2
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	2164      	movs	r1, #100	@ 0x64
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	3332      	adds	r3, #50	@ 0x32
 8007ca6:	4a08      	ldr	r2, [pc, #32]	@ (8007cc8 <UART_SetConfig+0x2d4>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	f003 0207 	and.w	r2, r3, #7
 8007cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4422      	add	r2, r4
 8007cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cbc:	e106      	b.n	8007ecc <UART_SetConfig+0x4d8>
 8007cbe:	bf00      	nop
 8007cc0:	40011000 	.word	0x40011000
 8007cc4:	40011400 	.word	0x40011400
 8007cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007cde:	4642      	mov	r2, r8
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	1891      	adds	r1, r2, r2
 8007ce4:	6239      	str	r1, [r7, #32]
 8007ce6:	415b      	adcs	r3, r3
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cee:	4641      	mov	r1, r8
 8007cf0:	1854      	adds	r4, r2, r1
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	eb43 0501 	adc.w	r5, r3, r1
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	00eb      	lsls	r3, r5, #3
 8007d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d06:	00e2      	lsls	r2, r4, #3
 8007d08:	4614      	mov	r4, r2
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	18e3      	adds	r3, r4, r3
 8007d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d14:	464b      	mov	r3, r9
 8007d16:	eb45 0303 	adc.w	r3, r5, r3
 8007d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	008b      	lsls	r3, r1, #2
 8007d3e:	4621      	mov	r1, r4
 8007d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d44:	4621      	mov	r1, r4
 8007d46:	008a      	lsls	r2, r1, #2
 8007d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d4c:	f7f8 ff9c 	bl	8000c88 <__aeabi_uldivmod>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4b60      	ldr	r3, [pc, #384]	@ (8007ed8 <UART_SetConfig+0x4e4>)
 8007d56:	fba3 2302 	umull	r2, r3, r3, r2
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	011c      	lsls	r4, r3, #4
 8007d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	1891      	adds	r1, r2, r2
 8007d76:	61b9      	str	r1, [r7, #24]
 8007d78:	415b      	adcs	r3, r3
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d80:	4641      	mov	r1, r8
 8007d82:	1851      	adds	r1, r2, r1
 8007d84:	6139      	str	r1, [r7, #16]
 8007d86:	4649      	mov	r1, r9
 8007d88:	414b      	adcs	r3, r1
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d98:	4659      	mov	r1, fp
 8007d9a:	00cb      	lsls	r3, r1, #3
 8007d9c:	4651      	mov	r1, sl
 8007d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007da2:	4651      	mov	r1, sl
 8007da4:	00ca      	lsls	r2, r1, #3
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	4642      	mov	r2, r8
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007db4:	464b      	mov	r3, r9
 8007db6:	460a      	mov	r2, r1
 8007db8:	eb42 0303 	adc.w	r3, r2, r3
 8007dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007dd8:	4649      	mov	r1, r9
 8007dda:	008b      	lsls	r3, r1, #2
 8007ddc:	4641      	mov	r1, r8
 8007dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007de2:	4641      	mov	r1, r8
 8007de4:	008a      	lsls	r2, r1, #2
 8007de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007dea:	f7f8 ff4d 	bl	8000c88 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	4b38      	ldr	r3, [pc, #224]	@ (8007ed8 <UART_SetConfig+0x4e4>)
 8007df6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2264      	movs	r2, #100	@ 0x64
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	1acb      	subs	r3, r1, r3
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	3332      	adds	r3, #50	@ 0x32
 8007e08:	4a33      	ldr	r2, [pc, #204]	@ (8007ed8 <UART_SetConfig+0x4e4>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e14:	441c      	add	r4, r3
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	1891      	adds	r1, r2, r2
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	415b      	adcs	r3, r3
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e34:	4641      	mov	r1, r8
 8007e36:	1851      	adds	r1, r2, r1
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	414b      	adcs	r3, r1
 8007e3e:	607b      	str	r3, [r7, #4]
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	00cb      	lsls	r3, r1, #3
 8007e50:	4651      	mov	r1, sl
 8007e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e56:	4651      	mov	r1, sl
 8007e58:	00ca      	lsls	r2, r1, #3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4642      	mov	r2, r8
 8007e62:	189b      	adds	r3, r3, r2
 8007e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e66:	464b      	mov	r3, r9
 8007e68:	460a      	mov	r2, r1
 8007e6a:	eb42 0303 	adc.w	r3, r2, r3
 8007e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e88:	4649      	mov	r1, r9
 8007e8a:	008b      	lsls	r3, r1, #2
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e92:	4641      	mov	r1, r8
 8007e94:	008a      	lsls	r2, r1, #2
 8007e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e9a:	f7f8 fef5 	bl	8000c88 <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <UART_SetConfig+0x4e4>)
 8007ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	2164      	movs	r1, #100	@ 0x64
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	3332      	adds	r3, #50	@ 0x32
 8007eb6:	4a08      	ldr	r2, [pc, #32]	@ (8007ed8 <UART_SetConfig+0x4e4>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f003 020f 	and.w	r2, r3, #15
 8007ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4422      	add	r2, r4
 8007eca:	609a      	str	r2, [r3, #8]
}
 8007ecc:	bf00      	nop
 8007ece:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ed8:	51eb851f 	.word	0x51eb851f

08007edc <__cvt>:
 8007edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	ec57 6b10 	vmov	r6, r7, d0
 8007ee4:	2f00      	cmp	r7, #0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4619      	mov	r1, r3
 8007eea:	463b      	mov	r3, r7
 8007eec:	bfbb      	ittet	lt
 8007eee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ef2:	461f      	movlt	r7, r3
 8007ef4:	2300      	movge	r3, #0
 8007ef6:	232d      	movlt	r3, #45	@ 0x2d
 8007ef8:	700b      	strb	r3, [r1, #0]
 8007efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007efc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f00:	4691      	mov	r9, r2
 8007f02:	f023 0820 	bic.w	r8, r3, #32
 8007f06:	bfbc      	itt	lt
 8007f08:	4632      	movlt	r2, r6
 8007f0a:	4616      	movlt	r6, r2
 8007f0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f10:	d005      	beq.n	8007f1e <__cvt+0x42>
 8007f12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f16:	d100      	bne.n	8007f1a <__cvt+0x3e>
 8007f18:	3401      	adds	r4, #1
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	e000      	b.n	8007f20 <__cvt+0x44>
 8007f1e:	2103      	movs	r1, #3
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	ab02      	add	r3, sp, #8
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	ec47 6b10 	vmov	d0, r6, r7
 8007f2c:	4653      	mov	r3, sl
 8007f2e:	4622      	mov	r2, r4
 8007f30:	f000 ff3e 	bl	8008db0 <_dtoa_r>
 8007f34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f38:	4605      	mov	r5, r0
 8007f3a:	d119      	bne.n	8007f70 <__cvt+0x94>
 8007f3c:	f019 0f01 	tst.w	r9, #1
 8007f40:	d00e      	beq.n	8007f60 <__cvt+0x84>
 8007f42:	eb00 0904 	add.w	r9, r0, r4
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f52:	b108      	cbz	r0, 8007f58 <__cvt+0x7c>
 8007f54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f58:	2230      	movs	r2, #48	@ 0x30
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	454b      	cmp	r3, r9
 8007f5e:	d31e      	bcc.n	8007f9e <__cvt+0xc2>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f64:	1b5b      	subs	r3, r3, r5
 8007f66:	4628      	mov	r0, r5
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	b004      	add	sp, #16
 8007f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f74:	eb00 0904 	add.w	r9, r0, r4
 8007f78:	d1e5      	bne.n	8007f46 <__cvt+0x6a>
 8007f7a:	7803      	ldrb	r3, [r0, #0]
 8007f7c:	2b30      	cmp	r3, #48	@ 0x30
 8007f7e:	d10a      	bne.n	8007f96 <__cvt+0xba>
 8007f80:	2200      	movs	r2, #0
 8007f82:	2300      	movs	r3, #0
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8c:	b918      	cbnz	r0, 8007f96 <__cvt+0xba>
 8007f8e:	f1c4 0401 	rsb	r4, r4, #1
 8007f92:	f8ca 4000 	str.w	r4, [sl]
 8007f96:	f8da 3000 	ldr.w	r3, [sl]
 8007f9a:	4499      	add	r9, r3
 8007f9c:	e7d3      	b.n	8007f46 <__cvt+0x6a>
 8007f9e:	1c59      	adds	r1, r3, #1
 8007fa0:	9103      	str	r1, [sp, #12]
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e7d9      	b.n	8007f5a <__cvt+0x7e>

08007fa6 <__exponent>:
 8007fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	bfba      	itte	lt
 8007fac:	4249      	neglt	r1, r1
 8007fae:	232d      	movlt	r3, #45	@ 0x2d
 8007fb0:	232b      	movge	r3, #43	@ 0x2b
 8007fb2:	2909      	cmp	r1, #9
 8007fb4:	7002      	strb	r2, [r0, #0]
 8007fb6:	7043      	strb	r3, [r0, #1]
 8007fb8:	dd29      	ble.n	800800e <__exponent+0x68>
 8007fba:	f10d 0307 	add.w	r3, sp, #7
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	270a      	movs	r7, #10
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007fc8:	fb07 1416 	mls	r4, r7, r6, r1
 8007fcc:	3430      	adds	r4, #48	@ 0x30
 8007fce:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2c63      	cmp	r4, #99	@ 0x63
 8007fd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fda:	4631      	mov	r1, r6
 8007fdc:	dcf1      	bgt.n	8007fc2 <__exponent+0x1c>
 8007fde:	3130      	adds	r1, #48	@ 0x30
 8007fe0:	1e94      	subs	r4, r2, #2
 8007fe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007fe6:	1c41      	adds	r1, r0, #1
 8007fe8:	4623      	mov	r3, r4
 8007fea:	42ab      	cmp	r3, r5
 8007fec:	d30a      	bcc.n	8008004 <__exponent+0x5e>
 8007fee:	f10d 0309 	add.w	r3, sp, #9
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	42ac      	cmp	r4, r5
 8007ff6:	bf88      	it	hi
 8007ff8:	2300      	movhi	r3, #0
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	4403      	add	r3, r0
 8007ffe:	1a18      	subs	r0, r3, r0
 8008000:	b003      	add	sp, #12
 8008002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008004:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008008:	f801 6f01 	strb.w	r6, [r1, #1]!
 800800c:	e7ed      	b.n	8007fea <__exponent+0x44>
 800800e:	2330      	movs	r3, #48	@ 0x30
 8008010:	3130      	adds	r1, #48	@ 0x30
 8008012:	7083      	strb	r3, [r0, #2]
 8008014:	70c1      	strb	r1, [r0, #3]
 8008016:	1d03      	adds	r3, r0, #4
 8008018:	e7f1      	b.n	8007ffe <__exponent+0x58>
	...

0800801c <_printf_float>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	b08d      	sub	sp, #52	@ 0x34
 8008022:	460c      	mov	r4, r1
 8008024:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008028:	4616      	mov	r6, r2
 800802a:	461f      	mov	r7, r3
 800802c:	4605      	mov	r5, r0
 800802e:	f000 fdbd 	bl	8008bac <_localeconv_r>
 8008032:	6803      	ldr	r3, [r0, #0]
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	4618      	mov	r0, r3
 8008038:	f7f8 f91a 	bl	8000270 <strlen>
 800803c:	2300      	movs	r3, #0
 800803e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008040:	f8d8 3000 	ldr.w	r3, [r8]
 8008044:	9005      	str	r0, [sp, #20]
 8008046:	3307      	adds	r3, #7
 8008048:	f023 0307 	bic.w	r3, r3, #7
 800804c:	f103 0208 	add.w	r2, r3, #8
 8008050:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008054:	f8d4 b000 	ldr.w	fp, [r4]
 8008058:	f8c8 2000 	str.w	r2, [r8]
 800805c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008060:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	f8cd 8018 	str.w	r8, [sp, #24]
 800806a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800806e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008072:	4b9c      	ldr	r3, [pc, #624]	@ (80082e4 <_printf_float+0x2c8>)
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	f7f8 fd58 	bl	8000b2c <__aeabi_dcmpun>
 800807c:	bb70      	cbnz	r0, 80080dc <_printf_float+0xc0>
 800807e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008082:	4b98      	ldr	r3, [pc, #608]	@ (80082e4 <_printf_float+0x2c8>)
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	f7f8 fd32 	bl	8000af0 <__aeabi_dcmple>
 800808c:	bb30      	cbnz	r0, 80080dc <_printf_float+0xc0>
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f7f8 fd21 	bl	8000adc <__aeabi_dcmplt>
 800809a:	b110      	cbz	r0, 80080a2 <_printf_float+0x86>
 800809c:	232d      	movs	r3, #45	@ 0x2d
 800809e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a2:	4a91      	ldr	r2, [pc, #580]	@ (80082e8 <_printf_float+0x2cc>)
 80080a4:	4b91      	ldr	r3, [pc, #580]	@ (80082ec <_printf_float+0x2d0>)
 80080a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80080aa:	bf8c      	ite	hi
 80080ac:	4690      	movhi	r8, r2
 80080ae:	4698      	movls	r8, r3
 80080b0:	2303      	movs	r3, #3
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	f02b 0304 	bic.w	r3, fp, #4
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	9700      	str	r7, [sp, #0]
 80080c0:	4633      	mov	r3, r6
 80080c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f9d2 	bl	8008470 <_printf_common>
 80080cc:	3001      	adds	r0, #1
 80080ce:	f040 808d 	bne.w	80081ec <_printf_float+0x1d0>
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	b00d      	add	sp, #52	@ 0x34
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	4642      	mov	r2, r8
 80080de:	464b      	mov	r3, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 fd22 	bl	8000b2c <__aeabi_dcmpun>
 80080e8:	b140      	cbz	r0, 80080fc <_printf_float+0xe0>
 80080ea:	464b      	mov	r3, r9
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfbc      	itt	lt
 80080f0:	232d      	movlt	r3, #45	@ 0x2d
 80080f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080f6:	4a7e      	ldr	r2, [pc, #504]	@ (80082f0 <_printf_float+0x2d4>)
 80080f8:	4b7e      	ldr	r3, [pc, #504]	@ (80082f4 <_printf_float+0x2d8>)
 80080fa:	e7d4      	b.n	80080a6 <_printf_float+0x8a>
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008102:	9206      	str	r2, [sp, #24]
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	d13b      	bne.n	8008180 <_printf_float+0x164>
 8008108:	2306      	movs	r3, #6
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008110:	2300      	movs	r3, #0
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	ab0a      	add	r3, sp, #40	@ 0x28
 8008118:	e9cd a301 	strd	sl, r3, [sp, #4]
 800811c:	ab09      	add	r3, sp, #36	@ 0x24
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	6861      	ldr	r1, [r4, #4]
 8008122:	ec49 8b10 	vmov	d0, r8, r9
 8008126:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800812a:	4628      	mov	r0, r5
 800812c:	f7ff fed6 	bl	8007edc <__cvt>
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008134:	2b47      	cmp	r3, #71	@ 0x47
 8008136:	4680      	mov	r8, r0
 8008138:	d129      	bne.n	800818e <_printf_float+0x172>
 800813a:	1cc8      	adds	r0, r1, #3
 800813c:	db02      	blt.n	8008144 <_printf_float+0x128>
 800813e:	6863      	ldr	r3, [r4, #4]
 8008140:	4299      	cmp	r1, r3
 8008142:	dd41      	ble.n	80081c8 <_printf_float+0x1ac>
 8008144:	f1aa 0a02 	sub.w	sl, sl, #2
 8008148:	fa5f fa8a 	uxtb.w	sl, sl
 800814c:	3901      	subs	r1, #1
 800814e:	4652      	mov	r2, sl
 8008150:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008154:	9109      	str	r1, [sp, #36]	@ 0x24
 8008156:	f7ff ff26 	bl	8007fa6 <__exponent>
 800815a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800815c:	1813      	adds	r3, r2, r0
 800815e:	2a01      	cmp	r2, #1
 8008160:	4681      	mov	r9, r0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	dc02      	bgt.n	800816c <_printf_float+0x150>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	07d2      	lsls	r2, r2, #31
 800816a:	d501      	bpl.n	8008170 <_printf_float+0x154>
 800816c:	3301      	adds	r3, #1
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0a2      	beq.n	80080be <_printf_float+0xa2>
 8008178:	232d      	movs	r3, #45	@ 0x2d
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800817e:	e79e      	b.n	80080be <_printf_float+0xa2>
 8008180:	9a06      	ldr	r2, [sp, #24]
 8008182:	2a47      	cmp	r2, #71	@ 0x47
 8008184:	d1c2      	bne.n	800810c <_printf_float+0xf0>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1c0      	bne.n	800810c <_printf_float+0xf0>
 800818a:	2301      	movs	r3, #1
 800818c:	e7bd      	b.n	800810a <_printf_float+0xee>
 800818e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008192:	d9db      	bls.n	800814c <_printf_float+0x130>
 8008194:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008198:	d118      	bne.n	80081cc <_printf_float+0x1b0>
 800819a:	2900      	cmp	r1, #0
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	dd0b      	ble.n	80081b8 <_printf_float+0x19c>
 80081a0:	6121      	str	r1, [r4, #16]
 80081a2:	b913      	cbnz	r3, 80081aa <_printf_float+0x18e>
 80081a4:	6822      	ldr	r2, [r4, #0]
 80081a6:	07d0      	lsls	r0, r2, #31
 80081a8:	d502      	bpl.n	80081b0 <_printf_float+0x194>
 80081aa:	3301      	adds	r3, #1
 80081ac:	440b      	add	r3, r1
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80081b2:	f04f 0900 	mov.w	r9, #0
 80081b6:	e7db      	b.n	8008170 <_printf_float+0x154>
 80081b8:	b913      	cbnz	r3, 80081c0 <_printf_float+0x1a4>
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	07d2      	lsls	r2, r2, #31
 80081be:	d501      	bpl.n	80081c4 <_printf_float+0x1a8>
 80081c0:	3302      	adds	r3, #2
 80081c2:	e7f4      	b.n	80081ae <_printf_float+0x192>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e7f2      	b.n	80081ae <_printf_float+0x192>
 80081c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80081cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ce:	4299      	cmp	r1, r3
 80081d0:	db05      	blt.n	80081de <_printf_float+0x1c2>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	6121      	str	r1, [r4, #16]
 80081d6:	07d8      	lsls	r0, r3, #31
 80081d8:	d5ea      	bpl.n	80081b0 <_printf_float+0x194>
 80081da:	1c4b      	adds	r3, r1, #1
 80081dc:	e7e7      	b.n	80081ae <_printf_float+0x192>
 80081de:	2900      	cmp	r1, #0
 80081e0:	bfd4      	ite	le
 80081e2:	f1c1 0202 	rsble	r2, r1, #2
 80081e6:	2201      	movgt	r2, #1
 80081e8:	4413      	add	r3, r2
 80081ea:	e7e0      	b.n	80081ae <_printf_float+0x192>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	055a      	lsls	r2, r3, #21
 80081f0:	d407      	bmi.n	8008202 <_printf_float+0x1e6>
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	4642      	mov	r2, r8
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	d12b      	bne.n	8008258 <_printf_float+0x23c>
 8008200:	e767      	b.n	80080d2 <_printf_float+0xb6>
 8008202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008206:	f240 80dd 	bls.w	80083c4 <_printf_float+0x3a8>
 800820a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800820e:	2200      	movs	r2, #0
 8008210:	2300      	movs	r3, #0
 8008212:	f7f8 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8008216:	2800      	cmp	r0, #0
 8008218:	d033      	beq.n	8008282 <_printf_float+0x266>
 800821a:	4a37      	ldr	r2, [pc, #220]	@ (80082f8 <_printf_float+0x2dc>)
 800821c:	2301      	movs	r3, #1
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f af54 	beq.w	80080d2 <_printf_float+0xb6>
 800822a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800822e:	4543      	cmp	r3, r8
 8008230:	db02      	blt.n	8008238 <_printf_float+0x21c>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	07d8      	lsls	r0, r3, #31
 8008236:	d50f      	bpl.n	8008258 <_printf_float+0x23c>
 8008238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af45 	beq.w	80080d2 <_printf_float+0xb6>
 8008248:	f04f 0900 	mov.w	r9, #0
 800824c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008250:	f104 0a1a 	add.w	sl, r4, #26
 8008254:	45c8      	cmp	r8, r9
 8008256:	dc09      	bgt.n	800826c <_printf_float+0x250>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	079b      	lsls	r3, r3, #30
 800825c:	f100 8103 	bmi.w	8008466 <_printf_float+0x44a>
 8008260:	68e0      	ldr	r0, [r4, #12]
 8008262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008264:	4298      	cmp	r0, r3
 8008266:	bfb8      	it	lt
 8008268:	4618      	movlt	r0, r3
 800826a:	e734      	b.n	80080d6 <_printf_float+0xba>
 800826c:	2301      	movs	r3, #1
 800826e:	4652      	mov	r2, sl
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	f43f af2b 	beq.w	80080d2 <_printf_float+0xb6>
 800827c:	f109 0901 	add.w	r9, r9, #1
 8008280:	e7e8      	b.n	8008254 <_printf_float+0x238>
 8008282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc39      	bgt.n	80082fc <_printf_float+0x2e0>
 8008288:	4a1b      	ldr	r2, [pc, #108]	@ (80082f8 <_printf_float+0x2dc>)
 800828a:	2301      	movs	r3, #1
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f af1d 	beq.w	80080d2 <_printf_float+0xb6>
 8008298:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800829c:	ea59 0303 	orrs.w	r3, r9, r3
 80082a0:	d102      	bne.n	80082a8 <_printf_float+0x28c>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	07d9      	lsls	r1, r3, #31
 80082a6:	d5d7      	bpl.n	8008258 <_printf_float+0x23c>
 80082a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f af0d 	beq.w	80080d2 <_printf_float+0xb6>
 80082b8:	f04f 0a00 	mov.w	sl, #0
 80082bc:	f104 0b1a 	add.w	fp, r4, #26
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	425b      	negs	r3, r3
 80082c4:	4553      	cmp	r3, sl
 80082c6:	dc01      	bgt.n	80082cc <_printf_float+0x2b0>
 80082c8:	464b      	mov	r3, r9
 80082ca:	e793      	b.n	80081f4 <_printf_float+0x1d8>
 80082cc:	2301      	movs	r3, #1
 80082ce:	465a      	mov	r2, fp
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f aefb 	beq.w	80080d2 <_printf_float+0xb6>
 80082dc:	f10a 0a01 	add.w	sl, sl, #1
 80082e0:	e7ee      	b.n	80082c0 <_printf_float+0x2a4>
 80082e2:	bf00      	nop
 80082e4:	7fefffff 	.word	0x7fefffff
 80082e8:	0800a980 	.word	0x0800a980
 80082ec:	0800a97c 	.word	0x0800a97c
 80082f0:	0800a988 	.word	0x0800a988
 80082f4:	0800a984 	.word	0x0800a984
 80082f8:	0800a98c 	.word	0x0800a98c
 80082fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008302:	4553      	cmp	r3, sl
 8008304:	bfa8      	it	ge
 8008306:	4653      	movge	r3, sl
 8008308:	2b00      	cmp	r3, #0
 800830a:	4699      	mov	r9, r3
 800830c:	dc36      	bgt.n	800837c <_printf_float+0x360>
 800830e:	f04f 0b00 	mov.w	fp, #0
 8008312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008316:	f104 021a 	add.w	r2, r4, #26
 800831a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800831c:	9306      	str	r3, [sp, #24]
 800831e:	eba3 0309 	sub.w	r3, r3, r9
 8008322:	455b      	cmp	r3, fp
 8008324:	dc31      	bgt.n	800838a <_printf_float+0x36e>
 8008326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008328:	459a      	cmp	sl, r3
 800832a:	dc3a      	bgt.n	80083a2 <_printf_float+0x386>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	07da      	lsls	r2, r3, #31
 8008330:	d437      	bmi.n	80083a2 <_printf_float+0x386>
 8008332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008334:	ebaa 0903 	sub.w	r9, sl, r3
 8008338:	9b06      	ldr	r3, [sp, #24]
 800833a:	ebaa 0303 	sub.w	r3, sl, r3
 800833e:	4599      	cmp	r9, r3
 8008340:	bfa8      	it	ge
 8008342:	4699      	movge	r9, r3
 8008344:	f1b9 0f00 	cmp.w	r9, #0
 8008348:	dc33      	bgt.n	80083b2 <_printf_float+0x396>
 800834a:	f04f 0800 	mov.w	r8, #0
 800834e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008352:	f104 0b1a 	add.w	fp, r4, #26
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	ebaa 0303 	sub.w	r3, sl, r3
 800835c:	eba3 0309 	sub.w	r3, r3, r9
 8008360:	4543      	cmp	r3, r8
 8008362:	f77f af79 	ble.w	8008258 <_printf_float+0x23c>
 8008366:	2301      	movs	r3, #1
 8008368:	465a      	mov	r2, fp
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	f43f aeae 	beq.w	80080d2 <_printf_float+0xb6>
 8008376:	f108 0801 	add.w	r8, r8, #1
 800837a:	e7ec      	b.n	8008356 <_printf_float+0x33a>
 800837c:	4642      	mov	r2, r8
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	d1c2      	bne.n	800830e <_printf_float+0x2f2>
 8008388:	e6a3      	b.n	80080d2 <_printf_float+0xb6>
 800838a:	2301      	movs	r3, #1
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	9206      	str	r2, [sp, #24]
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f ae9c 	beq.w	80080d2 <_printf_float+0xb6>
 800839a:	9a06      	ldr	r2, [sp, #24]
 800839c:	f10b 0b01 	add.w	fp, fp, #1
 80083a0:	e7bb      	b.n	800831a <_printf_float+0x2fe>
 80083a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1c0      	bne.n	8008332 <_printf_float+0x316>
 80083b0:	e68f      	b.n	80080d2 <_printf_float+0xb6>
 80083b2:	9a06      	ldr	r2, [sp, #24]
 80083b4:	464b      	mov	r3, r9
 80083b6:	4442      	add	r2, r8
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	d1c3      	bne.n	800834a <_printf_float+0x32e>
 80083c2:	e686      	b.n	80080d2 <_printf_float+0xb6>
 80083c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083c8:	f1ba 0f01 	cmp.w	sl, #1
 80083cc:	dc01      	bgt.n	80083d2 <_printf_float+0x3b6>
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d536      	bpl.n	8008440 <_printf_float+0x424>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4642      	mov	r2, r8
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f ae78 	beq.w	80080d2 <_printf_float+0xb6>
 80083e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b8      	blx	r7
 80083ec:	3001      	adds	r0, #1
 80083ee:	f43f ae70 	beq.w	80080d2 <_printf_float+0xb6>
 80083f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083f6:	2200      	movs	r2, #0
 80083f8:	2300      	movs	r3, #0
 80083fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083fe:	f7f8 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008402:	b9c0      	cbnz	r0, 8008436 <_printf_float+0x41a>
 8008404:	4653      	mov	r3, sl
 8008406:	f108 0201 	add.w	r2, r8, #1
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	d10c      	bne.n	800842e <_printf_float+0x412>
 8008414:	e65d      	b.n	80080d2 <_printf_float+0xb6>
 8008416:	2301      	movs	r3, #1
 8008418:	465a      	mov	r2, fp
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f ae56 	beq.w	80080d2 <_printf_float+0xb6>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	45d0      	cmp	r8, sl
 800842c:	dbf3      	blt.n	8008416 <_printf_float+0x3fa>
 800842e:	464b      	mov	r3, r9
 8008430:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008434:	e6df      	b.n	80081f6 <_printf_float+0x1da>
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	f104 0b1a 	add.w	fp, r4, #26
 800843e:	e7f4      	b.n	800842a <_printf_float+0x40e>
 8008440:	2301      	movs	r3, #1
 8008442:	4642      	mov	r2, r8
 8008444:	e7e1      	b.n	800840a <_printf_float+0x3ee>
 8008446:	2301      	movs	r3, #1
 8008448:	464a      	mov	r2, r9
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f ae3e 	beq.w	80080d2 <_printf_float+0xb6>
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	4543      	cmp	r3, r8
 8008462:	dcf0      	bgt.n	8008446 <_printf_float+0x42a>
 8008464:	e6fc      	b.n	8008260 <_printf_float+0x244>
 8008466:	f04f 0800 	mov.w	r8, #0
 800846a:	f104 0919 	add.w	r9, r4, #25
 800846e:	e7f4      	b.n	800845a <_printf_float+0x43e>

08008470 <_printf_common>:
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	4616      	mov	r6, r2
 8008476:	4698      	mov	r8, r3
 8008478:	688a      	ldr	r2, [r1, #8]
 800847a:	690b      	ldr	r3, [r1, #16]
 800847c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008480:	4293      	cmp	r3, r2
 8008482:	bfb8      	it	lt
 8008484:	4613      	movlt	r3, r2
 8008486:	6033      	str	r3, [r6, #0]
 8008488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800848c:	4607      	mov	r7, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b10a      	cbz	r2, 8008496 <_printf_common+0x26>
 8008492:	3301      	adds	r3, #1
 8008494:	6033      	str	r3, [r6, #0]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	0699      	lsls	r1, r3, #26
 800849a:	bf42      	ittt	mi
 800849c:	6833      	ldrmi	r3, [r6, #0]
 800849e:	3302      	addmi	r3, #2
 80084a0:	6033      	strmi	r3, [r6, #0]
 80084a2:	6825      	ldr	r5, [r4, #0]
 80084a4:	f015 0506 	ands.w	r5, r5, #6
 80084a8:	d106      	bne.n	80084b8 <_printf_common+0x48>
 80084aa:	f104 0a19 	add.w	sl, r4, #25
 80084ae:	68e3      	ldr	r3, [r4, #12]
 80084b0:	6832      	ldr	r2, [r6, #0]
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	42ab      	cmp	r3, r5
 80084b6:	dc26      	bgt.n	8008506 <_printf_common+0x96>
 80084b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	3b00      	subs	r3, #0
 80084c0:	bf18      	it	ne
 80084c2:	2301      	movne	r3, #1
 80084c4:	0692      	lsls	r2, r2, #26
 80084c6:	d42b      	bmi.n	8008520 <_printf_common+0xb0>
 80084c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084cc:	4641      	mov	r1, r8
 80084ce:	4638      	mov	r0, r7
 80084d0:	47c8      	blx	r9
 80084d2:	3001      	adds	r0, #1
 80084d4:	d01e      	beq.n	8008514 <_printf_common+0xa4>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	6922      	ldr	r2, [r4, #16]
 80084da:	f003 0306 	and.w	r3, r3, #6
 80084de:	2b04      	cmp	r3, #4
 80084e0:	bf02      	ittt	eq
 80084e2:	68e5      	ldreq	r5, [r4, #12]
 80084e4:	6833      	ldreq	r3, [r6, #0]
 80084e6:	1aed      	subeq	r5, r5, r3
 80084e8:	68a3      	ldr	r3, [r4, #8]
 80084ea:	bf0c      	ite	eq
 80084ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f0:	2500      	movne	r5, #0
 80084f2:	4293      	cmp	r3, r2
 80084f4:	bfc4      	itt	gt
 80084f6:	1a9b      	subgt	r3, r3, r2
 80084f8:	18ed      	addgt	r5, r5, r3
 80084fa:	2600      	movs	r6, #0
 80084fc:	341a      	adds	r4, #26
 80084fe:	42b5      	cmp	r5, r6
 8008500:	d11a      	bne.n	8008538 <_printf_common+0xc8>
 8008502:	2000      	movs	r0, #0
 8008504:	e008      	b.n	8008518 <_printf_common+0xa8>
 8008506:	2301      	movs	r3, #1
 8008508:	4652      	mov	r2, sl
 800850a:	4641      	mov	r1, r8
 800850c:	4638      	mov	r0, r7
 800850e:	47c8      	blx	r9
 8008510:	3001      	adds	r0, #1
 8008512:	d103      	bne.n	800851c <_printf_common+0xac>
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	3501      	adds	r5, #1
 800851e:	e7c6      	b.n	80084ae <_printf_common+0x3e>
 8008520:	18e1      	adds	r1, r4, r3
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	2030      	movs	r0, #48	@ 0x30
 8008526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800852a:	4422      	add	r2, r4
 800852c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008534:	3302      	adds	r3, #2
 8008536:	e7c7      	b.n	80084c8 <_printf_common+0x58>
 8008538:	2301      	movs	r3, #1
 800853a:	4622      	mov	r2, r4
 800853c:	4641      	mov	r1, r8
 800853e:	4638      	mov	r0, r7
 8008540:	47c8      	blx	r9
 8008542:	3001      	adds	r0, #1
 8008544:	d0e6      	beq.n	8008514 <_printf_common+0xa4>
 8008546:	3601      	adds	r6, #1
 8008548:	e7d9      	b.n	80084fe <_printf_common+0x8e>
	...

0800854c <_printf_i>:
 800854c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	7e0f      	ldrb	r7, [r1, #24]
 8008552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008554:	2f78      	cmp	r7, #120	@ 0x78
 8008556:	4691      	mov	r9, r2
 8008558:	4680      	mov	r8, r0
 800855a:	460c      	mov	r4, r1
 800855c:	469a      	mov	sl, r3
 800855e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008562:	d807      	bhi.n	8008574 <_printf_i+0x28>
 8008564:	2f62      	cmp	r7, #98	@ 0x62
 8008566:	d80a      	bhi.n	800857e <_printf_i+0x32>
 8008568:	2f00      	cmp	r7, #0
 800856a:	f000 80d1 	beq.w	8008710 <_printf_i+0x1c4>
 800856e:	2f58      	cmp	r7, #88	@ 0x58
 8008570:	f000 80b8 	beq.w	80086e4 <_printf_i+0x198>
 8008574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800857c:	e03a      	b.n	80085f4 <_printf_i+0xa8>
 800857e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008582:	2b15      	cmp	r3, #21
 8008584:	d8f6      	bhi.n	8008574 <_printf_i+0x28>
 8008586:	a101      	add	r1, pc, #4	@ (adr r1, 800858c <_printf_i+0x40>)
 8008588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800858c:	080085e5 	.word	0x080085e5
 8008590:	080085f9 	.word	0x080085f9
 8008594:	08008575 	.word	0x08008575
 8008598:	08008575 	.word	0x08008575
 800859c:	08008575 	.word	0x08008575
 80085a0:	08008575 	.word	0x08008575
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	08008575 	.word	0x08008575
 80085ac:	08008575 	.word	0x08008575
 80085b0:	08008575 	.word	0x08008575
 80085b4:	08008575 	.word	0x08008575
 80085b8:	080086f7 	.word	0x080086f7
 80085bc:	08008623 	.word	0x08008623
 80085c0:	080086b1 	.word	0x080086b1
 80085c4:	08008575 	.word	0x08008575
 80085c8:	08008575 	.word	0x08008575
 80085cc:	08008719 	.word	0x08008719
 80085d0:	08008575 	.word	0x08008575
 80085d4:	08008623 	.word	0x08008623
 80085d8:	08008575 	.word	0x08008575
 80085dc:	08008575 	.word	0x08008575
 80085e0:	080086b9 	.word	0x080086b9
 80085e4:	6833      	ldr	r3, [r6, #0]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6032      	str	r2, [r6, #0]
 80085ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085f4:	2301      	movs	r3, #1
 80085f6:	e09c      	b.n	8008732 <_printf_i+0x1e6>
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	6820      	ldr	r0, [r4, #0]
 80085fc:	1d19      	adds	r1, r3, #4
 80085fe:	6031      	str	r1, [r6, #0]
 8008600:	0606      	lsls	r6, r0, #24
 8008602:	d501      	bpl.n	8008608 <_printf_i+0xbc>
 8008604:	681d      	ldr	r5, [r3, #0]
 8008606:	e003      	b.n	8008610 <_printf_i+0xc4>
 8008608:	0645      	lsls	r5, r0, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0xb8>
 800860c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008610:	2d00      	cmp	r5, #0
 8008612:	da03      	bge.n	800861c <_printf_i+0xd0>
 8008614:	232d      	movs	r3, #45	@ 0x2d
 8008616:	426d      	negs	r5, r5
 8008618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800861c:	4858      	ldr	r0, [pc, #352]	@ (8008780 <_printf_i+0x234>)
 800861e:	230a      	movs	r3, #10
 8008620:	e011      	b.n	8008646 <_printf_i+0xfa>
 8008622:	6821      	ldr	r1, [r4, #0]
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	0608      	lsls	r0, r1, #24
 8008628:	f853 5b04 	ldr.w	r5, [r3], #4
 800862c:	d402      	bmi.n	8008634 <_printf_i+0xe8>
 800862e:	0649      	lsls	r1, r1, #25
 8008630:	bf48      	it	mi
 8008632:	b2ad      	uxthmi	r5, r5
 8008634:	2f6f      	cmp	r7, #111	@ 0x6f
 8008636:	4852      	ldr	r0, [pc, #328]	@ (8008780 <_printf_i+0x234>)
 8008638:	6033      	str	r3, [r6, #0]
 800863a:	bf14      	ite	ne
 800863c:	230a      	movne	r3, #10
 800863e:	2308      	moveq	r3, #8
 8008640:	2100      	movs	r1, #0
 8008642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008646:	6866      	ldr	r6, [r4, #4]
 8008648:	60a6      	str	r6, [r4, #8]
 800864a:	2e00      	cmp	r6, #0
 800864c:	db05      	blt.n	800865a <_printf_i+0x10e>
 800864e:	6821      	ldr	r1, [r4, #0]
 8008650:	432e      	orrs	r6, r5
 8008652:	f021 0104 	bic.w	r1, r1, #4
 8008656:	6021      	str	r1, [r4, #0]
 8008658:	d04b      	beq.n	80086f2 <_printf_i+0x1a6>
 800865a:	4616      	mov	r6, r2
 800865c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008660:	fb03 5711 	mls	r7, r3, r1, r5
 8008664:	5dc7      	ldrb	r7, [r0, r7]
 8008666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800866a:	462f      	mov	r7, r5
 800866c:	42bb      	cmp	r3, r7
 800866e:	460d      	mov	r5, r1
 8008670:	d9f4      	bls.n	800865c <_printf_i+0x110>
 8008672:	2b08      	cmp	r3, #8
 8008674:	d10b      	bne.n	800868e <_printf_i+0x142>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	07df      	lsls	r7, r3, #31
 800867a:	d508      	bpl.n	800868e <_printf_i+0x142>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	6861      	ldr	r1, [r4, #4]
 8008680:	4299      	cmp	r1, r3
 8008682:	bfde      	ittt	le
 8008684:	2330      	movle	r3, #48	@ 0x30
 8008686:	f806 3c01 	strble.w	r3, [r6, #-1]
 800868a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800868e:	1b92      	subs	r2, r2, r6
 8008690:	6122      	str	r2, [r4, #16]
 8008692:	f8cd a000 	str.w	sl, [sp]
 8008696:	464b      	mov	r3, r9
 8008698:	aa03      	add	r2, sp, #12
 800869a:	4621      	mov	r1, r4
 800869c:	4640      	mov	r0, r8
 800869e:	f7ff fee7 	bl	8008470 <_printf_common>
 80086a2:	3001      	adds	r0, #1
 80086a4:	d14a      	bne.n	800873c <_printf_i+0x1f0>
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	b004      	add	sp, #16
 80086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	f043 0320 	orr.w	r3, r3, #32
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	4832      	ldr	r0, [pc, #200]	@ (8008784 <_printf_i+0x238>)
 80086ba:	2778      	movs	r7, #120	@ 0x78
 80086bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	6831      	ldr	r1, [r6, #0]
 80086c4:	061f      	lsls	r7, r3, #24
 80086c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80086ca:	d402      	bmi.n	80086d2 <_printf_i+0x186>
 80086cc:	065f      	lsls	r7, r3, #25
 80086ce:	bf48      	it	mi
 80086d0:	b2ad      	uxthmi	r5, r5
 80086d2:	6031      	str	r1, [r6, #0]
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	bf44      	itt	mi
 80086d8:	f043 0320 	orrmi.w	r3, r3, #32
 80086dc:	6023      	strmi	r3, [r4, #0]
 80086de:	b11d      	cbz	r5, 80086e8 <_printf_i+0x19c>
 80086e0:	2310      	movs	r3, #16
 80086e2:	e7ad      	b.n	8008640 <_printf_i+0xf4>
 80086e4:	4826      	ldr	r0, [pc, #152]	@ (8008780 <_printf_i+0x234>)
 80086e6:	e7e9      	b.n	80086bc <_printf_i+0x170>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	f023 0320 	bic.w	r3, r3, #32
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	e7f6      	b.n	80086e0 <_printf_i+0x194>
 80086f2:	4616      	mov	r6, r2
 80086f4:	e7bd      	b.n	8008672 <_printf_i+0x126>
 80086f6:	6833      	ldr	r3, [r6, #0]
 80086f8:	6825      	ldr	r5, [r4, #0]
 80086fa:	6961      	ldr	r1, [r4, #20]
 80086fc:	1d18      	adds	r0, r3, #4
 80086fe:	6030      	str	r0, [r6, #0]
 8008700:	062e      	lsls	r6, r5, #24
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	d501      	bpl.n	800870a <_printf_i+0x1be>
 8008706:	6019      	str	r1, [r3, #0]
 8008708:	e002      	b.n	8008710 <_printf_i+0x1c4>
 800870a:	0668      	lsls	r0, r5, #25
 800870c:	d5fb      	bpl.n	8008706 <_printf_i+0x1ba>
 800870e:	8019      	strh	r1, [r3, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	4616      	mov	r6, r2
 8008716:	e7bc      	b.n	8008692 <_printf_i+0x146>
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	6032      	str	r2, [r6, #0]
 800871e:	681e      	ldr	r6, [r3, #0]
 8008720:	6862      	ldr	r2, [r4, #4]
 8008722:	2100      	movs	r1, #0
 8008724:	4630      	mov	r0, r6
 8008726:	f7f7 fd53 	bl	80001d0 <memchr>
 800872a:	b108      	cbz	r0, 8008730 <_printf_i+0x1e4>
 800872c:	1b80      	subs	r0, r0, r6
 800872e:	6060      	str	r0, [r4, #4]
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	2300      	movs	r3, #0
 8008736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800873a:	e7aa      	b.n	8008692 <_printf_i+0x146>
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	4632      	mov	r2, r6
 8008740:	4649      	mov	r1, r9
 8008742:	4640      	mov	r0, r8
 8008744:	47d0      	blx	sl
 8008746:	3001      	adds	r0, #1
 8008748:	d0ad      	beq.n	80086a6 <_printf_i+0x15a>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	079b      	lsls	r3, r3, #30
 800874e:	d413      	bmi.n	8008778 <_printf_i+0x22c>
 8008750:	68e0      	ldr	r0, [r4, #12]
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	4298      	cmp	r0, r3
 8008756:	bfb8      	it	lt
 8008758:	4618      	movlt	r0, r3
 800875a:	e7a6      	b.n	80086aa <_printf_i+0x15e>
 800875c:	2301      	movs	r3, #1
 800875e:	4632      	mov	r2, r6
 8008760:	4649      	mov	r1, r9
 8008762:	4640      	mov	r0, r8
 8008764:	47d0      	blx	sl
 8008766:	3001      	adds	r0, #1
 8008768:	d09d      	beq.n	80086a6 <_printf_i+0x15a>
 800876a:	3501      	adds	r5, #1
 800876c:	68e3      	ldr	r3, [r4, #12]
 800876e:	9903      	ldr	r1, [sp, #12]
 8008770:	1a5b      	subs	r3, r3, r1
 8008772:	42ab      	cmp	r3, r5
 8008774:	dcf2      	bgt.n	800875c <_printf_i+0x210>
 8008776:	e7eb      	b.n	8008750 <_printf_i+0x204>
 8008778:	2500      	movs	r5, #0
 800877a:	f104 0619 	add.w	r6, r4, #25
 800877e:	e7f5      	b.n	800876c <_printf_i+0x220>
 8008780:	0800a98e 	.word	0x0800a98e
 8008784:	0800a99f 	.word	0x0800a99f

08008788 <std>:
 8008788:	2300      	movs	r3, #0
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	e9c0 3300 	strd	r3, r3, [r0]
 8008792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008796:	6083      	str	r3, [r0, #8]
 8008798:	8181      	strh	r1, [r0, #12]
 800879a:	6643      	str	r3, [r0, #100]	@ 0x64
 800879c:	81c2      	strh	r2, [r0, #14]
 800879e:	6183      	str	r3, [r0, #24]
 80087a0:	4619      	mov	r1, r3
 80087a2:	2208      	movs	r2, #8
 80087a4:	305c      	adds	r0, #92	@ 0x5c
 80087a6:	f000 f9f9 	bl	8008b9c <memset>
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x58>)
 80087ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x5c>)
 80087b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <std+0x60>)
 80087b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <std+0x64>)
 80087b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <std+0x68>)
 80087bc:	6224      	str	r4, [r4, #32]
 80087be:	429c      	cmp	r4, r3
 80087c0:	d006      	beq.n	80087d0 <std+0x48>
 80087c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087c6:	4294      	cmp	r4, r2
 80087c8:	d002      	beq.n	80087d0 <std+0x48>
 80087ca:	33d0      	adds	r3, #208	@ 0xd0
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d105      	bne.n	80087dc <std+0x54>
 80087d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f000 ba5c 	b.w	8008c94 <__retarget_lock_init_recursive>
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	080089ed 	.word	0x080089ed
 80087e4:	08008a0f 	.word	0x08008a0f
 80087e8:	08008a47 	.word	0x08008a47
 80087ec:	08008a6b 	.word	0x08008a6b
 80087f0:	20008630 	.word	0x20008630

080087f4 <stdio_exit_handler>:
 80087f4:	4a02      	ldr	r2, [pc, #8]	@ (8008800 <stdio_exit_handler+0xc>)
 80087f6:	4903      	ldr	r1, [pc, #12]	@ (8008804 <stdio_exit_handler+0x10>)
 80087f8:	4803      	ldr	r0, [pc, #12]	@ (8008808 <stdio_exit_handler+0x14>)
 80087fa:	f000 b869 	b.w	80088d0 <_fwalk_sglue>
 80087fe:	bf00      	nop
 8008800:	2000000c 	.word	0x2000000c
 8008804:	0800a5d1 	.word	0x0800a5d1
 8008808:	2000001c 	.word	0x2000001c

0800880c <cleanup_stdio>:
 800880c:	6841      	ldr	r1, [r0, #4]
 800880e:	4b0c      	ldr	r3, [pc, #48]	@ (8008840 <cleanup_stdio+0x34>)
 8008810:	4299      	cmp	r1, r3
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	d001      	beq.n	800881c <cleanup_stdio+0x10>
 8008818:	f001 feda 	bl	800a5d0 <_fflush_r>
 800881c:	68a1      	ldr	r1, [r4, #8]
 800881e:	4b09      	ldr	r3, [pc, #36]	@ (8008844 <cleanup_stdio+0x38>)
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <cleanup_stdio+0x1e>
 8008824:	4620      	mov	r0, r4
 8008826:	f001 fed3 	bl	800a5d0 <_fflush_r>
 800882a:	68e1      	ldr	r1, [r4, #12]
 800882c:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <cleanup_stdio+0x3c>)
 800882e:	4299      	cmp	r1, r3
 8008830:	d004      	beq.n	800883c <cleanup_stdio+0x30>
 8008832:	4620      	mov	r0, r4
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008838:	f001 beca 	b.w	800a5d0 <_fflush_r>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	bf00      	nop
 8008840:	20008630 	.word	0x20008630
 8008844:	20008698 	.word	0x20008698
 8008848:	20008700 	.word	0x20008700

0800884c <global_stdio_init.part.0>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4b0b      	ldr	r3, [pc, #44]	@ (800887c <global_stdio_init.part.0+0x30>)
 8008850:	4c0b      	ldr	r4, [pc, #44]	@ (8008880 <global_stdio_init.part.0+0x34>)
 8008852:	4a0c      	ldr	r2, [pc, #48]	@ (8008884 <global_stdio_init.part.0+0x38>)
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	4620      	mov	r0, r4
 8008858:	2200      	movs	r2, #0
 800885a:	2104      	movs	r1, #4
 800885c:	f7ff ff94 	bl	8008788 <std>
 8008860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008864:	2201      	movs	r2, #1
 8008866:	2109      	movs	r1, #9
 8008868:	f7ff ff8e 	bl	8008788 <std>
 800886c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008870:	2202      	movs	r2, #2
 8008872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008876:	2112      	movs	r1, #18
 8008878:	f7ff bf86 	b.w	8008788 <std>
 800887c:	20008768 	.word	0x20008768
 8008880:	20008630 	.word	0x20008630
 8008884:	080087f5 	.word	0x080087f5

08008888 <__sfp_lock_acquire>:
 8008888:	4801      	ldr	r0, [pc, #4]	@ (8008890 <__sfp_lock_acquire+0x8>)
 800888a:	f000 ba04 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	20008771 	.word	0x20008771

08008894 <__sfp_lock_release>:
 8008894:	4801      	ldr	r0, [pc, #4]	@ (800889c <__sfp_lock_release+0x8>)
 8008896:	f000 b9ff 	b.w	8008c98 <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	20008771 	.word	0x20008771

080088a0 <__sinit>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	f7ff fff0 	bl	8008888 <__sfp_lock_acquire>
 80088a8:	6a23      	ldr	r3, [r4, #32]
 80088aa:	b11b      	cbz	r3, 80088b4 <__sinit+0x14>
 80088ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b0:	f7ff bff0 	b.w	8008894 <__sfp_lock_release>
 80088b4:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <__sinit+0x28>)
 80088b6:	6223      	str	r3, [r4, #32]
 80088b8:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <__sinit+0x2c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f5      	bne.n	80088ac <__sinit+0xc>
 80088c0:	f7ff ffc4 	bl	800884c <global_stdio_init.part.0>
 80088c4:	e7f2      	b.n	80088ac <__sinit+0xc>
 80088c6:	bf00      	nop
 80088c8:	0800880d 	.word	0x0800880d
 80088cc:	20008768 	.word	0x20008768

080088d0 <_fwalk_sglue>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4607      	mov	r7, r0
 80088d6:	4688      	mov	r8, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	2600      	movs	r6, #0
 80088dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e0:	f1b9 0901 	subs.w	r9, r9, #1
 80088e4:	d505      	bpl.n	80088f2 <_fwalk_sglue+0x22>
 80088e6:	6824      	ldr	r4, [r4, #0]
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	d1f7      	bne.n	80088dc <_fwalk_sglue+0xc>
 80088ec:	4630      	mov	r0, r6
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d907      	bls.n	8008908 <_fwalk_sglue+0x38>
 80088f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088fc:	3301      	adds	r3, #1
 80088fe:	d003      	beq.n	8008908 <_fwalk_sglue+0x38>
 8008900:	4629      	mov	r1, r5
 8008902:	4638      	mov	r0, r7
 8008904:	47c0      	blx	r8
 8008906:	4306      	orrs	r6, r0
 8008908:	3568      	adds	r5, #104	@ 0x68
 800890a:	e7e9      	b.n	80088e0 <_fwalk_sglue+0x10>

0800890c <iprintf>:
 800890c:	b40f      	push	{r0, r1, r2, r3}
 800890e:	b507      	push	{r0, r1, r2, lr}
 8008910:	4906      	ldr	r1, [pc, #24]	@ (800892c <iprintf+0x20>)
 8008912:	ab04      	add	r3, sp, #16
 8008914:	6808      	ldr	r0, [r1, #0]
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	6881      	ldr	r1, [r0, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	f001 fcbb 	bl	800a298 <_vfiprintf_r>
 8008922:	b003      	add	sp, #12
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b004      	add	sp, #16
 800892a:	4770      	bx	lr
 800892c:	20000018 	.word	0x20000018

08008930 <_puts_r>:
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b570      	push	{r4, r5, r6, lr}
 8008934:	6884      	ldr	r4, [r0, #8]
 8008936:	4605      	mov	r5, r0
 8008938:	460e      	mov	r6, r1
 800893a:	b90b      	cbnz	r3, 8008940 <_puts_r+0x10>
 800893c:	f7ff ffb0 	bl	80088a0 <__sinit>
 8008940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008942:	07db      	lsls	r3, r3, #31
 8008944:	d405      	bmi.n	8008952 <_puts_r+0x22>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	0598      	lsls	r0, r3, #22
 800894a:	d402      	bmi.n	8008952 <_puts_r+0x22>
 800894c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894e:	f000 f9a2 	bl	8008c96 <__retarget_lock_acquire_recursive>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	0719      	lsls	r1, r3, #28
 8008956:	d502      	bpl.n	800895e <_puts_r+0x2e>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d135      	bne.n	80089ca <_puts_r+0x9a>
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f8c5 	bl	8008af0 <__swsetup_r>
 8008966:	b380      	cbz	r0, 80089ca <_puts_r+0x9a>
 8008968:	f04f 35ff 	mov.w	r5, #4294967295
 800896c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800896e:	07da      	lsls	r2, r3, #31
 8008970:	d405      	bmi.n	800897e <_puts_r+0x4e>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	059b      	lsls	r3, r3, #22
 8008976:	d402      	bmi.n	800897e <_puts_r+0x4e>
 8008978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800897a:	f000 f98d 	bl	8008c98 <__retarget_lock_release_recursive>
 800897e:	4628      	mov	r0, r5
 8008980:	bd70      	pop	{r4, r5, r6, pc}
 8008982:	2b00      	cmp	r3, #0
 8008984:	da04      	bge.n	8008990 <_puts_r+0x60>
 8008986:	69a2      	ldr	r2, [r4, #24]
 8008988:	429a      	cmp	r2, r3
 800898a:	dc17      	bgt.n	80089bc <_puts_r+0x8c>
 800898c:	290a      	cmp	r1, #10
 800898e:	d015      	beq.n	80089bc <_puts_r+0x8c>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	6022      	str	r2, [r4, #0]
 8008996:	7019      	strb	r1, [r3, #0]
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800899e:	3b01      	subs	r3, #1
 80089a0:	60a3      	str	r3, [r4, #8]
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d1ed      	bne.n	8008982 <_puts_r+0x52>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da11      	bge.n	80089ce <_puts_r+0x9e>
 80089aa:	4622      	mov	r2, r4
 80089ac:	210a      	movs	r1, #10
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f85f 	bl	8008a72 <__swbuf_r>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d0d7      	beq.n	8008968 <_puts_r+0x38>
 80089b8:	250a      	movs	r5, #10
 80089ba:	e7d7      	b.n	800896c <_puts_r+0x3c>
 80089bc:	4622      	mov	r2, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 f857 	bl	8008a72 <__swbuf_r>
 80089c4:	3001      	adds	r0, #1
 80089c6:	d1e7      	bne.n	8008998 <_puts_r+0x68>
 80089c8:	e7ce      	b.n	8008968 <_puts_r+0x38>
 80089ca:	3e01      	subs	r6, #1
 80089cc:	e7e4      	b.n	8008998 <_puts_r+0x68>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	220a      	movs	r2, #10
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	e7ee      	b.n	80089b8 <_puts_r+0x88>
	...

080089dc <puts>:
 80089dc:	4b02      	ldr	r3, [pc, #8]	@ (80089e8 <puts+0xc>)
 80089de:	4601      	mov	r1, r0
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f7ff bfa5 	b.w	8008930 <_puts_r>
 80089e6:	bf00      	nop
 80089e8:	20000018 	.word	0x20000018

080089ec <__sread>:
 80089ec:	b510      	push	{r4, lr}
 80089ee:	460c      	mov	r4, r1
 80089f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f4:	f000 f900 	bl	8008bf8 <_read_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	bfab      	itete	ge
 80089fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008a00:	181b      	addge	r3, r3, r0
 8008a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a06:	bfac      	ite	ge
 8008a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a0a:	81a3      	strhlt	r3, [r4, #12]
 8008a0c:	bd10      	pop	{r4, pc}

08008a0e <__swrite>:
 8008a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a12:	461f      	mov	r7, r3
 8008a14:	898b      	ldrh	r3, [r1, #12]
 8008a16:	05db      	lsls	r3, r3, #23
 8008a18:	4605      	mov	r5, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	d505      	bpl.n	8008a2c <__swrite+0x1e>
 8008a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a24:	2302      	movs	r3, #2
 8008a26:	2200      	movs	r2, #0
 8008a28:	f000 f8d4 	bl	8008bd4 <_lseek_r>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	4632      	mov	r2, r6
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a42:	f000 b8eb 	b.w	8008c1c <_write_r>

08008a46 <__sseek>:
 8008a46:	b510      	push	{r4, lr}
 8008a48:	460c      	mov	r4, r1
 8008a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4e:	f000 f8c1 	bl	8008bd4 <_lseek_r>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	bf15      	itete	ne
 8008a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a62:	81a3      	strheq	r3, [r4, #12]
 8008a64:	bf18      	it	ne
 8008a66:	81a3      	strhne	r3, [r4, #12]
 8008a68:	bd10      	pop	{r4, pc}

08008a6a <__sclose>:
 8008a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6e:	f000 b8a1 	b.w	8008bb4 <_close_r>

08008a72 <__swbuf_r>:
 8008a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a74:	460e      	mov	r6, r1
 8008a76:	4614      	mov	r4, r2
 8008a78:	4605      	mov	r5, r0
 8008a7a:	b118      	cbz	r0, 8008a84 <__swbuf_r+0x12>
 8008a7c:	6a03      	ldr	r3, [r0, #32]
 8008a7e:	b90b      	cbnz	r3, 8008a84 <__swbuf_r+0x12>
 8008a80:	f7ff ff0e 	bl	80088a0 <__sinit>
 8008a84:	69a3      	ldr	r3, [r4, #24]
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	071a      	lsls	r2, r3, #28
 8008a8c:	d501      	bpl.n	8008a92 <__swbuf_r+0x20>
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	b943      	cbnz	r3, 8008aa4 <__swbuf_r+0x32>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f82b 	bl	8008af0 <__swsetup_r>
 8008a9a:	b118      	cbz	r0, 8008aa4 <__swbuf_r+0x32>
 8008a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	6922      	ldr	r2, [r4, #16]
 8008aa8:	1a98      	subs	r0, r3, r2
 8008aaa:	6963      	ldr	r3, [r4, #20]
 8008aac:	b2f6      	uxtb	r6, r6
 8008aae:	4283      	cmp	r3, r0
 8008ab0:	4637      	mov	r7, r6
 8008ab2:	dc05      	bgt.n	8008ac0 <__swbuf_r+0x4e>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f001 fd8a 	bl	800a5d0 <_fflush_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1ed      	bne.n	8008a9c <__swbuf_r+0x2a>
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	6022      	str	r2, [r4, #0]
 8008acc:	701e      	strb	r6, [r3, #0]
 8008ace:	6962      	ldr	r2, [r4, #20]
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d004      	beq.n	8008ae0 <__swbuf_r+0x6e>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	07db      	lsls	r3, r3, #31
 8008ada:	d5e1      	bpl.n	8008aa0 <__swbuf_r+0x2e>
 8008adc:	2e0a      	cmp	r6, #10
 8008ade:	d1df      	bne.n	8008aa0 <__swbuf_r+0x2e>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f001 fd74 	bl	800a5d0 <_fflush_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d0d9      	beq.n	8008aa0 <__swbuf_r+0x2e>
 8008aec:	e7d6      	b.n	8008a9c <__swbuf_r+0x2a>
	...

08008af0 <__swsetup_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4b29      	ldr	r3, [pc, #164]	@ (8008b98 <__swsetup_r+0xa8>)
 8008af4:	4605      	mov	r5, r0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	460c      	mov	r4, r1
 8008afa:	b118      	cbz	r0, 8008b04 <__swsetup_r+0x14>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <__swsetup_r+0x14>
 8008b00:	f7ff fece 	bl	80088a0 <__sinit>
 8008b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b08:	0719      	lsls	r1, r3, #28
 8008b0a:	d422      	bmi.n	8008b52 <__swsetup_r+0x62>
 8008b0c:	06da      	lsls	r2, r3, #27
 8008b0e:	d407      	bmi.n	8008b20 <__swsetup_r+0x30>
 8008b10:	2209      	movs	r2, #9
 8008b12:	602a      	str	r2, [r5, #0]
 8008b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	e033      	b.n	8008b88 <__swsetup_r+0x98>
 8008b20:	0758      	lsls	r0, r3, #29
 8008b22:	d512      	bpl.n	8008b4a <__swsetup_r+0x5a>
 8008b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b26:	b141      	cbz	r1, 8008b3a <__swsetup_r+0x4a>
 8008b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <__swsetup_r+0x46>
 8008b30:	4628      	mov	r0, r5
 8008b32:	f000 ff0d 	bl	8009950 <_free_r>
 8008b36:	2300      	movs	r3, #0
 8008b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0308 	orr.w	r3, r3, #8
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	b94b      	cbnz	r3, 8008b6a <__swsetup_r+0x7a>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b60:	d003      	beq.n	8008b6a <__swsetup_r+0x7a>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f001 fd81 	bl	800a66c <__smakebuf_r>
 8008b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6e:	f013 0201 	ands.w	r2, r3, #1
 8008b72:	d00a      	beq.n	8008b8a <__swsetup_r+0x9a>
 8008b74:	2200      	movs	r2, #0
 8008b76:	60a2      	str	r2, [r4, #8]
 8008b78:	6962      	ldr	r2, [r4, #20]
 8008b7a:	4252      	negs	r2, r2
 8008b7c:	61a2      	str	r2, [r4, #24]
 8008b7e:	6922      	ldr	r2, [r4, #16]
 8008b80:	b942      	cbnz	r2, 8008b94 <__swsetup_r+0xa4>
 8008b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b86:	d1c5      	bne.n	8008b14 <__swsetup_r+0x24>
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	0799      	lsls	r1, r3, #30
 8008b8c:	bf58      	it	pl
 8008b8e:	6962      	ldrpl	r2, [r4, #20]
 8008b90:	60a2      	str	r2, [r4, #8]
 8008b92:	e7f4      	b.n	8008b7e <__swsetup_r+0x8e>
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7f7      	b.n	8008b88 <__swsetup_r+0x98>
 8008b98:	20000018 	.word	0x20000018

08008b9c <memset>:
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d100      	bne.n	8008ba6 <memset+0xa>
 8008ba4:	4770      	bx	lr
 8008ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8008baa:	e7f9      	b.n	8008ba0 <memset+0x4>

08008bac <_localeconv_r>:
 8008bac:	4800      	ldr	r0, [pc, #0]	@ (8008bb0 <_localeconv_r+0x4>)
 8008bae:	4770      	bx	lr
 8008bb0:	20000158 	.word	0x20000158

08008bb4 <_close_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	@ (8008bd0 <_close_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7fb f906 	bl	8003dd0 <_close>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_close_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_close_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	2000876c 	.word	0x2000876c

08008bd4 <_lseek_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	@ (8008bf4 <_lseek_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7fb f91b 	bl	8003e1e <_lseek>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_lseek_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_lseek_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	2000876c 	.word	0x2000876c

08008bf8 <_read_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	@ (8008c18 <_read_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7fb f8a9 	bl	8003d5e <_read>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_read_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_read_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	2000876c 	.word	0x2000876c

08008c1c <_write_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	@ (8008c3c <_write_r+0x20>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	4611      	mov	r1, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7fb f8b4 	bl	8003d98 <_write>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_write_r+0x1e>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_write_r+0x1e>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	2000876c 	.word	0x2000876c

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	@ (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20000018 	.word	0x20000018

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c84 <__libc_init_array+0x38>)
 8008c50:	4c0d      	ldr	r4, [pc, #52]	@ (8008c88 <__libc_init_array+0x3c>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	2600      	movs	r6, #0
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c8c <__libc_init_array+0x40>)
 8008c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008c90 <__libc_init_array+0x44>)
 8008c60:	f001 fe30 	bl	800a8c4 <_init>
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	2600      	movs	r6, #0
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	0800acfc 	.word	0x0800acfc
 8008c88:	0800acfc 	.word	0x0800acfc
 8008c8c:	0800acfc 	.word	0x0800acfc
 8008c90:	0800ad00 	.word	0x0800ad00

08008c94 <__retarget_lock_init_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_acquire_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <__retarget_lock_release_recursive>:
 8008c98:	4770      	bx	lr

08008c9a <quorem>:
 8008c9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9e:	6903      	ldr	r3, [r0, #16]
 8008ca0:	690c      	ldr	r4, [r1, #16]
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	db7e      	blt.n	8008da6 <quorem+0x10c>
 8008ca8:	3c01      	subs	r4, #1
 8008caa:	f101 0814 	add.w	r8, r1, #20
 8008cae:	00a3      	lsls	r3, r4, #2
 8008cb0:	f100 0514 	add.w	r5, r0, #20
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ccc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd0:	d32e      	bcc.n	8008d30 <quorem+0x96>
 8008cd2:	f04f 0a00 	mov.w	sl, #0
 8008cd6:	46c4      	mov	ip, r8
 8008cd8:	46ae      	mov	lr, r5
 8008cda:	46d3      	mov	fp, sl
 8008cdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ce0:	b298      	uxth	r0, r3
 8008ce2:	fb06 a000 	mla	r0, r6, r0, sl
 8008ce6:	0c02      	lsrs	r2, r0, #16
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	fb06 2303 	mla	r3, r6, r3, r2
 8008cee:	f8de 2000 	ldr.w	r2, [lr]
 8008cf2:	b280      	uxth	r0, r0
 8008cf4:	b292      	uxth	r2, r2
 8008cf6:	1a12      	subs	r2, r2, r0
 8008cf8:	445a      	add	r2, fp
 8008cfa:	f8de 0000 	ldr.w	r0, [lr]
 8008cfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d0c:	b292      	uxth	r2, r2
 8008d0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d12:	45e1      	cmp	r9, ip
 8008d14:	f84e 2b04 	str.w	r2, [lr], #4
 8008d18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d1c:	d2de      	bcs.n	8008cdc <quorem+0x42>
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	58eb      	ldr	r3, [r5, r3]
 8008d22:	b92b      	cbnz	r3, 8008d30 <quorem+0x96>
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	3b04      	subs	r3, #4
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	d32f      	bcc.n	8008d8e <quorem+0xf4>
 8008d2e:	613c      	str	r4, [r7, #16]
 8008d30:	4638      	mov	r0, r7
 8008d32:	f001 f97f 	bl	800a034 <__mcmp>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	db25      	blt.n	8008d86 <quorem+0xec>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d42:	f8d1 c000 	ldr.w	ip, [r1]
 8008d46:	fa1f fe82 	uxth.w	lr, r2
 8008d4a:	fa1f f38c 	uxth.w	r3, ip
 8008d4e:	eba3 030e 	sub.w	r3, r3, lr
 8008d52:	4403      	add	r3, r0
 8008d54:	0c12      	lsrs	r2, r2, #16
 8008d56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d64:	45c1      	cmp	r9, r8
 8008d66:	f841 3b04 	str.w	r3, [r1], #4
 8008d6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d6e:	d2e6      	bcs.n	8008d3e <quorem+0xa4>
 8008d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d78:	b922      	cbnz	r2, 8008d84 <quorem+0xea>
 8008d7a:	3b04      	subs	r3, #4
 8008d7c:	429d      	cmp	r5, r3
 8008d7e:	461a      	mov	r2, r3
 8008d80:	d30b      	bcc.n	8008d9a <quorem+0x100>
 8008d82:	613c      	str	r4, [r7, #16]
 8008d84:	3601      	adds	r6, #1
 8008d86:	4630      	mov	r0, r6
 8008d88:	b003      	add	sp, #12
 8008d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	3b04      	subs	r3, #4
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	d1cb      	bne.n	8008d2e <quorem+0x94>
 8008d96:	3c01      	subs	r4, #1
 8008d98:	e7c6      	b.n	8008d28 <quorem+0x8e>
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	d1ef      	bne.n	8008d82 <quorem+0xe8>
 8008da2:	3c01      	subs	r4, #1
 8008da4:	e7ea      	b.n	8008d7c <quorem+0xe2>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e7ee      	b.n	8008d88 <quorem+0xee>
 8008daa:	0000      	movs	r0, r0
 8008dac:	0000      	movs	r0, r0
	...

08008db0 <_dtoa_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	69c7      	ldr	r7, [r0, #28]
 8008db6:	b097      	sub	sp, #92	@ 0x5c
 8008db8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008dbc:	ec55 4b10 	vmov	r4, r5, d0
 8008dc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008dc2:	9107      	str	r1, [sp, #28]
 8008dc4:	4681      	mov	r9, r0
 8008dc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008dc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008dca:	b97f      	cbnz	r7, 8008dec <_dtoa_r+0x3c>
 8008dcc:	2010      	movs	r0, #16
 8008dce:	f000 fe09 	bl	80099e4 <malloc>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008dd8:	b920      	cbnz	r0, 8008de4 <_dtoa_r+0x34>
 8008dda:	4ba9      	ldr	r3, [pc, #676]	@ (8009080 <_dtoa_r+0x2d0>)
 8008ddc:	21ef      	movs	r1, #239	@ 0xef
 8008dde:	48a9      	ldr	r0, [pc, #676]	@ (8009084 <_dtoa_r+0x2d4>)
 8008de0:	f001 fcc0 	bl	800a764 <__assert_func>
 8008de4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008de8:	6007      	str	r7, [r0, #0]
 8008dea:	60c7      	str	r7, [r0, #12]
 8008dec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008df0:	6819      	ldr	r1, [r3, #0]
 8008df2:	b159      	cbz	r1, 8008e0c <_dtoa_r+0x5c>
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	604a      	str	r2, [r1, #4]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4093      	lsls	r3, r2
 8008dfc:	608b      	str	r3, [r1, #8]
 8008dfe:	4648      	mov	r0, r9
 8008e00:	f000 fee6 	bl	8009bd0 <_Bfree>
 8008e04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	1e2b      	subs	r3, r5, #0
 8008e0e:	bfb9      	ittee	lt
 8008e10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e14:	9305      	strlt	r3, [sp, #20]
 8008e16:	2300      	movge	r3, #0
 8008e18:	6033      	strge	r3, [r6, #0]
 8008e1a:	9f05      	ldr	r7, [sp, #20]
 8008e1c:	4b9a      	ldr	r3, [pc, #616]	@ (8009088 <_dtoa_r+0x2d8>)
 8008e1e:	bfbc      	itt	lt
 8008e20:	2201      	movlt	r2, #1
 8008e22:	6032      	strlt	r2, [r6, #0]
 8008e24:	43bb      	bics	r3, r7
 8008e26:	d112      	bne.n	8008e4e <_dtoa_r+0x9e>
 8008e28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e34:	4323      	orrs	r3, r4
 8008e36:	f000 855a 	beq.w	80098ee <_dtoa_r+0xb3e>
 8008e3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800909c <_dtoa_r+0x2ec>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 855c 	beq.w	80098fe <_dtoa_r+0xb4e>
 8008e46:	f10a 0303 	add.w	r3, sl, #3
 8008e4a:	f000 bd56 	b.w	80098fa <_dtoa_r+0xb4a>
 8008e4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e52:	2200      	movs	r2, #0
 8008e54:	ec51 0b17 	vmov	r0, r1, d7
 8008e58:	2300      	movs	r3, #0
 8008e5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008e5e:	f7f7 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e62:	4680      	mov	r8, r0
 8008e64:	b158      	cbz	r0, 8008e7e <_dtoa_r+0xce>
 8008e66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e68:	2301      	movs	r3, #1
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e6e:	b113      	cbz	r3, 8008e76 <_dtoa_r+0xc6>
 8008e70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e72:	4b86      	ldr	r3, [pc, #536]	@ (800908c <_dtoa_r+0x2dc>)
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80090a0 <_dtoa_r+0x2f0>
 8008e7a:	f000 bd40 	b.w	80098fe <_dtoa_r+0xb4e>
 8008e7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008e82:	aa14      	add	r2, sp, #80	@ 0x50
 8008e84:	a915      	add	r1, sp, #84	@ 0x54
 8008e86:	4648      	mov	r0, r9
 8008e88:	f001 f984 	bl	800a194 <__d2b>
 8008e8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	d078      	beq.n	8008f88 <_dtoa_r+0x1d8>
 8008e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008eac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4b76      	ldr	r3, [pc, #472]	@ (8009090 <_dtoa_r+0x2e0>)
 8008eb6:	f7f7 f9e7 	bl	8000288 <__aeabi_dsub>
 8008eba:	a36b      	add	r3, pc, #428	@ (adr r3, 8009068 <_dtoa_r+0x2b8>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7f7 fb9a 	bl	80005f8 <__aeabi_dmul>
 8008ec4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009070 <_dtoa_r+0x2c0>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f9df 	bl	800028c <__adddf3>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	f7f7 fb26 	bl	8000524 <__aeabi_i2d>
 8008ed8:	a367      	add	r3, pc, #412	@ (adr r3, 8009078 <_dtoa_r+0x2c8>)
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 f9cf 	bl	800028c <__adddf3>
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	f7f7 fe31 	bl	8000b58 <__aeabi_d2iz>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4607      	mov	r7, r0
 8008efa:	2300      	movs	r3, #0
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 fdec 	bl	8000adc <__aeabi_dcmplt>
 8008f04:	b140      	cbz	r0, 8008f18 <_dtoa_r+0x168>
 8008f06:	4638      	mov	r0, r7
 8008f08:	f7f7 fb0c 	bl	8000524 <__aeabi_i2d>
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	462b      	mov	r3, r5
 8008f10:	f7f7 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f14:	b900      	cbnz	r0, 8008f18 <_dtoa_r+0x168>
 8008f16:	3f01      	subs	r7, #1
 8008f18:	2f16      	cmp	r7, #22
 8008f1a:	d852      	bhi.n	8008fc2 <_dtoa_r+0x212>
 8008f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8009094 <_dtoa_r+0x2e4>)
 8008f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f2a:	f7f7 fdd7 	bl	8000adc <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d049      	beq.n	8008fc6 <_dtoa_r+0x216>
 8008f32:	3f01      	subs	r7, #1
 8008f34:	2300      	movs	r3, #0
 8008f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f3a:	1b9b      	subs	r3, r3, r6
 8008f3c:	1e5a      	subs	r2, r3, #1
 8008f3e:	bf45      	ittet	mi
 8008f40:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f44:	9300      	strmi	r3, [sp, #0]
 8008f46:	2300      	movpl	r3, #0
 8008f48:	2300      	movmi	r3, #0
 8008f4a:	9206      	str	r2, [sp, #24]
 8008f4c:	bf54      	ite	pl
 8008f4e:	9300      	strpl	r3, [sp, #0]
 8008f50:	9306      	strmi	r3, [sp, #24]
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	db39      	blt.n	8008fca <_dtoa_r+0x21a>
 8008f56:	9b06      	ldr	r3, [sp, #24]
 8008f58:	970d      	str	r7, [sp, #52]	@ 0x34
 8008f5a:	443b      	add	r3, r7
 8008f5c:	9306      	str	r3, [sp, #24]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	9308      	str	r3, [sp, #32]
 8008f62:	9b07      	ldr	r3, [sp, #28]
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d863      	bhi.n	8009030 <_dtoa_r+0x280>
 8008f68:	2b05      	cmp	r3, #5
 8008f6a:	bfc4      	itt	gt
 8008f6c:	3b04      	subgt	r3, #4
 8008f6e:	9307      	strgt	r3, [sp, #28]
 8008f70:	9b07      	ldr	r3, [sp, #28]
 8008f72:	f1a3 0302 	sub.w	r3, r3, #2
 8008f76:	bfcc      	ite	gt
 8008f78:	2400      	movgt	r4, #0
 8008f7a:	2401      	movle	r4, #1
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d863      	bhi.n	8009048 <_dtoa_r+0x298>
 8008f80:	e8df f003 	tbb	[pc, r3]
 8008f84:	2b375452 	.word	0x2b375452
 8008f88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f8c:	441e      	add	r6, r3
 8008f8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	bfc1      	itttt	gt
 8008f96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f9a:	409f      	lslgt	r7, r3
 8008f9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fa4:	bfd6      	itet	le
 8008fa6:	f1c3 0320 	rsble	r3, r3, #32
 8008faa:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fae:	fa04 f003 	lslle.w	r0, r4, r3
 8008fb2:	f7f7 faa7 	bl	8000504 <__aeabi_ui2d>
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8008fc0:	e776      	b.n	8008eb0 <_dtoa_r+0x100>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7b7      	b.n	8008f36 <_dtoa_r+0x186>
 8008fc6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008fc8:	e7b6      	b.n	8008f38 <_dtoa_r+0x188>
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	1bdb      	subs	r3, r3, r7
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	427b      	negs	r3, r7
 8008fd2:	9308      	str	r3, [sp, #32]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008fd8:	e7c3      	b.n	8008f62 <_dtoa_r+0x1b2>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fe0:	eb07 0b03 	add.w	fp, r7, r3
 8008fe4:	f10b 0301 	add.w	r3, fp, #1
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	bfb8      	it	lt
 8008fee:	2301      	movlt	r3, #1
 8008ff0:	e006      	b.n	8009000 <_dtoa_r+0x250>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dd28      	ble.n	800904e <_dtoa_r+0x29e>
 8008ffc:	469b      	mov	fp, r3
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009004:	2100      	movs	r1, #0
 8009006:	2204      	movs	r2, #4
 8009008:	f102 0514 	add.w	r5, r2, #20
 800900c:	429d      	cmp	r5, r3
 800900e:	d926      	bls.n	800905e <_dtoa_r+0x2ae>
 8009010:	6041      	str	r1, [r0, #4]
 8009012:	4648      	mov	r0, r9
 8009014:	f000 fd9c 	bl	8009b50 <_Balloc>
 8009018:	4682      	mov	sl, r0
 800901a:	2800      	cmp	r0, #0
 800901c:	d142      	bne.n	80090a4 <_dtoa_r+0x2f4>
 800901e:	4b1e      	ldr	r3, [pc, #120]	@ (8009098 <_dtoa_r+0x2e8>)
 8009020:	4602      	mov	r2, r0
 8009022:	f240 11af 	movw	r1, #431	@ 0x1af
 8009026:	e6da      	b.n	8008dde <_dtoa_r+0x2e>
 8009028:	2300      	movs	r3, #0
 800902a:	e7e3      	b.n	8008ff4 <_dtoa_r+0x244>
 800902c:	2300      	movs	r3, #0
 800902e:	e7d5      	b.n	8008fdc <_dtoa_r+0x22c>
 8009030:	2401      	movs	r4, #1
 8009032:	2300      	movs	r3, #0
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	9409      	str	r4, [sp, #36]	@ 0x24
 8009038:	f04f 3bff 	mov.w	fp, #4294967295
 800903c:	2200      	movs	r2, #0
 800903e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009042:	2312      	movs	r3, #18
 8009044:	920c      	str	r2, [sp, #48]	@ 0x30
 8009046:	e7db      	b.n	8009000 <_dtoa_r+0x250>
 8009048:	2301      	movs	r3, #1
 800904a:	9309      	str	r3, [sp, #36]	@ 0x24
 800904c:	e7f4      	b.n	8009038 <_dtoa_r+0x288>
 800904e:	f04f 0b01 	mov.w	fp, #1
 8009052:	f8cd b00c 	str.w	fp, [sp, #12]
 8009056:	465b      	mov	r3, fp
 8009058:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800905c:	e7d0      	b.n	8009000 <_dtoa_r+0x250>
 800905e:	3101      	adds	r1, #1
 8009060:	0052      	lsls	r2, r2, #1
 8009062:	e7d1      	b.n	8009008 <_dtoa_r+0x258>
 8009064:	f3af 8000 	nop.w
 8009068:	636f4361 	.word	0x636f4361
 800906c:	3fd287a7 	.word	0x3fd287a7
 8009070:	8b60c8b3 	.word	0x8b60c8b3
 8009074:	3fc68a28 	.word	0x3fc68a28
 8009078:	509f79fb 	.word	0x509f79fb
 800907c:	3fd34413 	.word	0x3fd34413
 8009080:	0800a9bd 	.word	0x0800a9bd
 8009084:	0800a9d4 	.word	0x0800a9d4
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	0800a98d 	.word	0x0800a98d
 8009090:	3ff80000 	.word	0x3ff80000
 8009094:	0800ab28 	.word	0x0800ab28
 8009098:	0800aa2c 	.word	0x0800aa2c
 800909c:	0800a9b9 	.word	0x0800a9b9
 80090a0:	0800a98c 	.word	0x0800a98c
 80090a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	2b0e      	cmp	r3, #14
 80090ae:	f200 80a1 	bhi.w	80091f4 <_dtoa_r+0x444>
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	f000 809e 	beq.w	80091f4 <_dtoa_r+0x444>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	dd33      	ble.n	8009124 <_dtoa_r+0x374>
 80090bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009330 <_dtoa_r+0x580>)
 80090be:	f007 020f 	and.w	r2, r7, #15
 80090c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c6:	ed93 7b00 	vldr	d7, [r3]
 80090ca:	05f8      	lsls	r0, r7, #23
 80090cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80090d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090d4:	d516      	bpl.n	8009104 <_dtoa_r+0x354>
 80090d6:	4b97      	ldr	r3, [pc, #604]	@ (8009334 <_dtoa_r+0x584>)
 80090d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090e0:	f7f7 fbb4 	bl	800084c <__aeabi_ddiv>
 80090e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e8:	f004 040f 	and.w	r4, r4, #15
 80090ec:	2603      	movs	r6, #3
 80090ee:	4d91      	ldr	r5, [pc, #580]	@ (8009334 <_dtoa_r+0x584>)
 80090f0:	b954      	cbnz	r4, 8009108 <_dtoa_r+0x358>
 80090f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090fa:	f7f7 fba7 	bl	800084c <__aeabi_ddiv>
 80090fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009102:	e028      	b.n	8009156 <_dtoa_r+0x3a6>
 8009104:	2602      	movs	r6, #2
 8009106:	e7f2      	b.n	80090ee <_dtoa_r+0x33e>
 8009108:	07e1      	lsls	r1, r4, #31
 800910a:	d508      	bpl.n	800911e <_dtoa_r+0x36e>
 800910c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009114:	f7f7 fa70 	bl	80005f8 <__aeabi_dmul>
 8009118:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800911c:	3601      	adds	r6, #1
 800911e:	1064      	asrs	r4, r4, #1
 8009120:	3508      	adds	r5, #8
 8009122:	e7e5      	b.n	80090f0 <_dtoa_r+0x340>
 8009124:	f000 80af 	beq.w	8009286 <_dtoa_r+0x4d6>
 8009128:	427c      	negs	r4, r7
 800912a:	4b81      	ldr	r3, [pc, #516]	@ (8009330 <_dtoa_r+0x580>)
 800912c:	4d81      	ldr	r5, [pc, #516]	@ (8009334 <_dtoa_r+0x584>)
 800912e:	f004 020f 	and.w	r2, r4, #15
 8009132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009146:	1124      	asrs	r4, r4, #4
 8009148:	2300      	movs	r3, #0
 800914a:	2602      	movs	r6, #2
 800914c:	2c00      	cmp	r4, #0
 800914e:	f040 808f 	bne.w	8009270 <_dtoa_r+0x4c0>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1d3      	bne.n	80090fe <_dtoa_r+0x34e>
 8009156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009158:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 8094 	beq.w	800928a <_dtoa_r+0x4da>
 8009162:	4b75      	ldr	r3, [pc, #468]	@ (8009338 <_dtoa_r+0x588>)
 8009164:	2200      	movs	r2, #0
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	f000 808b 	beq.w	800928a <_dtoa_r+0x4da>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 8087 	beq.w	800928a <_dtoa_r+0x4da>
 800917c:	f1bb 0f00 	cmp.w	fp, #0
 8009180:	dd34      	ble.n	80091ec <_dtoa_r+0x43c>
 8009182:	4620      	mov	r0, r4
 8009184:	4b6d      	ldr	r3, [pc, #436]	@ (800933c <_dtoa_r+0x58c>)
 8009186:	2200      	movs	r2, #0
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fa35 	bl	80005f8 <__aeabi_dmul>
 800918e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009192:	f107 38ff 	add.w	r8, r7, #4294967295
 8009196:	3601      	adds	r6, #1
 8009198:	465c      	mov	r4, fp
 800919a:	4630      	mov	r0, r6
 800919c:	f7f7 f9c2 	bl	8000524 <__aeabi_i2d>
 80091a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a4:	f7f7 fa28 	bl	80005f8 <__aeabi_dmul>
 80091a8:	4b65      	ldr	r3, [pc, #404]	@ (8009340 <_dtoa_r+0x590>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	f7f7 f86e 	bl	800028c <__adddf3>
 80091b0:	4605      	mov	r5, r0
 80091b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	d16a      	bne.n	8009290 <_dtoa_r+0x4e0>
 80091ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091be:	4b61      	ldr	r3, [pc, #388]	@ (8009344 <_dtoa_r+0x594>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 f861 	bl	8000288 <__aeabi_dsub>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091ce:	462a      	mov	r2, r5
 80091d0:	4633      	mov	r3, r6
 80091d2:	f7f7 fca1 	bl	8000b18 <__aeabi_dcmpgt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f040 8298 	bne.w	800970c <_dtoa_r+0x95c>
 80091dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091e0:	462a      	mov	r2, r5
 80091e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091e6:	f7f7 fc79 	bl	8000adc <__aeabi_dcmplt>
 80091ea:	bb38      	cbnz	r0, 800923c <_dtoa_r+0x48c>
 80091ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80091f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f2c0 8157 	blt.w	80094aa <_dtoa_r+0x6fa>
 80091fc:	2f0e      	cmp	r7, #14
 80091fe:	f300 8154 	bgt.w	80094aa <_dtoa_r+0x6fa>
 8009202:	4b4b      	ldr	r3, [pc, #300]	@ (8009330 <_dtoa_r+0x580>)
 8009204:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009208:	ed93 7b00 	vldr	d7, [r3]
 800920c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800920e:	2b00      	cmp	r3, #0
 8009210:	ed8d 7b00 	vstr	d7, [sp]
 8009214:	f280 80e5 	bge.w	80093e2 <_dtoa_r+0x632>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f300 80e1 	bgt.w	80093e2 <_dtoa_r+0x632>
 8009220:	d10c      	bne.n	800923c <_dtoa_r+0x48c>
 8009222:	4b48      	ldr	r3, [pc, #288]	@ (8009344 <_dtoa_r+0x594>)
 8009224:	2200      	movs	r2, #0
 8009226:	ec51 0b17 	vmov	r0, r1, d7
 800922a:	f7f7 f9e5 	bl	80005f8 <__aeabi_dmul>
 800922e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009232:	f7f7 fc67 	bl	8000b04 <__aeabi_dcmpge>
 8009236:	2800      	cmp	r0, #0
 8009238:	f000 8266 	beq.w	8009708 <_dtoa_r+0x958>
 800923c:	2400      	movs	r4, #0
 800923e:	4625      	mov	r5, r4
 8009240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009242:	4656      	mov	r6, sl
 8009244:	ea6f 0803 	mvn.w	r8, r3
 8009248:	2700      	movs	r7, #0
 800924a:	4621      	mov	r1, r4
 800924c:	4648      	mov	r0, r9
 800924e:	f000 fcbf 	bl	8009bd0 <_Bfree>
 8009252:	2d00      	cmp	r5, #0
 8009254:	f000 80bd 	beq.w	80093d2 <_dtoa_r+0x622>
 8009258:	b12f      	cbz	r7, 8009266 <_dtoa_r+0x4b6>
 800925a:	42af      	cmp	r7, r5
 800925c:	d003      	beq.n	8009266 <_dtoa_r+0x4b6>
 800925e:	4639      	mov	r1, r7
 8009260:	4648      	mov	r0, r9
 8009262:	f000 fcb5 	bl	8009bd0 <_Bfree>
 8009266:	4629      	mov	r1, r5
 8009268:	4648      	mov	r0, r9
 800926a:	f000 fcb1 	bl	8009bd0 <_Bfree>
 800926e:	e0b0      	b.n	80093d2 <_dtoa_r+0x622>
 8009270:	07e2      	lsls	r2, r4, #31
 8009272:	d505      	bpl.n	8009280 <_dtoa_r+0x4d0>
 8009274:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009278:	f7f7 f9be 	bl	80005f8 <__aeabi_dmul>
 800927c:	3601      	adds	r6, #1
 800927e:	2301      	movs	r3, #1
 8009280:	1064      	asrs	r4, r4, #1
 8009282:	3508      	adds	r5, #8
 8009284:	e762      	b.n	800914c <_dtoa_r+0x39c>
 8009286:	2602      	movs	r6, #2
 8009288:	e765      	b.n	8009156 <_dtoa_r+0x3a6>
 800928a:	9c03      	ldr	r4, [sp, #12]
 800928c:	46b8      	mov	r8, r7
 800928e:	e784      	b.n	800919a <_dtoa_r+0x3ea>
 8009290:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <_dtoa_r+0x580>)
 8009292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800929c:	4454      	add	r4, sl
 800929e:	2900      	cmp	r1, #0
 80092a0:	d054      	beq.n	800934c <_dtoa_r+0x59c>
 80092a2:	4929      	ldr	r1, [pc, #164]	@ (8009348 <_dtoa_r+0x598>)
 80092a4:	2000      	movs	r0, #0
 80092a6:	f7f7 fad1 	bl	800084c <__aeabi_ddiv>
 80092aa:	4633      	mov	r3, r6
 80092ac:	462a      	mov	r2, r5
 80092ae:	f7f6 ffeb 	bl	8000288 <__aeabi_dsub>
 80092b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092b6:	4656      	mov	r6, sl
 80092b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092bc:	f7f7 fc4c 	bl	8000b58 <__aeabi_d2iz>
 80092c0:	4605      	mov	r5, r0
 80092c2:	f7f7 f92f 	bl	8000524 <__aeabi_i2d>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ce:	f7f6 ffdb 	bl	8000288 <__aeabi_dsub>
 80092d2:	3530      	adds	r5, #48	@ 0x30
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092dc:	f806 5b01 	strb.w	r5, [r6], #1
 80092e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092e4:	f7f7 fbfa 	bl	8000adc <__aeabi_dcmplt>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d172      	bne.n	80093d2 <_dtoa_r+0x622>
 80092ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092f0:	4911      	ldr	r1, [pc, #68]	@ (8009338 <_dtoa_r+0x588>)
 80092f2:	2000      	movs	r0, #0
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092fc:	f7f7 fbee 	bl	8000adc <__aeabi_dcmplt>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 80b4 	bne.w	800946e <_dtoa_r+0x6be>
 8009306:	42a6      	cmp	r6, r4
 8009308:	f43f af70 	beq.w	80091ec <_dtoa_r+0x43c>
 800930c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009310:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <_dtoa_r+0x58c>)
 8009312:	2200      	movs	r2, #0
 8009314:	f7f7 f970 	bl	80005f8 <__aeabi_dmul>
 8009318:	4b08      	ldr	r3, [pc, #32]	@ (800933c <_dtoa_r+0x58c>)
 800931a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800931e:	2200      	movs	r2, #0
 8009320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800932c:	e7c4      	b.n	80092b8 <_dtoa_r+0x508>
 800932e:	bf00      	nop
 8009330:	0800ab28 	.word	0x0800ab28
 8009334:	0800ab00 	.word	0x0800ab00
 8009338:	3ff00000 	.word	0x3ff00000
 800933c:	40240000 	.word	0x40240000
 8009340:	401c0000 	.word	0x401c0000
 8009344:	40140000 	.word	0x40140000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	f7f7 f952 	bl	80005f8 <__aeabi_dmul>
 8009354:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009358:	9413      	str	r4, [sp, #76]	@ 0x4c
 800935a:	4656      	mov	r6, sl
 800935c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009360:	f7f7 fbfa 	bl	8000b58 <__aeabi_d2iz>
 8009364:	4605      	mov	r5, r0
 8009366:	f7f7 f8dd 	bl	8000524 <__aeabi_i2d>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009372:	f7f6 ff89 	bl	8000288 <__aeabi_dsub>
 8009376:	3530      	adds	r5, #48	@ 0x30
 8009378:	f806 5b01 	strb.w	r5, [r6], #1
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	42a6      	cmp	r6, r4
 8009382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	d124      	bne.n	80093d6 <_dtoa_r+0x626>
 800938c:	4baf      	ldr	r3, [pc, #700]	@ (800964c <_dtoa_r+0x89c>)
 800938e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009392:	f7f6 ff7b 	bl	800028c <__adddf3>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800939e:	f7f7 fbbb 	bl	8000b18 <__aeabi_dcmpgt>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d163      	bne.n	800946e <_dtoa_r+0x6be>
 80093a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80093aa:	49a8      	ldr	r1, [pc, #672]	@ (800964c <_dtoa_r+0x89c>)
 80093ac:	2000      	movs	r0, #0
 80093ae:	f7f6 ff6b 	bl	8000288 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093ba:	f7f7 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f af14 	beq.w	80091ec <_dtoa_r+0x43c>
 80093c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80093c6:	1e73      	subs	r3, r6, #1
 80093c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093ce:	2b30      	cmp	r3, #48	@ 0x30
 80093d0:	d0f8      	beq.n	80093c4 <_dtoa_r+0x614>
 80093d2:	4647      	mov	r7, r8
 80093d4:	e03b      	b.n	800944e <_dtoa_r+0x69e>
 80093d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009650 <_dtoa_r+0x8a0>)
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093e0:	e7bc      	b.n	800935c <_dtoa_r+0x5ac>
 80093e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80093e6:	4656      	mov	r6, sl
 80093e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 fa2c 	bl	800084c <__aeabi_ddiv>
 80093f4:	f7f7 fbb0 	bl	8000b58 <__aeabi_d2iz>
 80093f8:	4680      	mov	r8, r0
 80093fa:	f7f7 f893 	bl	8000524 <__aeabi_i2d>
 80093fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009402:	f7f7 f8f9 	bl	80005f8 <__aeabi_dmul>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4620      	mov	r0, r4
 800940c:	4629      	mov	r1, r5
 800940e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009412:	f7f6 ff39 	bl	8000288 <__aeabi_dsub>
 8009416:	f806 4b01 	strb.w	r4, [r6], #1
 800941a:	9d03      	ldr	r5, [sp, #12]
 800941c:	eba6 040a 	sub.w	r4, r6, sl
 8009420:	42a5      	cmp	r5, r4
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	d133      	bne.n	8009490 <_dtoa_r+0x6e0>
 8009428:	f7f6 ff30 	bl	800028c <__adddf3>
 800942c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	f7f7 fb70 	bl	8000b18 <__aeabi_dcmpgt>
 8009438:	b9c0      	cbnz	r0, 800946c <_dtoa_r+0x6bc>
 800943a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009446:	b110      	cbz	r0, 800944e <_dtoa_r+0x69e>
 8009448:	f018 0f01 	tst.w	r8, #1
 800944c:	d10e      	bne.n	800946c <_dtoa_r+0x6bc>
 800944e:	9902      	ldr	r1, [sp, #8]
 8009450:	4648      	mov	r0, r9
 8009452:	f000 fbbd 	bl	8009bd0 <_Bfree>
 8009456:	2300      	movs	r3, #0
 8009458:	7033      	strb	r3, [r6, #0]
 800945a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800945c:	3701      	adds	r7, #1
 800945e:	601f      	str	r7, [r3, #0]
 8009460:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 824b 	beq.w	80098fe <_dtoa_r+0xb4e>
 8009468:	601e      	str	r6, [r3, #0]
 800946a:	e248      	b.n	80098fe <_dtoa_r+0xb4e>
 800946c:	46b8      	mov	r8, r7
 800946e:	4633      	mov	r3, r6
 8009470:	461e      	mov	r6, r3
 8009472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009476:	2a39      	cmp	r2, #57	@ 0x39
 8009478:	d106      	bne.n	8009488 <_dtoa_r+0x6d8>
 800947a:	459a      	cmp	sl, r3
 800947c:	d1f8      	bne.n	8009470 <_dtoa_r+0x6c0>
 800947e:	2230      	movs	r2, #48	@ 0x30
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	f88a 2000 	strb.w	r2, [sl]
 8009488:	781a      	ldrb	r2, [r3, #0]
 800948a:	3201      	adds	r2, #1
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	e7a0      	b.n	80093d2 <_dtoa_r+0x622>
 8009490:	4b6f      	ldr	r3, [pc, #444]	@ (8009650 <_dtoa_r+0x8a0>)
 8009492:	2200      	movs	r2, #0
 8009494:	f7f7 f8b0 	bl	80005f8 <__aeabi_dmul>
 8009498:	2200      	movs	r2, #0
 800949a:	2300      	movs	r3, #0
 800949c:	4604      	mov	r4, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	f7f7 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d09f      	beq.n	80093e8 <_dtoa_r+0x638>
 80094a8:	e7d1      	b.n	800944e <_dtoa_r+0x69e>
 80094aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	f000 80ea 	beq.w	8009686 <_dtoa_r+0x8d6>
 80094b2:	9a07      	ldr	r2, [sp, #28]
 80094b4:	2a01      	cmp	r2, #1
 80094b6:	f300 80cd 	bgt.w	8009654 <_dtoa_r+0x8a4>
 80094ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094bc:	2a00      	cmp	r2, #0
 80094be:	f000 80c1 	beq.w	8009644 <_dtoa_r+0x894>
 80094c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094c6:	9c08      	ldr	r4, [sp, #32]
 80094c8:	9e00      	ldr	r6, [sp, #0]
 80094ca:	9a00      	ldr	r2, [sp, #0]
 80094cc:	441a      	add	r2, r3
 80094ce:	9200      	str	r2, [sp, #0]
 80094d0:	9a06      	ldr	r2, [sp, #24]
 80094d2:	2101      	movs	r1, #1
 80094d4:	441a      	add	r2, r3
 80094d6:	4648      	mov	r0, r9
 80094d8:	9206      	str	r2, [sp, #24]
 80094da:	f000 fc2d 	bl	8009d38 <__i2b>
 80094de:	4605      	mov	r5, r0
 80094e0:	b166      	cbz	r6, 80094fc <_dtoa_r+0x74c>
 80094e2:	9b06      	ldr	r3, [sp, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd09      	ble.n	80094fc <_dtoa_r+0x74c>
 80094e8:	42b3      	cmp	r3, r6
 80094ea:	9a00      	ldr	r2, [sp, #0]
 80094ec:	bfa8      	it	ge
 80094ee:	4633      	movge	r3, r6
 80094f0:	1ad2      	subs	r2, r2, r3
 80094f2:	9200      	str	r2, [sp, #0]
 80094f4:	9a06      	ldr	r2, [sp, #24]
 80094f6:	1af6      	subs	r6, r6, r3
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	9306      	str	r3, [sp, #24]
 80094fc:	9b08      	ldr	r3, [sp, #32]
 80094fe:	b30b      	cbz	r3, 8009544 <_dtoa_r+0x794>
 8009500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80c6 	beq.w	8009694 <_dtoa_r+0x8e4>
 8009508:	2c00      	cmp	r4, #0
 800950a:	f000 80c0 	beq.w	800968e <_dtoa_r+0x8de>
 800950e:	4629      	mov	r1, r5
 8009510:	4622      	mov	r2, r4
 8009512:	4648      	mov	r0, r9
 8009514:	f000 fcc8 	bl	8009ea8 <__pow5mult>
 8009518:	9a02      	ldr	r2, [sp, #8]
 800951a:	4601      	mov	r1, r0
 800951c:	4605      	mov	r5, r0
 800951e:	4648      	mov	r0, r9
 8009520:	f000 fc20 	bl	8009d64 <__multiply>
 8009524:	9902      	ldr	r1, [sp, #8]
 8009526:	4680      	mov	r8, r0
 8009528:	4648      	mov	r0, r9
 800952a:	f000 fb51 	bl	8009bd0 <_Bfree>
 800952e:	9b08      	ldr	r3, [sp, #32]
 8009530:	1b1b      	subs	r3, r3, r4
 8009532:	9308      	str	r3, [sp, #32]
 8009534:	f000 80b1 	beq.w	800969a <_dtoa_r+0x8ea>
 8009538:	9a08      	ldr	r2, [sp, #32]
 800953a:	4641      	mov	r1, r8
 800953c:	4648      	mov	r0, r9
 800953e:	f000 fcb3 	bl	8009ea8 <__pow5mult>
 8009542:	9002      	str	r0, [sp, #8]
 8009544:	2101      	movs	r1, #1
 8009546:	4648      	mov	r0, r9
 8009548:	f000 fbf6 	bl	8009d38 <__i2b>
 800954c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800954e:	4604      	mov	r4, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81d8 	beq.w	8009906 <_dtoa_r+0xb56>
 8009556:	461a      	mov	r2, r3
 8009558:	4601      	mov	r1, r0
 800955a:	4648      	mov	r0, r9
 800955c:	f000 fca4 	bl	8009ea8 <__pow5mult>
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	2b01      	cmp	r3, #1
 8009564:	4604      	mov	r4, r0
 8009566:	f300 809f 	bgt.w	80096a8 <_dtoa_r+0x8f8>
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8097 	bne.w	80096a0 <_dtoa_r+0x8f0>
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8093 	bne.w	80096a4 <_dtoa_r+0x8f4>
 800957e:	9b05      	ldr	r3, [sp, #20]
 8009580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	051b      	lsls	r3, r3, #20
 8009588:	b133      	cbz	r3, 8009598 <_dtoa_r+0x7e8>
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	9b06      	ldr	r3, [sp, #24]
 8009592:	3301      	adds	r3, #1
 8009594:	9306      	str	r3, [sp, #24]
 8009596:	2301      	movs	r3, #1
 8009598:	9308      	str	r3, [sp, #32]
 800959a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 81b8 	beq.w	8009912 <_dtoa_r+0xb62>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a8:	6918      	ldr	r0, [r3, #16]
 80095aa:	f000 fb79 	bl	8009ca0 <__hi0bits>
 80095ae:	f1c0 0020 	rsb	r0, r0, #32
 80095b2:	9b06      	ldr	r3, [sp, #24]
 80095b4:	4418      	add	r0, r3
 80095b6:	f010 001f 	ands.w	r0, r0, #31
 80095ba:	f000 8082 	beq.w	80096c2 <_dtoa_r+0x912>
 80095be:	f1c0 0320 	rsb	r3, r0, #32
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	dd73      	ble.n	80096ae <_dtoa_r+0x8fe>
 80095c6:	9b00      	ldr	r3, [sp, #0]
 80095c8:	f1c0 001c 	rsb	r0, r0, #28
 80095cc:	4403      	add	r3, r0
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	9b06      	ldr	r3, [sp, #24]
 80095d2:	4403      	add	r3, r0
 80095d4:	4406      	add	r6, r0
 80095d6:	9306      	str	r3, [sp, #24]
 80095d8:	9b00      	ldr	r3, [sp, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dd05      	ble.n	80095ea <_dtoa_r+0x83a>
 80095de:	9902      	ldr	r1, [sp, #8]
 80095e0:	461a      	mov	r2, r3
 80095e2:	4648      	mov	r0, r9
 80095e4:	f000 fcba 	bl	8009f5c <__lshift>
 80095e8:	9002      	str	r0, [sp, #8]
 80095ea:	9b06      	ldr	r3, [sp, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dd05      	ble.n	80095fc <_dtoa_r+0x84c>
 80095f0:	4621      	mov	r1, r4
 80095f2:	461a      	mov	r2, r3
 80095f4:	4648      	mov	r0, r9
 80095f6:	f000 fcb1 	bl	8009f5c <__lshift>
 80095fa:	4604      	mov	r4, r0
 80095fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d061      	beq.n	80096c6 <_dtoa_r+0x916>
 8009602:	9802      	ldr	r0, [sp, #8]
 8009604:	4621      	mov	r1, r4
 8009606:	f000 fd15 	bl	800a034 <__mcmp>
 800960a:	2800      	cmp	r0, #0
 800960c:	da5b      	bge.n	80096c6 <_dtoa_r+0x916>
 800960e:	2300      	movs	r3, #0
 8009610:	9902      	ldr	r1, [sp, #8]
 8009612:	220a      	movs	r2, #10
 8009614:	4648      	mov	r0, r9
 8009616:	f000 fafd 	bl	8009c14 <__multadd>
 800961a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 8177 	beq.w	8009916 <_dtoa_r+0xb66>
 8009628:	4629      	mov	r1, r5
 800962a:	2300      	movs	r3, #0
 800962c:	220a      	movs	r2, #10
 800962e:	4648      	mov	r0, r9
 8009630:	f000 faf0 	bl	8009c14 <__multadd>
 8009634:	f1bb 0f00 	cmp.w	fp, #0
 8009638:	4605      	mov	r5, r0
 800963a:	dc6f      	bgt.n	800971c <_dtoa_r+0x96c>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	2b02      	cmp	r3, #2
 8009640:	dc49      	bgt.n	80096d6 <_dtoa_r+0x926>
 8009642:	e06b      	b.n	800971c <_dtoa_r+0x96c>
 8009644:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009646:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800964a:	e73c      	b.n	80094c6 <_dtoa_r+0x716>
 800964c:	3fe00000 	.word	0x3fe00000
 8009650:	40240000 	.word	0x40240000
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1e5c      	subs	r4, r3, #1
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	42a3      	cmp	r3, r4
 800965c:	db09      	blt.n	8009672 <_dtoa_r+0x8c2>
 800965e:	1b1c      	subs	r4, r3, r4
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f6bf af30 	bge.w	80094c8 <_dtoa_r+0x718>
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	9a03      	ldr	r2, [sp, #12]
 800966c:	1a9e      	subs	r6, r3, r2
 800966e:	2300      	movs	r3, #0
 8009670:	e72b      	b.n	80094ca <_dtoa_r+0x71a>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009676:	9408      	str	r4, [sp, #32]
 8009678:	1ae3      	subs	r3, r4, r3
 800967a:	441a      	add	r2, r3
 800967c:	9e00      	ldr	r6, [sp, #0]
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	920d      	str	r2, [sp, #52]	@ 0x34
 8009682:	2400      	movs	r4, #0
 8009684:	e721      	b.n	80094ca <_dtoa_r+0x71a>
 8009686:	9c08      	ldr	r4, [sp, #32]
 8009688:	9e00      	ldr	r6, [sp, #0]
 800968a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800968c:	e728      	b.n	80094e0 <_dtoa_r+0x730>
 800968e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009692:	e751      	b.n	8009538 <_dtoa_r+0x788>
 8009694:	9a08      	ldr	r2, [sp, #32]
 8009696:	9902      	ldr	r1, [sp, #8]
 8009698:	e750      	b.n	800953c <_dtoa_r+0x78c>
 800969a:	f8cd 8008 	str.w	r8, [sp, #8]
 800969e:	e751      	b.n	8009544 <_dtoa_r+0x794>
 80096a0:	2300      	movs	r3, #0
 80096a2:	e779      	b.n	8009598 <_dtoa_r+0x7e8>
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	e777      	b.n	8009598 <_dtoa_r+0x7e8>
 80096a8:	2300      	movs	r3, #0
 80096aa:	9308      	str	r3, [sp, #32]
 80096ac:	e779      	b.n	80095a2 <_dtoa_r+0x7f2>
 80096ae:	d093      	beq.n	80095d8 <_dtoa_r+0x828>
 80096b0:	9a00      	ldr	r2, [sp, #0]
 80096b2:	331c      	adds	r3, #28
 80096b4:	441a      	add	r2, r3
 80096b6:	9200      	str	r2, [sp, #0]
 80096b8:	9a06      	ldr	r2, [sp, #24]
 80096ba:	441a      	add	r2, r3
 80096bc:	441e      	add	r6, r3
 80096be:	9206      	str	r2, [sp, #24]
 80096c0:	e78a      	b.n	80095d8 <_dtoa_r+0x828>
 80096c2:	4603      	mov	r3, r0
 80096c4:	e7f4      	b.n	80096b0 <_dtoa_r+0x900>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	46b8      	mov	r8, r7
 80096cc:	dc20      	bgt.n	8009710 <_dtoa_r+0x960>
 80096ce:	469b      	mov	fp, r3
 80096d0:	9b07      	ldr	r3, [sp, #28]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	dd1e      	ble.n	8009714 <_dtoa_r+0x964>
 80096d6:	f1bb 0f00 	cmp.w	fp, #0
 80096da:	f47f adb1 	bne.w	8009240 <_dtoa_r+0x490>
 80096de:	4621      	mov	r1, r4
 80096e0:	465b      	mov	r3, fp
 80096e2:	2205      	movs	r2, #5
 80096e4:	4648      	mov	r0, r9
 80096e6:	f000 fa95 	bl	8009c14 <__multadd>
 80096ea:	4601      	mov	r1, r0
 80096ec:	4604      	mov	r4, r0
 80096ee:	9802      	ldr	r0, [sp, #8]
 80096f0:	f000 fca0 	bl	800a034 <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	f77f ada3 	ble.w	8009240 <_dtoa_r+0x490>
 80096fa:	4656      	mov	r6, sl
 80096fc:	2331      	movs	r3, #49	@ 0x31
 80096fe:	f806 3b01 	strb.w	r3, [r6], #1
 8009702:	f108 0801 	add.w	r8, r8, #1
 8009706:	e59f      	b.n	8009248 <_dtoa_r+0x498>
 8009708:	9c03      	ldr	r4, [sp, #12]
 800970a:	46b8      	mov	r8, r7
 800970c:	4625      	mov	r5, r4
 800970e:	e7f4      	b.n	80096fa <_dtoa_r+0x94a>
 8009710:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8101 	beq.w	800991e <_dtoa_r+0xb6e>
 800971c:	2e00      	cmp	r6, #0
 800971e:	dd05      	ble.n	800972c <_dtoa_r+0x97c>
 8009720:	4629      	mov	r1, r5
 8009722:	4632      	mov	r2, r6
 8009724:	4648      	mov	r0, r9
 8009726:	f000 fc19 	bl	8009f5c <__lshift>
 800972a:	4605      	mov	r5, r0
 800972c:	9b08      	ldr	r3, [sp, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d05c      	beq.n	80097ec <_dtoa_r+0xa3c>
 8009732:	6869      	ldr	r1, [r5, #4]
 8009734:	4648      	mov	r0, r9
 8009736:	f000 fa0b 	bl	8009b50 <_Balloc>
 800973a:	4606      	mov	r6, r0
 800973c:	b928      	cbnz	r0, 800974a <_dtoa_r+0x99a>
 800973e:	4b82      	ldr	r3, [pc, #520]	@ (8009948 <_dtoa_r+0xb98>)
 8009740:	4602      	mov	r2, r0
 8009742:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009746:	f7ff bb4a 	b.w	8008dde <_dtoa_r+0x2e>
 800974a:	692a      	ldr	r2, [r5, #16]
 800974c:	3202      	adds	r2, #2
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	f105 010c 	add.w	r1, r5, #12
 8009754:	300c      	adds	r0, #12
 8009756:	f000 fff7 	bl	800a748 <memcpy>
 800975a:	2201      	movs	r2, #1
 800975c:	4631      	mov	r1, r6
 800975e:	4648      	mov	r0, r9
 8009760:	f000 fbfc 	bl	8009f5c <__lshift>
 8009764:	f10a 0301 	add.w	r3, sl, #1
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	eb0a 030b 	add.w	r3, sl, fp
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	462f      	mov	r7, r5
 8009778:	9306      	str	r3, [sp, #24]
 800977a:	4605      	mov	r5, r0
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	9802      	ldr	r0, [sp, #8]
 8009780:	4621      	mov	r1, r4
 8009782:	f103 3bff 	add.w	fp, r3, #4294967295
 8009786:	f7ff fa88 	bl	8008c9a <quorem>
 800978a:	4603      	mov	r3, r0
 800978c:	3330      	adds	r3, #48	@ 0x30
 800978e:	9003      	str	r0, [sp, #12]
 8009790:	4639      	mov	r1, r7
 8009792:	9802      	ldr	r0, [sp, #8]
 8009794:	9309      	str	r3, [sp, #36]	@ 0x24
 8009796:	f000 fc4d 	bl	800a034 <__mcmp>
 800979a:	462a      	mov	r2, r5
 800979c:	9004      	str	r0, [sp, #16]
 800979e:	4621      	mov	r1, r4
 80097a0:	4648      	mov	r0, r9
 80097a2:	f000 fc63 	bl	800a06c <__mdiff>
 80097a6:	68c2      	ldr	r2, [r0, #12]
 80097a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097aa:	4606      	mov	r6, r0
 80097ac:	bb02      	cbnz	r2, 80097f0 <_dtoa_r+0xa40>
 80097ae:	4601      	mov	r1, r0
 80097b0:	9802      	ldr	r0, [sp, #8]
 80097b2:	f000 fc3f 	bl	800a034 <__mcmp>
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	4602      	mov	r2, r0
 80097ba:	4631      	mov	r1, r6
 80097bc:	4648      	mov	r0, r9
 80097be:	920c      	str	r2, [sp, #48]	@ 0x30
 80097c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c2:	f000 fa05 	bl	8009bd0 <_Bfree>
 80097c6:	9b07      	ldr	r3, [sp, #28]
 80097c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097ca:	9e00      	ldr	r6, [sp, #0]
 80097cc:	ea42 0103 	orr.w	r1, r2, r3
 80097d0:	9b06      	ldr	r3, [sp, #24]
 80097d2:	4319      	orrs	r1, r3
 80097d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d6:	d10d      	bne.n	80097f4 <_dtoa_r+0xa44>
 80097d8:	2b39      	cmp	r3, #57	@ 0x39
 80097da:	d027      	beq.n	800982c <_dtoa_r+0xa7c>
 80097dc:	9a04      	ldr	r2, [sp, #16]
 80097de:	2a00      	cmp	r2, #0
 80097e0:	dd01      	ble.n	80097e6 <_dtoa_r+0xa36>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	3331      	adds	r3, #49	@ 0x31
 80097e6:	f88b 3000 	strb.w	r3, [fp]
 80097ea:	e52e      	b.n	800924a <_dtoa_r+0x49a>
 80097ec:	4628      	mov	r0, r5
 80097ee:	e7b9      	b.n	8009764 <_dtoa_r+0x9b4>
 80097f0:	2201      	movs	r2, #1
 80097f2:	e7e2      	b.n	80097ba <_dtoa_r+0xa0a>
 80097f4:	9904      	ldr	r1, [sp, #16]
 80097f6:	2900      	cmp	r1, #0
 80097f8:	db04      	blt.n	8009804 <_dtoa_r+0xa54>
 80097fa:	9807      	ldr	r0, [sp, #28]
 80097fc:	4301      	orrs	r1, r0
 80097fe:	9806      	ldr	r0, [sp, #24]
 8009800:	4301      	orrs	r1, r0
 8009802:	d120      	bne.n	8009846 <_dtoa_r+0xa96>
 8009804:	2a00      	cmp	r2, #0
 8009806:	ddee      	ble.n	80097e6 <_dtoa_r+0xa36>
 8009808:	9902      	ldr	r1, [sp, #8]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	2201      	movs	r2, #1
 800980e:	4648      	mov	r0, r9
 8009810:	f000 fba4 	bl	8009f5c <__lshift>
 8009814:	4621      	mov	r1, r4
 8009816:	9002      	str	r0, [sp, #8]
 8009818:	f000 fc0c 	bl	800a034 <__mcmp>
 800981c:	2800      	cmp	r0, #0
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	dc02      	bgt.n	8009828 <_dtoa_r+0xa78>
 8009822:	d1e0      	bne.n	80097e6 <_dtoa_r+0xa36>
 8009824:	07da      	lsls	r2, r3, #31
 8009826:	d5de      	bpl.n	80097e6 <_dtoa_r+0xa36>
 8009828:	2b39      	cmp	r3, #57	@ 0x39
 800982a:	d1da      	bne.n	80097e2 <_dtoa_r+0xa32>
 800982c:	2339      	movs	r3, #57	@ 0x39
 800982e:	f88b 3000 	strb.w	r3, [fp]
 8009832:	4633      	mov	r3, r6
 8009834:	461e      	mov	r6, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800983c:	2a39      	cmp	r2, #57	@ 0x39
 800983e:	d04e      	beq.n	80098de <_dtoa_r+0xb2e>
 8009840:	3201      	adds	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
 8009844:	e501      	b.n	800924a <_dtoa_r+0x49a>
 8009846:	2a00      	cmp	r2, #0
 8009848:	dd03      	ble.n	8009852 <_dtoa_r+0xaa2>
 800984a:	2b39      	cmp	r3, #57	@ 0x39
 800984c:	d0ee      	beq.n	800982c <_dtoa_r+0xa7c>
 800984e:	3301      	adds	r3, #1
 8009850:	e7c9      	b.n	80097e6 <_dtoa_r+0xa36>
 8009852:	9a00      	ldr	r2, [sp, #0]
 8009854:	9908      	ldr	r1, [sp, #32]
 8009856:	f802 3c01 	strb.w	r3, [r2, #-1]
 800985a:	428a      	cmp	r2, r1
 800985c:	d028      	beq.n	80098b0 <_dtoa_r+0xb00>
 800985e:	9902      	ldr	r1, [sp, #8]
 8009860:	2300      	movs	r3, #0
 8009862:	220a      	movs	r2, #10
 8009864:	4648      	mov	r0, r9
 8009866:	f000 f9d5 	bl	8009c14 <__multadd>
 800986a:	42af      	cmp	r7, r5
 800986c:	9002      	str	r0, [sp, #8]
 800986e:	f04f 0300 	mov.w	r3, #0
 8009872:	f04f 020a 	mov.w	r2, #10
 8009876:	4639      	mov	r1, r7
 8009878:	4648      	mov	r0, r9
 800987a:	d107      	bne.n	800988c <_dtoa_r+0xadc>
 800987c:	f000 f9ca 	bl	8009c14 <__multadd>
 8009880:	4607      	mov	r7, r0
 8009882:	4605      	mov	r5, r0
 8009884:	9b00      	ldr	r3, [sp, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	e777      	b.n	800977c <_dtoa_r+0x9cc>
 800988c:	f000 f9c2 	bl	8009c14 <__multadd>
 8009890:	4629      	mov	r1, r5
 8009892:	4607      	mov	r7, r0
 8009894:	2300      	movs	r3, #0
 8009896:	220a      	movs	r2, #10
 8009898:	4648      	mov	r0, r9
 800989a:	f000 f9bb 	bl	8009c14 <__multadd>
 800989e:	4605      	mov	r5, r0
 80098a0:	e7f0      	b.n	8009884 <_dtoa_r+0xad4>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	bfcc      	ite	gt
 80098a8:	465e      	movgt	r6, fp
 80098aa:	2601      	movle	r6, #1
 80098ac:	4456      	add	r6, sl
 80098ae:	2700      	movs	r7, #0
 80098b0:	9902      	ldr	r1, [sp, #8]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	2201      	movs	r2, #1
 80098b6:	4648      	mov	r0, r9
 80098b8:	f000 fb50 	bl	8009f5c <__lshift>
 80098bc:	4621      	mov	r1, r4
 80098be:	9002      	str	r0, [sp, #8]
 80098c0:	f000 fbb8 	bl	800a034 <__mcmp>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	dcb4      	bgt.n	8009832 <_dtoa_r+0xa82>
 80098c8:	d102      	bne.n	80098d0 <_dtoa_r+0xb20>
 80098ca:	9b00      	ldr	r3, [sp, #0]
 80098cc:	07db      	lsls	r3, r3, #31
 80098ce:	d4b0      	bmi.n	8009832 <_dtoa_r+0xa82>
 80098d0:	4633      	mov	r3, r6
 80098d2:	461e      	mov	r6, r3
 80098d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d8:	2a30      	cmp	r2, #48	@ 0x30
 80098da:	d0fa      	beq.n	80098d2 <_dtoa_r+0xb22>
 80098dc:	e4b5      	b.n	800924a <_dtoa_r+0x49a>
 80098de:	459a      	cmp	sl, r3
 80098e0:	d1a8      	bne.n	8009834 <_dtoa_r+0xa84>
 80098e2:	2331      	movs	r3, #49	@ 0x31
 80098e4:	f108 0801 	add.w	r8, r8, #1
 80098e8:	f88a 3000 	strb.w	r3, [sl]
 80098ec:	e4ad      	b.n	800924a <_dtoa_r+0x49a>
 80098ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800994c <_dtoa_r+0xb9c>
 80098f4:	b11b      	cbz	r3, 80098fe <_dtoa_r+0xb4e>
 80098f6:	f10a 0308 	add.w	r3, sl, #8
 80098fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	4650      	mov	r0, sl
 8009900:	b017      	add	sp, #92	@ 0x5c
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	9b07      	ldr	r3, [sp, #28]
 8009908:	2b01      	cmp	r3, #1
 800990a:	f77f ae2e 	ble.w	800956a <_dtoa_r+0x7ba>
 800990e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	2001      	movs	r0, #1
 8009914:	e64d      	b.n	80095b2 <_dtoa_r+0x802>
 8009916:	f1bb 0f00 	cmp.w	fp, #0
 800991a:	f77f aed9 	ble.w	80096d0 <_dtoa_r+0x920>
 800991e:	4656      	mov	r6, sl
 8009920:	9802      	ldr	r0, [sp, #8]
 8009922:	4621      	mov	r1, r4
 8009924:	f7ff f9b9 	bl	8008c9a <quorem>
 8009928:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800992c:	f806 3b01 	strb.w	r3, [r6], #1
 8009930:	eba6 020a 	sub.w	r2, r6, sl
 8009934:	4593      	cmp	fp, r2
 8009936:	ddb4      	ble.n	80098a2 <_dtoa_r+0xaf2>
 8009938:	9902      	ldr	r1, [sp, #8]
 800993a:	2300      	movs	r3, #0
 800993c:	220a      	movs	r2, #10
 800993e:	4648      	mov	r0, r9
 8009940:	f000 f968 	bl	8009c14 <__multadd>
 8009944:	9002      	str	r0, [sp, #8]
 8009946:	e7eb      	b.n	8009920 <_dtoa_r+0xb70>
 8009948:	0800aa2c 	.word	0x0800aa2c
 800994c:	0800a9b0 	.word	0x0800a9b0

08009950 <_free_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4605      	mov	r5, r0
 8009954:	2900      	cmp	r1, #0
 8009956:	d041      	beq.n	80099dc <_free_r+0x8c>
 8009958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995c:	1f0c      	subs	r4, r1, #4
 800995e:	2b00      	cmp	r3, #0
 8009960:	bfb8      	it	lt
 8009962:	18e4      	addlt	r4, r4, r3
 8009964:	f000 f8e8 	bl	8009b38 <__malloc_lock>
 8009968:	4a1d      	ldr	r2, [pc, #116]	@ (80099e0 <_free_r+0x90>)
 800996a:	6813      	ldr	r3, [r2, #0]
 800996c:	b933      	cbnz	r3, 800997c <_free_r+0x2c>
 800996e:	6063      	str	r3, [r4, #4]
 8009970:	6014      	str	r4, [r2, #0]
 8009972:	4628      	mov	r0, r5
 8009974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009978:	f000 b8e4 	b.w	8009b44 <__malloc_unlock>
 800997c:	42a3      	cmp	r3, r4
 800997e:	d908      	bls.n	8009992 <_free_r+0x42>
 8009980:	6820      	ldr	r0, [r4, #0]
 8009982:	1821      	adds	r1, r4, r0
 8009984:	428b      	cmp	r3, r1
 8009986:	bf01      	itttt	eq
 8009988:	6819      	ldreq	r1, [r3, #0]
 800998a:	685b      	ldreq	r3, [r3, #4]
 800998c:	1809      	addeq	r1, r1, r0
 800998e:	6021      	streq	r1, [r4, #0]
 8009990:	e7ed      	b.n	800996e <_free_r+0x1e>
 8009992:	461a      	mov	r2, r3
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	b10b      	cbz	r3, 800999c <_free_r+0x4c>
 8009998:	42a3      	cmp	r3, r4
 800999a:	d9fa      	bls.n	8009992 <_free_r+0x42>
 800999c:	6811      	ldr	r1, [r2, #0]
 800999e:	1850      	adds	r0, r2, r1
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d10b      	bne.n	80099bc <_free_r+0x6c>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	4401      	add	r1, r0
 80099a8:	1850      	adds	r0, r2, r1
 80099aa:	4283      	cmp	r3, r0
 80099ac:	6011      	str	r1, [r2, #0]
 80099ae:	d1e0      	bne.n	8009972 <_free_r+0x22>
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	6053      	str	r3, [r2, #4]
 80099b6:	4408      	add	r0, r1
 80099b8:	6010      	str	r0, [r2, #0]
 80099ba:	e7da      	b.n	8009972 <_free_r+0x22>
 80099bc:	d902      	bls.n	80099c4 <_free_r+0x74>
 80099be:	230c      	movs	r3, #12
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	e7d6      	b.n	8009972 <_free_r+0x22>
 80099c4:	6820      	ldr	r0, [r4, #0]
 80099c6:	1821      	adds	r1, r4, r0
 80099c8:	428b      	cmp	r3, r1
 80099ca:	bf04      	itt	eq
 80099cc:	6819      	ldreq	r1, [r3, #0]
 80099ce:	685b      	ldreq	r3, [r3, #4]
 80099d0:	6063      	str	r3, [r4, #4]
 80099d2:	bf04      	itt	eq
 80099d4:	1809      	addeq	r1, r1, r0
 80099d6:	6021      	streq	r1, [r4, #0]
 80099d8:	6054      	str	r4, [r2, #4]
 80099da:	e7ca      	b.n	8009972 <_free_r+0x22>
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	20008778 	.word	0x20008778

080099e4 <malloc>:
 80099e4:	4b02      	ldr	r3, [pc, #8]	@ (80099f0 <malloc+0xc>)
 80099e6:	4601      	mov	r1, r0
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f000 b825 	b.w	8009a38 <_malloc_r>
 80099ee:	bf00      	nop
 80099f0:	20000018 	.word	0x20000018

080099f4 <sbrk_aligned>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009a34 <sbrk_aligned+0x40>)
 80099f8:	460c      	mov	r4, r1
 80099fa:	6831      	ldr	r1, [r6, #0]
 80099fc:	4605      	mov	r5, r0
 80099fe:	b911      	cbnz	r1, 8009a06 <sbrk_aligned+0x12>
 8009a00:	f000 fe92 	bl	800a728 <_sbrk_r>
 8009a04:	6030      	str	r0, [r6, #0]
 8009a06:	4621      	mov	r1, r4
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f000 fe8d 	bl	800a728 <_sbrk_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d103      	bne.n	8009a1a <sbrk_aligned+0x26>
 8009a12:	f04f 34ff 	mov.w	r4, #4294967295
 8009a16:	4620      	mov	r0, r4
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	1cc4      	adds	r4, r0, #3
 8009a1c:	f024 0403 	bic.w	r4, r4, #3
 8009a20:	42a0      	cmp	r0, r4
 8009a22:	d0f8      	beq.n	8009a16 <sbrk_aligned+0x22>
 8009a24:	1a21      	subs	r1, r4, r0
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 fe7e 	bl	800a728 <_sbrk_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d1f2      	bne.n	8009a16 <sbrk_aligned+0x22>
 8009a30:	e7ef      	b.n	8009a12 <sbrk_aligned+0x1e>
 8009a32:	bf00      	nop
 8009a34:	20008774 	.word	0x20008774

08009a38 <_malloc_r>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	1ccd      	adds	r5, r1, #3
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	db01      	blt.n	8009a54 <_malloc_r+0x1c>
 8009a50:	42a9      	cmp	r1, r5
 8009a52:	d904      	bls.n	8009a5e <_malloc_r+0x26>
 8009a54:	230c      	movs	r3, #12
 8009a56:	6033      	str	r3, [r6, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b34 <_malloc_r+0xfc>
 8009a62:	f000 f869 	bl	8009b38 <__malloc_lock>
 8009a66:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	bb44      	cbnz	r4, 8009ac0 <_malloc_r+0x88>
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff ffbf 	bl	80099f4 <sbrk_aligned>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	4604      	mov	r4, r0
 8009a7a:	d158      	bne.n	8009b2e <_malloc_r+0xf6>
 8009a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a80:	4627      	mov	r7, r4
 8009a82:	2f00      	cmp	r7, #0
 8009a84:	d143      	bne.n	8009b0e <_malloc_r+0xd6>
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	d04b      	beq.n	8009b22 <_malloc_r+0xea>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4630      	mov	r0, r6
 8009a90:	eb04 0903 	add.w	r9, r4, r3
 8009a94:	f000 fe48 	bl	800a728 <_sbrk_r>
 8009a98:	4581      	cmp	r9, r0
 8009a9a:	d142      	bne.n	8009b22 <_malloc_r+0xea>
 8009a9c:	6821      	ldr	r1, [r4, #0]
 8009a9e:	1a6d      	subs	r5, r5, r1
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff ffa6 	bl	80099f4 <sbrk_aligned>
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d03a      	beq.n	8009b22 <_malloc_r+0xea>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	442b      	add	r3, r5
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	bb62      	cbnz	r2, 8009b14 <_malloc_r+0xdc>
 8009aba:	f8c8 7000 	str.w	r7, [r8]
 8009abe:	e00f      	b.n	8009ae0 <_malloc_r+0xa8>
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	1b52      	subs	r2, r2, r5
 8009ac4:	d420      	bmi.n	8009b08 <_malloc_r+0xd0>
 8009ac6:	2a0b      	cmp	r2, #11
 8009ac8:	d917      	bls.n	8009afa <_malloc_r+0xc2>
 8009aca:	1961      	adds	r1, r4, r5
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	6025      	str	r5, [r4, #0]
 8009ad0:	bf18      	it	ne
 8009ad2:	6059      	strne	r1, [r3, #4]
 8009ad4:	6863      	ldr	r3, [r4, #4]
 8009ad6:	bf08      	it	eq
 8009ad8:	f8c8 1000 	streq.w	r1, [r8]
 8009adc:	5162      	str	r2, [r4, r5]
 8009ade:	604b      	str	r3, [r1, #4]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 f82f 	bl	8009b44 <__malloc_unlock>
 8009ae6:	f104 000b 	add.w	r0, r4, #11
 8009aea:	1d23      	adds	r3, r4, #4
 8009aec:	f020 0007 	bic.w	r0, r0, #7
 8009af0:	1ac2      	subs	r2, r0, r3
 8009af2:	bf1c      	itt	ne
 8009af4:	1a1b      	subne	r3, r3, r0
 8009af6:	50a3      	strne	r3, [r4, r2]
 8009af8:	e7af      	b.n	8009a5a <_malloc_r+0x22>
 8009afa:	6862      	ldr	r2, [r4, #4]
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	bf0c      	ite	eq
 8009b00:	f8c8 2000 	streq.w	r2, [r8]
 8009b04:	605a      	strne	r2, [r3, #4]
 8009b06:	e7eb      	b.n	8009ae0 <_malloc_r+0xa8>
 8009b08:	4623      	mov	r3, r4
 8009b0a:	6864      	ldr	r4, [r4, #4]
 8009b0c:	e7ae      	b.n	8009a6c <_malloc_r+0x34>
 8009b0e:	463c      	mov	r4, r7
 8009b10:	687f      	ldr	r7, [r7, #4]
 8009b12:	e7b6      	b.n	8009a82 <_malloc_r+0x4a>
 8009b14:	461a      	mov	r2, r3
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d1fb      	bne.n	8009b14 <_malloc_r+0xdc>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	6053      	str	r3, [r2, #4]
 8009b20:	e7de      	b.n	8009ae0 <_malloc_r+0xa8>
 8009b22:	230c      	movs	r3, #12
 8009b24:	6033      	str	r3, [r6, #0]
 8009b26:	4630      	mov	r0, r6
 8009b28:	f000 f80c 	bl	8009b44 <__malloc_unlock>
 8009b2c:	e794      	b.n	8009a58 <_malloc_r+0x20>
 8009b2e:	6005      	str	r5, [r0, #0]
 8009b30:	e7d6      	b.n	8009ae0 <_malloc_r+0xa8>
 8009b32:	bf00      	nop
 8009b34:	20008778 	.word	0x20008778

08009b38 <__malloc_lock>:
 8009b38:	4801      	ldr	r0, [pc, #4]	@ (8009b40 <__malloc_lock+0x8>)
 8009b3a:	f7ff b8ac 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8009b3e:	bf00      	nop
 8009b40:	20008770 	.word	0x20008770

08009b44 <__malloc_unlock>:
 8009b44:	4801      	ldr	r0, [pc, #4]	@ (8009b4c <__malloc_unlock+0x8>)
 8009b46:	f7ff b8a7 	b.w	8008c98 <__retarget_lock_release_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20008770 	.word	0x20008770

08009b50 <_Balloc>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	69c6      	ldr	r6, [r0, #28]
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	b976      	cbnz	r6, 8009b78 <_Balloc+0x28>
 8009b5a:	2010      	movs	r0, #16
 8009b5c:	f7ff ff42 	bl	80099e4 <malloc>
 8009b60:	4602      	mov	r2, r0
 8009b62:	61e0      	str	r0, [r4, #28]
 8009b64:	b920      	cbnz	r0, 8009b70 <_Balloc+0x20>
 8009b66:	4b18      	ldr	r3, [pc, #96]	@ (8009bc8 <_Balloc+0x78>)
 8009b68:	4818      	ldr	r0, [pc, #96]	@ (8009bcc <_Balloc+0x7c>)
 8009b6a:	216b      	movs	r1, #107	@ 0x6b
 8009b6c:	f000 fdfa 	bl	800a764 <__assert_func>
 8009b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b74:	6006      	str	r6, [r0, #0]
 8009b76:	60c6      	str	r6, [r0, #12]
 8009b78:	69e6      	ldr	r6, [r4, #28]
 8009b7a:	68f3      	ldr	r3, [r6, #12]
 8009b7c:	b183      	cbz	r3, 8009ba0 <_Balloc+0x50>
 8009b7e:	69e3      	ldr	r3, [r4, #28]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b86:	b9b8      	cbnz	r0, 8009bb8 <_Balloc+0x68>
 8009b88:	2101      	movs	r1, #1
 8009b8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b8e:	1d72      	adds	r2, r6, #5
 8009b90:	0092      	lsls	r2, r2, #2
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fe04 	bl	800a7a0 <_calloc_r>
 8009b98:	b160      	cbz	r0, 8009bb4 <_Balloc+0x64>
 8009b9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b9e:	e00e      	b.n	8009bbe <_Balloc+0x6e>
 8009ba0:	2221      	movs	r2, #33	@ 0x21
 8009ba2:	2104      	movs	r1, #4
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fdfb 	bl	800a7a0 <_calloc_r>
 8009baa:	69e3      	ldr	r3, [r4, #28]
 8009bac:	60f0      	str	r0, [r6, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e4      	bne.n	8009b7e <_Balloc+0x2e>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	6802      	ldr	r2, [r0, #0]
 8009bba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bc4:	e7f7      	b.n	8009bb6 <_Balloc+0x66>
 8009bc6:	bf00      	nop
 8009bc8:	0800a9bd 	.word	0x0800a9bd
 8009bcc:	0800aa3d 	.word	0x0800aa3d

08009bd0 <_Bfree>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	69c6      	ldr	r6, [r0, #28]
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	b976      	cbnz	r6, 8009bf8 <_Bfree+0x28>
 8009bda:	2010      	movs	r0, #16
 8009bdc:	f7ff ff02 	bl	80099e4 <malloc>
 8009be0:	4602      	mov	r2, r0
 8009be2:	61e8      	str	r0, [r5, #28]
 8009be4:	b920      	cbnz	r0, 8009bf0 <_Bfree+0x20>
 8009be6:	4b09      	ldr	r3, [pc, #36]	@ (8009c0c <_Bfree+0x3c>)
 8009be8:	4809      	ldr	r0, [pc, #36]	@ (8009c10 <_Bfree+0x40>)
 8009bea:	218f      	movs	r1, #143	@ 0x8f
 8009bec:	f000 fdba 	bl	800a764 <__assert_func>
 8009bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf4:	6006      	str	r6, [r0, #0]
 8009bf6:	60c6      	str	r6, [r0, #12]
 8009bf8:	b13c      	cbz	r4, 8009c0a <_Bfree+0x3a>
 8009bfa:	69eb      	ldr	r3, [r5, #28]
 8009bfc:	6862      	ldr	r2, [r4, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c04:	6021      	str	r1, [r4, #0]
 8009c06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	0800a9bd 	.word	0x0800a9bd
 8009c10:	0800aa3d 	.word	0x0800aa3d

08009c14 <__multadd>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	690d      	ldr	r5, [r1, #16]
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	461e      	mov	r6, r3
 8009c20:	f101 0c14 	add.w	ip, r1, #20
 8009c24:	2000      	movs	r0, #0
 8009c26:	f8dc 3000 	ldr.w	r3, [ip]
 8009c2a:	b299      	uxth	r1, r3
 8009c2c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c30:	0c1e      	lsrs	r6, r3, #16
 8009c32:	0c0b      	lsrs	r3, r1, #16
 8009c34:	fb02 3306 	mla	r3, r2, r6, r3
 8009c38:	b289      	uxth	r1, r1
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c40:	4285      	cmp	r5, r0
 8009c42:	f84c 1b04 	str.w	r1, [ip], #4
 8009c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c4a:	dcec      	bgt.n	8009c26 <__multadd+0x12>
 8009c4c:	b30e      	cbz	r6, 8009c92 <__multadd+0x7e>
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc19      	bgt.n	8009c88 <__multadd+0x74>
 8009c54:	6861      	ldr	r1, [r4, #4]
 8009c56:	4638      	mov	r0, r7
 8009c58:	3101      	adds	r1, #1
 8009c5a:	f7ff ff79 	bl	8009b50 <_Balloc>
 8009c5e:	4680      	mov	r8, r0
 8009c60:	b928      	cbnz	r0, 8009c6e <__multadd+0x5a>
 8009c62:	4602      	mov	r2, r0
 8009c64:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <__multadd+0x84>)
 8009c66:	480d      	ldr	r0, [pc, #52]	@ (8009c9c <__multadd+0x88>)
 8009c68:	21ba      	movs	r1, #186	@ 0xba
 8009c6a:	f000 fd7b 	bl	800a764 <__assert_func>
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	3202      	adds	r2, #2
 8009c72:	f104 010c 	add.w	r1, r4, #12
 8009c76:	0092      	lsls	r2, r2, #2
 8009c78:	300c      	adds	r0, #12
 8009c7a:	f000 fd65 	bl	800a748 <memcpy>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ffa5 	bl	8009bd0 <_Bfree>
 8009c86:	4644      	mov	r4, r8
 8009c88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	615e      	str	r6, [r3, #20]
 8009c90:	6125      	str	r5, [r4, #16]
 8009c92:	4620      	mov	r0, r4
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	0800aa2c 	.word	0x0800aa2c
 8009c9c:	0800aa3d 	.word	0x0800aa3d

08009ca0 <__hi0bits>:
 8009ca0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	bf36      	itet	cc
 8009ca8:	0403      	lslcc	r3, r0, #16
 8009caa:	2000      	movcs	r0, #0
 8009cac:	2010      	movcc	r0, #16
 8009cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cb2:	bf3c      	itt	cc
 8009cb4:	021b      	lslcc	r3, r3, #8
 8009cb6:	3008      	addcc	r0, #8
 8009cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cbc:	bf3c      	itt	cc
 8009cbe:	011b      	lslcc	r3, r3, #4
 8009cc0:	3004      	addcc	r0, #4
 8009cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc6:	bf3c      	itt	cc
 8009cc8:	009b      	lslcc	r3, r3, #2
 8009cca:	3002      	addcc	r0, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	db05      	blt.n	8009cdc <__hi0bits+0x3c>
 8009cd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cd4:	f100 0001 	add.w	r0, r0, #1
 8009cd8:	bf08      	it	eq
 8009cda:	2020      	moveq	r0, #32
 8009cdc:	4770      	bx	lr

08009cde <__lo0bits>:
 8009cde:	6803      	ldr	r3, [r0, #0]
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	f013 0007 	ands.w	r0, r3, #7
 8009ce6:	d00b      	beq.n	8009d00 <__lo0bits+0x22>
 8009ce8:	07d9      	lsls	r1, r3, #31
 8009cea:	d421      	bmi.n	8009d30 <__lo0bits+0x52>
 8009cec:	0798      	lsls	r0, r3, #30
 8009cee:	bf49      	itett	mi
 8009cf0:	085b      	lsrmi	r3, r3, #1
 8009cf2:	089b      	lsrpl	r3, r3, #2
 8009cf4:	2001      	movmi	r0, #1
 8009cf6:	6013      	strmi	r3, [r2, #0]
 8009cf8:	bf5c      	itt	pl
 8009cfa:	6013      	strpl	r3, [r2, #0]
 8009cfc:	2002      	movpl	r0, #2
 8009cfe:	4770      	bx	lr
 8009d00:	b299      	uxth	r1, r3
 8009d02:	b909      	cbnz	r1, 8009d08 <__lo0bits+0x2a>
 8009d04:	0c1b      	lsrs	r3, r3, #16
 8009d06:	2010      	movs	r0, #16
 8009d08:	b2d9      	uxtb	r1, r3
 8009d0a:	b909      	cbnz	r1, 8009d10 <__lo0bits+0x32>
 8009d0c:	3008      	adds	r0, #8
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	0719      	lsls	r1, r3, #28
 8009d12:	bf04      	itt	eq
 8009d14:	091b      	lsreq	r3, r3, #4
 8009d16:	3004      	addeq	r0, #4
 8009d18:	0799      	lsls	r1, r3, #30
 8009d1a:	bf04      	itt	eq
 8009d1c:	089b      	lsreq	r3, r3, #2
 8009d1e:	3002      	addeq	r0, #2
 8009d20:	07d9      	lsls	r1, r3, #31
 8009d22:	d403      	bmi.n	8009d2c <__lo0bits+0x4e>
 8009d24:	085b      	lsrs	r3, r3, #1
 8009d26:	f100 0001 	add.w	r0, r0, #1
 8009d2a:	d003      	beq.n	8009d34 <__lo0bits+0x56>
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4770      	bx	lr
 8009d30:	2000      	movs	r0, #0
 8009d32:	4770      	bx	lr
 8009d34:	2020      	movs	r0, #32
 8009d36:	4770      	bx	lr

08009d38 <__i2b>:
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	f7ff ff07 	bl	8009b50 <_Balloc>
 8009d42:	4602      	mov	r2, r0
 8009d44:	b928      	cbnz	r0, 8009d52 <__i2b+0x1a>
 8009d46:	4b05      	ldr	r3, [pc, #20]	@ (8009d5c <__i2b+0x24>)
 8009d48:	4805      	ldr	r0, [pc, #20]	@ (8009d60 <__i2b+0x28>)
 8009d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8009d4e:	f000 fd09 	bl	800a764 <__assert_func>
 8009d52:	2301      	movs	r3, #1
 8009d54:	6144      	str	r4, [r0, #20]
 8009d56:	6103      	str	r3, [r0, #16]
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0800aa2c 	.word	0x0800aa2c
 8009d60:	0800aa3d 	.word	0x0800aa3d

08009d64 <__multiply>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4617      	mov	r7, r2
 8009d6a:	690a      	ldr	r2, [r1, #16]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	bfa8      	it	ge
 8009d72:	463b      	movge	r3, r7
 8009d74:	4689      	mov	r9, r1
 8009d76:	bfa4      	itt	ge
 8009d78:	460f      	movge	r7, r1
 8009d7a:	4699      	movge	r9, r3
 8009d7c:	693d      	ldr	r5, [r7, #16]
 8009d7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	eb05 060a 	add.w	r6, r5, sl
 8009d8a:	42b3      	cmp	r3, r6
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	bfb8      	it	lt
 8009d90:	3101      	addlt	r1, #1
 8009d92:	f7ff fedd 	bl	8009b50 <_Balloc>
 8009d96:	b930      	cbnz	r0, 8009da6 <__multiply+0x42>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	4b41      	ldr	r3, [pc, #260]	@ (8009ea0 <__multiply+0x13c>)
 8009d9c:	4841      	ldr	r0, [pc, #260]	@ (8009ea4 <__multiply+0x140>)
 8009d9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009da2:	f000 fcdf 	bl	800a764 <__assert_func>
 8009da6:	f100 0414 	add.w	r4, r0, #20
 8009daa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009dae:	4623      	mov	r3, r4
 8009db0:	2200      	movs	r2, #0
 8009db2:	4573      	cmp	r3, lr
 8009db4:	d320      	bcc.n	8009df8 <__multiply+0x94>
 8009db6:	f107 0814 	add.w	r8, r7, #20
 8009dba:	f109 0114 	add.w	r1, r9, #20
 8009dbe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009dc2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009dc6:	9302      	str	r3, [sp, #8]
 8009dc8:	1beb      	subs	r3, r5, r7
 8009dca:	3b15      	subs	r3, #21
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	3715      	adds	r7, #21
 8009dd4:	42bd      	cmp	r5, r7
 8009dd6:	bf38      	it	cc
 8009dd8:	2304      	movcc	r3, #4
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	9103      	str	r1, [sp, #12]
 8009de0:	428b      	cmp	r3, r1
 8009de2:	d80c      	bhi.n	8009dfe <__multiply+0x9a>
 8009de4:	2e00      	cmp	r6, #0
 8009de6:	dd03      	ble.n	8009df0 <__multiply+0x8c>
 8009de8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d055      	beq.n	8009e9c <__multiply+0x138>
 8009df0:	6106      	str	r6, [r0, #16]
 8009df2:	b005      	add	sp, #20
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	f843 2b04 	str.w	r2, [r3], #4
 8009dfc:	e7d9      	b.n	8009db2 <__multiply+0x4e>
 8009dfe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e02:	f1ba 0f00 	cmp.w	sl, #0
 8009e06:	d01f      	beq.n	8009e48 <__multiply+0xe4>
 8009e08:	46c4      	mov	ip, r8
 8009e0a:	46a1      	mov	r9, r4
 8009e0c:	2700      	movs	r7, #0
 8009e0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e12:	f8d9 3000 	ldr.w	r3, [r9]
 8009e16:	fa1f fb82 	uxth.w	fp, r2
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e20:	443b      	add	r3, r7
 8009e22:	f8d9 7000 	ldr.w	r7, [r9]
 8009e26:	0c12      	lsrs	r2, r2, #16
 8009e28:	0c3f      	lsrs	r7, r7, #16
 8009e2a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e38:	4565      	cmp	r5, ip
 8009e3a:	f849 3b04 	str.w	r3, [r9], #4
 8009e3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e42:	d8e4      	bhi.n	8009e0e <__multiply+0xaa>
 8009e44:	9b01      	ldr	r3, [sp, #4]
 8009e46:	50e7      	str	r7, [r4, r3]
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e4e:	3104      	adds	r1, #4
 8009e50:	f1b9 0f00 	cmp.w	r9, #0
 8009e54:	d020      	beq.n	8009e98 <__multiply+0x134>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	4647      	mov	r7, r8
 8009e5a:	46a4      	mov	ip, r4
 8009e5c:	f04f 0a00 	mov.w	sl, #0
 8009e60:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e68:	fb09 220b 	mla	r2, r9, fp, r2
 8009e6c:	4452      	add	r2, sl
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e74:	f84c 3b04 	str.w	r3, [ip], #4
 8009e78:	f857 3b04 	ldr.w	r3, [r7], #4
 8009e7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e80:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e84:	fb09 330a 	mla	r3, r9, sl, r3
 8009e88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e8c:	42bd      	cmp	r5, r7
 8009e8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e92:	d8e5      	bhi.n	8009e60 <__multiply+0xfc>
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	50a3      	str	r3, [r4, r2]
 8009e98:	3404      	adds	r4, #4
 8009e9a:	e79f      	b.n	8009ddc <__multiply+0x78>
 8009e9c:	3e01      	subs	r6, #1
 8009e9e:	e7a1      	b.n	8009de4 <__multiply+0x80>
 8009ea0:	0800aa2c 	.word	0x0800aa2c
 8009ea4:	0800aa3d 	.word	0x0800aa3d

08009ea8 <__pow5mult>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	4615      	mov	r5, r2
 8009eae:	f012 0203 	ands.w	r2, r2, #3
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	460e      	mov	r6, r1
 8009eb6:	d007      	beq.n	8009ec8 <__pow5mult+0x20>
 8009eb8:	4c25      	ldr	r4, [pc, #148]	@ (8009f50 <__pow5mult+0xa8>)
 8009eba:	3a01      	subs	r2, #1
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ec2:	f7ff fea7 	bl	8009c14 <__multadd>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	10ad      	asrs	r5, r5, #2
 8009eca:	d03d      	beq.n	8009f48 <__pow5mult+0xa0>
 8009ecc:	69fc      	ldr	r4, [r7, #28]
 8009ece:	b97c      	cbnz	r4, 8009ef0 <__pow5mult+0x48>
 8009ed0:	2010      	movs	r0, #16
 8009ed2:	f7ff fd87 	bl	80099e4 <malloc>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	61f8      	str	r0, [r7, #28]
 8009eda:	b928      	cbnz	r0, 8009ee8 <__pow5mult+0x40>
 8009edc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f54 <__pow5mult+0xac>)
 8009ede:	481e      	ldr	r0, [pc, #120]	@ (8009f58 <__pow5mult+0xb0>)
 8009ee0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ee4:	f000 fc3e 	bl	800a764 <__assert_func>
 8009ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009eec:	6004      	str	r4, [r0, #0]
 8009eee:	60c4      	str	r4, [r0, #12]
 8009ef0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ef8:	b94c      	cbnz	r4, 8009f0e <__pow5mult+0x66>
 8009efa:	f240 2171 	movw	r1, #625	@ 0x271
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7ff ff1a 	bl	8009d38 <__i2b>
 8009f04:	2300      	movs	r3, #0
 8009f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	6003      	str	r3, [r0, #0]
 8009f0e:	f04f 0900 	mov.w	r9, #0
 8009f12:	07eb      	lsls	r3, r5, #31
 8009f14:	d50a      	bpl.n	8009f2c <__pow5mult+0x84>
 8009f16:	4631      	mov	r1, r6
 8009f18:	4622      	mov	r2, r4
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ff22 	bl	8009d64 <__multiply>
 8009f20:	4631      	mov	r1, r6
 8009f22:	4680      	mov	r8, r0
 8009f24:	4638      	mov	r0, r7
 8009f26:	f7ff fe53 	bl	8009bd0 <_Bfree>
 8009f2a:	4646      	mov	r6, r8
 8009f2c:	106d      	asrs	r5, r5, #1
 8009f2e:	d00b      	beq.n	8009f48 <__pow5mult+0xa0>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	b938      	cbnz	r0, 8009f44 <__pow5mult+0x9c>
 8009f34:	4622      	mov	r2, r4
 8009f36:	4621      	mov	r1, r4
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7ff ff13 	bl	8009d64 <__multiply>
 8009f3e:	6020      	str	r0, [r4, #0]
 8009f40:	f8c0 9000 	str.w	r9, [r0]
 8009f44:	4604      	mov	r4, r0
 8009f46:	e7e4      	b.n	8009f12 <__pow5mult+0x6a>
 8009f48:	4630      	mov	r0, r6
 8009f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800aaf0 	.word	0x0800aaf0
 8009f54:	0800a9bd 	.word	0x0800a9bd
 8009f58:	0800aa3d 	.word	0x0800aa3d

08009f5c <__lshift>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	460c      	mov	r4, r1
 8009f62:	6849      	ldr	r1, [r1, #4]
 8009f64:	6923      	ldr	r3, [r4, #16]
 8009f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	4691      	mov	r9, r2
 8009f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f74:	f108 0601 	add.w	r6, r8, #1
 8009f78:	42b3      	cmp	r3, r6
 8009f7a:	db0b      	blt.n	8009f94 <__lshift+0x38>
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff fde7 	bl	8009b50 <_Balloc>
 8009f82:	4605      	mov	r5, r0
 8009f84:	b948      	cbnz	r0, 8009f9a <__lshift+0x3e>
 8009f86:	4602      	mov	r2, r0
 8009f88:	4b28      	ldr	r3, [pc, #160]	@ (800a02c <__lshift+0xd0>)
 8009f8a:	4829      	ldr	r0, [pc, #164]	@ (800a030 <__lshift+0xd4>)
 8009f8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f90:	f000 fbe8 	bl	800a764 <__assert_func>
 8009f94:	3101      	adds	r1, #1
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	e7ee      	b.n	8009f78 <__lshift+0x1c>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f100 0114 	add.w	r1, r0, #20
 8009fa0:	f100 0210 	add.w	r2, r0, #16
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	4553      	cmp	r3, sl
 8009fa8:	db33      	blt.n	800a012 <__lshift+0xb6>
 8009faa:	6920      	ldr	r0, [r4, #16]
 8009fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fb0:	f104 0314 	add.w	r3, r4, #20
 8009fb4:	f019 091f 	ands.w	r9, r9, #31
 8009fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fc0:	d02b      	beq.n	800a01a <__lshift+0xbe>
 8009fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fc6:	468a      	mov	sl, r1
 8009fc8:	2200      	movs	r2, #0
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	fa00 f009 	lsl.w	r0, r0, r9
 8009fd0:	4310      	orrs	r0, r2
 8009fd2:	f84a 0b04 	str.w	r0, [sl], #4
 8009fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fda:	459c      	cmp	ip, r3
 8009fdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fe0:	d8f3      	bhi.n	8009fca <__lshift+0x6e>
 8009fe2:	ebac 0304 	sub.w	r3, ip, r4
 8009fe6:	3b15      	subs	r3, #21
 8009fe8:	f023 0303 	bic.w	r3, r3, #3
 8009fec:	3304      	adds	r3, #4
 8009fee:	f104 0015 	add.w	r0, r4, #21
 8009ff2:	4560      	cmp	r0, ip
 8009ff4:	bf88      	it	hi
 8009ff6:	2304      	movhi	r3, #4
 8009ff8:	50ca      	str	r2, [r1, r3]
 8009ffa:	b10a      	cbz	r2, 800a000 <__lshift+0xa4>
 8009ffc:	f108 0602 	add.w	r6, r8, #2
 800a000:	3e01      	subs	r6, #1
 800a002:	4638      	mov	r0, r7
 800a004:	612e      	str	r6, [r5, #16]
 800a006:	4621      	mov	r1, r4
 800a008:	f7ff fde2 	bl	8009bd0 <_Bfree>
 800a00c:	4628      	mov	r0, r5
 800a00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a012:	f842 0f04 	str.w	r0, [r2, #4]!
 800a016:	3301      	adds	r3, #1
 800a018:	e7c5      	b.n	8009fa6 <__lshift+0x4a>
 800a01a:	3904      	subs	r1, #4
 800a01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a020:	f841 2f04 	str.w	r2, [r1, #4]!
 800a024:	459c      	cmp	ip, r3
 800a026:	d8f9      	bhi.n	800a01c <__lshift+0xc0>
 800a028:	e7ea      	b.n	800a000 <__lshift+0xa4>
 800a02a:	bf00      	nop
 800a02c:	0800aa2c 	.word	0x0800aa2c
 800a030:	0800aa3d 	.word	0x0800aa3d

0800a034 <__mcmp>:
 800a034:	690a      	ldr	r2, [r1, #16]
 800a036:	4603      	mov	r3, r0
 800a038:	6900      	ldr	r0, [r0, #16]
 800a03a:	1a80      	subs	r0, r0, r2
 800a03c:	b530      	push	{r4, r5, lr}
 800a03e:	d10e      	bne.n	800a05e <__mcmp+0x2a>
 800a040:	3314      	adds	r3, #20
 800a042:	3114      	adds	r1, #20
 800a044:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a048:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a04c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a050:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a054:	4295      	cmp	r5, r2
 800a056:	d003      	beq.n	800a060 <__mcmp+0x2c>
 800a058:	d205      	bcs.n	800a066 <__mcmp+0x32>
 800a05a:	f04f 30ff 	mov.w	r0, #4294967295
 800a05e:	bd30      	pop	{r4, r5, pc}
 800a060:	42a3      	cmp	r3, r4
 800a062:	d3f3      	bcc.n	800a04c <__mcmp+0x18>
 800a064:	e7fb      	b.n	800a05e <__mcmp+0x2a>
 800a066:	2001      	movs	r0, #1
 800a068:	e7f9      	b.n	800a05e <__mcmp+0x2a>
	...

0800a06c <__mdiff>:
 800a06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	4689      	mov	r9, r1
 800a072:	4606      	mov	r6, r0
 800a074:	4611      	mov	r1, r2
 800a076:	4648      	mov	r0, r9
 800a078:	4614      	mov	r4, r2
 800a07a:	f7ff ffdb 	bl	800a034 <__mcmp>
 800a07e:	1e05      	subs	r5, r0, #0
 800a080:	d112      	bne.n	800a0a8 <__mdiff+0x3c>
 800a082:	4629      	mov	r1, r5
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff fd63 	bl	8009b50 <_Balloc>
 800a08a:	4602      	mov	r2, r0
 800a08c:	b928      	cbnz	r0, 800a09a <__mdiff+0x2e>
 800a08e:	4b3f      	ldr	r3, [pc, #252]	@ (800a18c <__mdiff+0x120>)
 800a090:	f240 2137 	movw	r1, #567	@ 0x237
 800a094:	483e      	ldr	r0, [pc, #248]	@ (800a190 <__mdiff+0x124>)
 800a096:	f000 fb65 	bl	800a764 <__assert_func>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	b003      	add	sp, #12
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	bfbc      	itt	lt
 800a0aa:	464b      	movlt	r3, r9
 800a0ac:	46a1      	movlt	r9, r4
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0b4:	bfba      	itte	lt
 800a0b6:	461c      	movlt	r4, r3
 800a0b8:	2501      	movlt	r5, #1
 800a0ba:	2500      	movge	r5, #0
 800a0bc:	f7ff fd48 	bl	8009b50 <_Balloc>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	b918      	cbnz	r0, 800a0cc <__mdiff+0x60>
 800a0c4:	4b31      	ldr	r3, [pc, #196]	@ (800a18c <__mdiff+0x120>)
 800a0c6:	f240 2145 	movw	r1, #581	@ 0x245
 800a0ca:	e7e3      	b.n	800a094 <__mdiff+0x28>
 800a0cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0d0:	6926      	ldr	r6, [r4, #16]
 800a0d2:	60c5      	str	r5, [r0, #12]
 800a0d4:	f109 0310 	add.w	r3, r9, #16
 800a0d8:	f109 0514 	add.w	r5, r9, #20
 800a0dc:	f104 0e14 	add.w	lr, r4, #20
 800a0e0:	f100 0b14 	add.w	fp, r0, #20
 800a0e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	46d9      	mov	r9, fp
 800a0f0:	f04f 0c00 	mov.w	ip, #0
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	fa1f f38a 	uxth.w	r3, sl
 800a104:	4619      	mov	r1, r3
 800a106:	b283      	uxth	r3, r0
 800a108:	1acb      	subs	r3, r1, r3
 800a10a:	0c00      	lsrs	r0, r0, #16
 800a10c:	4463      	add	r3, ip
 800a10e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a112:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a116:	b29b      	uxth	r3, r3
 800a118:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a11c:	4576      	cmp	r6, lr
 800a11e:	f849 3b04 	str.w	r3, [r9], #4
 800a122:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a126:	d8e5      	bhi.n	800a0f4 <__mdiff+0x88>
 800a128:	1b33      	subs	r3, r6, r4
 800a12a:	3b15      	subs	r3, #21
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	3415      	adds	r4, #21
 800a132:	3304      	adds	r3, #4
 800a134:	42a6      	cmp	r6, r4
 800a136:	bf38      	it	cc
 800a138:	2304      	movcc	r3, #4
 800a13a:	441d      	add	r5, r3
 800a13c:	445b      	add	r3, fp
 800a13e:	461e      	mov	r6, r3
 800a140:	462c      	mov	r4, r5
 800a142:	4544      	cmp	r4, r8
 800a144:	d30e      	bcc.n	800a164 <__mdiff+0xf8>
 800a146:	f108 0103 	add.w	r1, r8, #3
 800a14a:	1b49      	subs	r1, r1, r5
 800a14c:	f021 0103 	bic.w	r1, r1, #3
 800a150:	3d03      	subs	r5, #3
 800a152:	45a8      	cmp	r8, r5
 800a154:	bf38      	it	cc
 800a156:	2100      	movcc	r1, #0
 800a158:	440b      	add	r3, r1
 800a15a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a15e:	b191      	cbz	r1, 800a186 <__mdiff+0x11a>
 800a160:	6117      	str	r7, [r2, #16]
 800a162:	e79d      	b.n	800a0a0 <__mdiff+0x34>
 800a164:	f854 1b04 	ldr.w	r1, [r4], #4
 800a168:	46e6      	mov	lr, ip
 800a16a:	0c08      	lsrs	r0, r1, #16
 800a16c:	fa1c fc81 	uxtah	ip, ip, r1
 800a170:	4471      	add	r1, lr
 800a172:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a176:	b289      	uxth	r1, r1
 800a178:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a17c:	f846 1b04 	str.w	r1, [r6], #4
 800a180:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a184:	e7dd      	b.n	800a142 <__mdiff+0xd6>
 800a186:	3f01      	subs	r7, #1
 800a188:	e7e7      	b.n	800a15a <__mdiff+0xee>
 800a18a:	bf00      	nop
 800a18c:	0800aa2c 	.word	0x0800aa2c
 800a190:	0800aa3d 	.word	0x0800aa3d

0800a194 <__d2b>:
 800a194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a198:	460f      	mov	r7, r1
 800a19a:	2101      	movs	r1, #1
 800a19c:	ec59 8b10 	vmov	r8, r9, d0
 800a1a0:	4616      	mov	r6, r2
 800a1a2:	f7ff fcd5 	bl	8009b50 <_Balloc>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	b930      	cbnz	r0, 800a1b8 <__d2b+0x24>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4b23      	ldr	r3, [pc, #140]	@ (800a23c <__d2b+0xa8>)
 800a1ae:	4824      	ldr	r0, [pc, #144]	@ (800a240 <__d2b+0xac>)
 800a1b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1b4:	f000 fad6 	bl	800a764 <__assert_func>
 800a1b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1c0:	b10d      	cbz	r5, 800a1c6 <__d2b+0x32>
 800a1c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	f1b8 0300 	subs.w	r3, r8, #0
 800a1cc:	d023      	beq.n	800a216 <__d2b+0x82>
 800a1ce:	4668      	mov	r0, sp
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	f7ff fd84 	bl	8009cde <__lo0bits>
 800a1d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1da:	b1d0      	cbz	r0, 800a212 <__d2b+0x7e>
 800a1dc:	f1c0 0320 	rsb	r3, r0, #32
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	40c2      	lsrs	r2, r0
 800a1e8:	6163      	str	r3, [r4, #20]
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	61a3      	str	r3, [r4, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bf0c      	ite	eq
 800a1f4:	2201      	moveq	r2, #1
 800a1f6:	2202      	movne	r2, #2
 800a1f8:	6122      	str	r2, [r4, #16]
 800a1fa:	b1a5      	cbz	r5, 800a226 <__d2b+0x92>
 800a1fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a200:	4405      	add	r5, r0
 800a202:	603d      	str	r5, [r7, #0]
 800a204:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a208:	6030      	str	r0, [r6, #0]
 800a20a:	4620      	mov	r0, r4
 800a20c:	b003      	add	sp, #12
 800a20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a212:	6161      	str	r1, [r4, #20]
 800a214:	e7ea      	b.n	800a1ec <__d2b+0x58>
 800a216:	a801      	add	r0, sp, #4
 800a218:	f7ff fd61 	bl	8009cde <__lo0bits>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	3020      	adds	r0, #32
 800a222:	2201      	movs	r2, #1
 800a224:	e7e8      	b.n	800a1f8 <__d2b+0x64>
 800a226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a22a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a22e:	6038      	str	r0, [r7, #0]
 800a230:	6918      	ldr	r0, [r3, #16]
 800a232:	f7ff fd35 	bl	8009ca0 <__hi0bits>
 800a236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a23a:	e7e5      	b.n	800a208 <__d2b+0x74>
 800a23c:	0800aa2c 	.word	0x0800aa2c
 800a240:	0800aa3d 	.word	0x0800aa3d

0800a244 <__sfputc_r>:
 800a244:	6893      	ldr	r3, [r2, #8]
 800a246:	3b01      	subs	r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	b410      	push	{r4}
 800a24c:	6093      	str	r3, [r2, #8]
 800a24e:	da08      	bge.n	800a262 <__sfputc_r+0x1e>
 800a250:	6994      	ldr	r4, [r2, #24]
 800a252:	42a3      	cmp	r3, r4
 800a254:	db01      	blt.n	800a25a <__sfputc_r+0x16>
 800a256:	290a      	cmp	r1, #10
 800a258:	d103      	bne.n	800a262 <__sfputc_r+0x1e>
 800a25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a25e:	f7fe bc08 	b.w	8008a72 <__swbuf_r>
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	1c58      	adds	r0, r3, #1
 800a266:	6010      	str	r0, [r2, #0]
 800a268:	7019      	strb	r1, [r3, #0]
 800a26a:	4608      	mov	r0, r1
 800a26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <__sfputs_r>:
 800a272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a274:	4606      	mov	r6, r0
 800a276:	460f      	mov	r7, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	18d5      	adds	r5, r2, r3
 800a27c:	42ac      	cmp	r4, r5
 800a27e:	d101      	bne.n	800a284 <__sfputs_r+0x12>
 800a280:	2000      	movs	r0, #0
 800a282:	e007      	b.n	800a294 <__sfputs_r+0x22>
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	463a      	mov	r2, r7
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ffda 	bl	800a244 <__sfputc_r>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d1f3      	bne.n	800a27c <__sfputs_r+0xa>
 800a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a298 <_vfiprintf_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	460d      	mov	r5, r1
 800a29e:	b09d      	sub	sp, #116	@ 0x74
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	4698      	mov	r8, r3
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	b118      	cbz	r0, 800a2b0 <_vfiprintf_r+0x18>
 800a2a8:	6a03      	ldr	r3, [r0, #32]
 800a2aa:	b90b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x18>
 800a2ac:	f7fe faf8 	bl	80088a0 <__sinit>
 800a2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2b2:	07d9      	lsls	r1, r3, #31
 800a2b4:	d405      	bmi.n	800a2c2 <_vfiprintf_r+0x2a>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_vfiprintf_r+0x2a>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2be:	f7fe fcea 	bl	8008c96 <__retarget_lock_acquire_recursive>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	071b      	lsls	r3, r3, #28
 800a2c6:	d501      	bpl.n	800a2cc <_vfiprintf_r+0x34>
 800a2c8:	692b      	ldr	r3, [r5, #16]
 800a2ca:	b99b      	cbnz	r3, 800a2f4 <_vfiprintf_r+0x5c>
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7fe fc0e 	bl	8008af0 <__swsetup_r>
 800a2d4:	b170      	cbz	r0, 800a2f4 <_vfiprintf_r+0x5c>
 800a2d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2d8:	07dc      	lsls	r4, r3, #31
 800a2da:	d504      	bpl.n	800a2e6 <_vfiprintf_r+0x4e>
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	b01d      	add	sp, #116	@ 0x74
 800a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	0598      	lsls	r0, r3, #22
 800a2ea:	d4f7      	bmi.n	800a2dc <_vfiprintf_r+0x44>
 800a2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ee:	f7fe fcd3 	bl	8008c98 <__retarget_lock_release_recursive>
 800a2f2:	e7f3      	b.n	800a2dc <_vfiprintf_r+0x44>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f8:	2320      	movs	r3, #32
 800a2fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a302:	2330      	movs	r3, #48	@ 0x30
 800a304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4b4 <_vfiprintf_r+0x21c>
 800a308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a30c:	f04f 0901 	mov.w	r9, #1
 800a310:	4623      	mov	r3, r4
 800a312:	469a      	mov	sl, r3
 800a314:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a318:	b10a      	cbz	r2, 800a31e <_vfiprintf_r+0x86>
 800a31a:	2a25      	cmp	r2, #37	@ 0x25
 800a31c:	d1f9      	bne.n	800a312 <_vfiprintf_r+0x7a>
 800a31e:	ebba 0b04 	subs.w	fp, sl, r4
 800a322:	d00b      	beq.n	800a33c <_vfiprintf_r+0xa4>
 800a324:	465b      	mov	r3, fp
 800a326:	4622      	mov	r2, r4
 800a328:	4629      	mov	r1, r5
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ffa1 	bl	800a272 <__sfputs_r>
 800a330:	3001      	adds	r0, #1
 800a332:	f000 80a7 	beq.w	800a484 <_vfiprintf_r+0x1ec>
 800a336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a338:	445a      	add	r2, fp
 800a33a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a33c:	f89a 3000 	ldrb.w	r3, [sl]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 809f 	beq.w	800a484 <_vfiprintf_r+0x1ec>
 800a346:	2300      	movs	r3, #0
 800a348:	f04f 32ff 	mov.w	r2, #4294967295
 800a34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a350:	f10a 0a01 	add.w	sl, sl, #1
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	9307      	str	r3, [sp, #28]
 800a358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a35c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a35e:	4654      	mov	r4, sl
 800a360:	2205      	movs	r2, #5
 800a362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a366:	4853      	ldr	r0, [pc, #332]	@ (800a4b4 <_vfiprintf_r+0x21c>)
 800a368:	f7f5 ff32 	bl	80001d0 <memchr>
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	b9d8      	cbnz	r0, 800a3a8 <_vfiprintf_r+0x110>
 800a370:	06d1      	lsls	r1, r2, #27
 800a372:	bf44      	itt	mi
 800a374:	2320      	movmi	r3, #32
 800a376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a37a:	0713      	lsls	r3, r2, #28
 800a37c:	bf44      	itt	mi
 800a37e:	232b      	movmi	r3, #43	@ 0x2b
 800a380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a384:	f89a 3000 	ldrb.w	r3, [sl]
 800a388:	2b2a      	cmp	r3, #42	@ 0x2a
 800a38a:	d015      	beq.n	800a3b8 <_vfiprintf_r+0x120>
 800a38c:	9a07      	ldr	r2, [sp, #28]
 800a38e:	4654      	mov	r4, sl
 800a390:	2000      	movs	r0, #0
 800a392:	f04f 0c0a 	mov.w	ip, #10
 800a396:	4621      	mov	r1, r4
 800a398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a39c:	3b30      	subs	r3, #48	@ 0x30
 800a39e:	2b09      	cmp	r3, #9
 800a3a0:	d94b      	bls.n	800a43a <_vfiprintf_r+0x1a2>
 800a3a2:	b1b0      	cbz	r0, 800a3d2 <_vfiprintf_r+0x13a>
 800a3a4:	9207      	str	r2, [sp, #28]
 800a3a6:	e014      	b.n	800a3d2 <_vfiprintf_r+0x13a>
 800a3a8:	eba0 0308 	sub.w	r3, r0, r8
 800a3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	46a2      	mov	sl, r4
 800a3b6:	e7d2      	b.n	800a35e <_vfiprintf_r+0xc6>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	1d19      	adds	r1, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	9103      	str	r1, [sp, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfbb      	ittet	lt
 800a3c4:	425b      	neglt	r3, r3
 800a3c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ca:	9307      	strge	r3, [sp, #28]
 800a3cc:	9307      	strlt	r3, [sp, #28]
 800a3ce:	bfb8      	it	lt
 800a3d0:	9204      	strlt	r2, [sp, #16]
 800a3d2:	7823      	ldrb	r3, [r4, #0]
 800a3d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3d6:	d10a      	bne.n	800a3ee <_vfiprintf_r+0x156>
 800a3d8:	7863      	ldrb	r3, [r4, #1]
 800a3da:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3dc:	d132      	bne.n	800a444 <_vfiprintf_r+0x1ac>
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	9203      	str	r2, [sp, #12]
 800a3e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3ea:	3402      	adds	r4, #2
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4c4 <_vfiprintf_r+0x22c>
 800a3f2:	7821      	ldrb	r1, [r4, #0]
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	f7f5 feea 	bl	80001d0 <memchr>
 800a3fc:	b138      	cbz	r0, 800a40e <_vfiprintf_r+0x176>
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	eba0 000a 	sub.w	r0, r0, sl
 800a404:	2240      	movs	r2, #64	@ 0x40
 800a406:	4082      	lsls	r2, r0
 800a408:	4313      	orrs	r3, r2
 800a40a:	3401      	adds	r4, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a412:	4829      	ldr	r0, [pc, #164]	@ (800a4b8 <_vfiprintf_r+0x220>)
 800a414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a418:	2206      	movs	r2, #6
 800a41a:	f7f5 fed9 	bl	80001d0 <memchr>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d03f      	beq.n	800a4a2 <_vfiprintf_r+0x20a>
 800a422:	4b26      	ldr	r3, [pc, #152]	@ (800a4bc <_vfiprintf_r+0x224>)
 800a424:	bb1b      	cbnz	r3, 800a46e <_vfiprintf_r+0x1d6>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	3307      	adds	r3, #7
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	3308      	adds	r3, #8
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a434:	443b      	add	r3, r7
 800a436:	9309      	str	r3, [sp, #36]	@ 0x24
 800a438:	e76a      	b.n	800a310 <_vfiprintf_r+0x78>
 800a43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a43e:	460c      	mov	r4, r1
 800a440:	2001      	movs	r0, #1
 800a442:	e7a8      	b.n	800a396 <_vfiprintf_r+0xfe>
 800a444:	2300      	movs	r3, #0
 800a446:	3401      	adds	r4, #1
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	4619      	mov	r1, r3
 800a44c:	f04f 0c0a 	mov.w	ip, #10
 800a450:	4620      	mov	r0, r4
 800a452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a456:	3a30      	subs	r2, #48	@ 0x30
 800a458:	2a09      	cmp	r2, #9
 800a45a:	d903      	bls.n	800a464 <_vfiprintf_r+0x1cc>
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0c6      	beq.n	800a3ee <_vfiprintf_r+0x156>
 800a460:	9105      	str	r1, [sp, #20]
 800a462:	e7c4      	b.n	800a3ee <_vfiprintf_r+0x156>
 800a464:	fb0c 2101 	mla	r1, ip, r1, r2
 800a468:	4604      	mov	r4, r0
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7f0      	b.n	800a450 <_vfiprintf_r+0x1b8>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b12      	ldr	r3, [pc, #72]	@ (800a4c0 <_vfiprintf_r+0x228>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4630      	mov	r0, r6
 800a47a:	f7fd fdcf 	bl	800801c <_printf_float>
 800a47e:	4607      	mov	r7, r0
 800a480:	1c78      	adds	r0, r7, #1
 800a482:	d1d6      	bne.n	800a432 <_vfiprintf_r+0x19a>
 800a484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	d405      	bmi.n	800a496 <_vfiprintf_r+0x1fe>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	059a      	lsls	r2, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_vfiprintf_r+0x1fe>
 800a490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a492:	f7fe fc01 	bl	8008c98 <__retarget_lock_release_recursive>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	065b      	lsls	r3, r3, #25
 800a49a:	f53f af1f 	bmi.w	800a2dc <_vfiprintf_r+0x44>
 800a49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4a0:	e71e      	b.n	800a2e0 <_vfiprintf_r+0x48>
 800a4a2:	ab03      	add	r3, sp, #12
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4b05      	ldr	r3, [pc, #20]	@ (800a4c0 <_vfiprintf_r+0x228>)
 800a4aa:	a904      	add	r1, sp, #16
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7fe f84d 	bl	800854c <_printf_i>
 800a4b2:	e7e4      	b.n	800a47e <_vfiprintf_r+0x1e6>
 800a4b4:	0800aa96 	.word	0x0800aa96
 800a4b8:	0800aaa0 	.word	0x0800aaa0
 800a4bc:	0800801d 	.word	0x0800801d
 800a4c0:	0800a273 	.word	0x0800a273
 800a4c4:	0800aa9c 	.word	0x0800aa9c

0800a4c8 <__sflush_r>:
 800a4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d0:	0716      	lsls	r6, r2, #28
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	d454      	bmi.n	800a582 <__sflush_r+0xba>
 800a4d8:	684b      	ldr	r3, [r1, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dc02      	bgt.n	800a4e4 <__sflush_r+0x1c>
 800a4de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd48      	ble.n	800a576 <__sflush_r+0xae>
 800a4e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d045      	beq.n	800a576 <__sflush_r+0xae>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4f0:	682f      	ldr	r7, [r5, #0]
 800a4f2:	6a21      	ldr	r1, [r4, #32]
 800a4f4:	602b      	str	r3, [r5, #0]
 800a4f6:	d030      	beq.n	800a55a <__sflush_r+0x92>
 800a4f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	0759      	lsls	r1, r3, #29
 800a4fe:	d505      	bpl.n	800a50c <__sflush_r+0x44>
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a506:	b10b      	cbz	r3, 800a50c <__sflush_r+0x44>
 800a508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	2300      	movs	r3, #0
 800a50e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a510:	6a21      	ldr	r1, [r4, #32]
 800a512:	4628      	mov	r0, r5
 800a514:	47b0      	blx	r6
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	d106      	bne.n	800a52a <__sflush_r+0x62>
 800a51c:	6829      	ldr	r1, [r5, #0]
 800a51e:	291d      	cmp	r1, #29
 800a520:	d82b      	bhi.n	800a57a <__sflush_r+0xb2>
 800a522:	4a2a      	ldr	r2, [pc, #168]	@ (800a5cc <__sflush_r+0x104>)
 800a524:	40ca      	lsrs	r2, r1
 800a526:	07d6      	lsls	r6, r2, #31
 800a528:	d527      	bpl.n	800a57a <__sflush_r+0xb2>
 800a52a:	2200      	movs	r2, #0
 800a52c:	6062      	str	r2, [r4, #4]
 800a52e:	04d9      	lsls	r1, r3, #19
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	6022      	str	r2, [r4, #0]
 800a534:	d504      	bpl.n	800a540 <__sflush_r+0x78>
 800a536:	1c42      	adds	r2, r0, #1
 800a538:	d101      	bne.n	800a53e <__sflush_r+0x76>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	b903      	cbnz	r3, 800a540 <__sflush_r+0x78>
 800a53e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a542:	602f      	str	r7, [r5, #0]
 800a544:	b1b9      	cbz	r1, 800a576 <__sflush_r+0xae>
 800a546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d002      	beq.n	800a554 <__sflush_r+0x8c>
 800a54e:	4628      	mov	r0, r5
 800a550:	f7ff f9fe 	bl	8009950 <_free_r>
 800a554:	2300      	movs	r3, #0
 800a556:	6363      	str	r3, [r4, #52]	@ 0x34
 800a558:	e00d      	b.n	800a576 <__sflush_r+0xae>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b0      	blx	r6
 800a560:	4602      	mov	r2, r0
 800a562:	1c50      	adds	r0, r2, #1
 800a564:	d1c9      	bne.n	800a4fa <__sflush_r+0x32>
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0c6      	beq.n	800a4fa <__sflush_r+0x32>
 800a56c:	2b1d      	cmp	r3, #29
 800a56e:	d001      	beq.n	800a574 <__sflush_r+0xac>
 800a570:	2b16      	cmp	r3, #22
 800a572:	d11e      	bne.n	800a5b2 <__sflush_r+0xea>
 800a574:	602f      	str	r7, [r5, #0]
 800a576:	2000      	movs	r0, #0
 800a578:	e022      	b.n	800a5c0 <__sflush_r+0xf8>
 800a57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a57e:	b21b      	sxth	r3, r3
 800a580:	e01b      	b.n	800a5ba <__sflush_r+0xf2>
 800a582:	690f      	ldr	r7, [r1, #16]
 800a584:	2f00      	cmp	r7, #0
 800a586:	d0f6      	beq.n	800a576 <__sflush_r+0xae>
 800a588:	0793      	lsls	r3, r2, #30
 800a58a:	680e      	ldr	r6, [r1, #0]
 800a58c:	bf08      	it	eq
 800a58e:	694b      	ldreq	r3, [r1, #20]
 800a590:	600f      	str	r7, [r1, #0]
 800a592:	bf18      	it	ne
 800a594:	2300      	movne	r3, #0
 800a596:	eba6 0807 	sub.w	r8, r6, r7
 800a59a:	608b      	str	r3, [r1, #8]
 800a59c:	f1b8 0f00 	cmp.w	r8, #0
 800a5a0:	dde9      	ble.n	800a576 <__sflush_r+0xae>
 800a5a2:	6a21      	ldr	r1, [r4, #32]
 800a5a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5a6:	4643      	mov	r3, r8
 800a5a8:	463a      	mov	r2, r7
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b0      	blx	r6
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	dc08      	bgt.n	800a5c4 <__sflush_r+0xfc>
 800a5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c4:	4407      	add	r7, r0
 800a5c6:	eba8 0800 	sub.w	r8, r8, r0
 800a5ca:	e7e7      	b.n	800a59c <__sflush_r+0xd4>
 800a5cc:	20400001 	.word	0x20400001

0800a5d0 <_fflush_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	690b      	ldr	r3, [r1, #16]
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b913      	cbnz	r3, 800a5e0 <_fflush_r+0x10>
 800a5da:	2500      	movs	r5, #0
 800a5dc:	4628      	mov	r0, r5
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	b118      	cbz	r0, 800a5ea <_fflush_r+0x1a>
 800a5e2:	6a03      	ldr	r3, [r0, #32]
 800a5e4:	b90b      	cbnz	r3, 800a5ea <_fflush_r+0x1a>
 800a5e6:	f7fe f95b 	bl	80088a0 <__sinit>
 800a5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f3      	beq.n	800a5da <_fflush_r+0xa>
 800a5f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5f4:	07d0      	lsls	r0, r2, #31
 800a5f6:	d404      	bmi.n	800a602 <_fflush_r+0x32>
 800a5f8:	0599      	lsls	r1, r3, #22
 800a5fa:	d402      	bmi.n	800a602 <_fflush_r+0x32>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5fe:	f7fe fb4a 	bl	8008c96 <__retarget_lock_acquire_recursive>
 800a602:	4628      	mov	r0, r5
 800a604:	4621      	mov	r1, r4
 800a606:	f7ff ff5f 	bl	800a4c8 <__sflush_r>
 800a60a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a60c:	07da      	lsls	r2, r3, #31
 800a60e:	4605      	mov	r5, r0
 800a610:	d4e4      	bmi.n	800a5dc <_fflush_r+0xc>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	059b      	lsls	r3, r3, #22
 800a616:	d4e1      	bmi.n	800a5dc <_fflush_r+0xc>
 800a618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a61a:	f7fe fb3d 	bl	8008c98 <__retarget_lock_release_recursive>
 800a61e:	e7dd      	b.n	800a5dc <_fflush_r+0xc>

0800a620 <__swhatbuf_r>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	460c      	mov	r4, r1
 800a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a628:	2900      	cmp	r1, #0
 800a62a:	b096      	sub	sp, #88	@ 0x58
 800a62c:	4615      	mov	r5, r2
 800a62e:	461e      	mov	r6, r3
 800a630:	da0d      	bge.n	800a64e <__swhatbuf_r+0x2e>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a638:	f04f 0100 	mov.w	r1, #0
 800a63c:	bf14      	ite	ne
 800a63e:	2340      	movne	r3, #64	@ 0x40
 800a640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a644:	2000      	movs	r0, #0
 800a646:	6031      	str	r1, [r6, #0]
 800a648:	602b      	str	r3, [r5, #0]
 800a64a:	b016      	add	sp, #88	@ 0x58
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	466a      	mov	r2, sp
 800a650:	f000 f848 	bl	800a6e4 <_fstat_r>
 800a654:	2800      	cmp	r0, #0
 800a656:	dbec      	blt.n	800a632 <__swhatbuf_r+0x12>
 800a658:	9901      	ldr	r1, [sp, #4]
 800a65a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a65e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a662:	4259      	negs	r1, r3
 800a664:	4159      	adcs	r1, r3
 800a666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a66a:	e7eb      	b.n	800a644 <__swhatbuf_r+0x24>

0800a66c <__smakebuf_r>:
 800a66c:	898b      	ldrh	r3, [r1, #12]
 800a66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a670:	079d      	lsls	r5, r3, #30
 800a672:	4606      	mov	r6, r0
 800a674:	460c      	mov	r4, r1
 800a676:	d507      	bpl.n	800a688 <__smakebuf_r+0x1c>
 800a678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	6123      	str	r3, [r4, #16]
 800a680:	2301      	movs	r3, #1
 800a682:	6163      	str	r3, [r4, #20]
 800a684:	b003      	add	sp, #12
 800a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a688:	ab01      	add	r3, sp, #4
 800a68a:	466a      	mov	r2, sp
 800a68c:	f7ff ffc8 	bl	800a620 <__swhatbuf_r>
 800a690:	9f00      	ldr	r7, [sp, #0]
 800a692:	4605      	mov	r5, r0
 800a694:	4639      	mov	r1, r7
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff f9ce 	bl	8009a38 <_malloc_r>
 800a69c:	b948      	cbnz	r0, 800a6b2 <__smakebuf_r+0x46>
 800a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a2:	059a      	lsls	r2, r3, #22
 800a6a4:	d4ee      	bmi.n	800a684 <__smakebuf_r+0x18>
 800a6a6:	f023 0303 	bic.w	r3, r3, #3
 800a6aa:	f043 0302 	orr.w	r3, r3, #2
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	e7e2      	b.n	800a678 <__smakebuf_r+0xc>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	6020      	str	r0, [r4, #0]
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6c2:	b15b      	cbz	r3, 800a6dc <__smakebuf_r+0x70>
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f81d 	bl	800a708 <_isatty_r>
 800a6ce:	b128      	cbz	r0, 800a6dc <__smakebuf_r+0x70>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	431d      	orrs	r5, r3
 800a6e0:	81a5      	strh	r5, [r4, #12]
 800a6e2:	e7cf      	b.n	800a684 <__smakebuf_r+0x18>

0800a6e4 <_fstat_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d07      	ldr	r5, [pc, #28]	@ (800a704 <_fstat_r+0x20>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	f7f9 fb79 	bl	8003de8 <_fstat>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d102      	bne.n	800a700 <_fstat_r+0x1c>
 800a6fa:	682b      	ldr	r3, [r5, #0]
 800a6fc:	b103      	cbz	r3, 800a700 <_fstat_r+0x1c>
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	bf00      	nop
 800a704:	2000876c 	.word	0x2000876c

0800a708 <_isatty_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	@ (800a724 <_isatty_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f9 fb78 	bl	8003e08 <_isatty>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_isatty_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_isatty_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	2000876c 	.word	0x2000876c

0800a728 <_sbrk_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d06      	ldr	r5, [pc, #24]	@ (800a744 <_sbrk_r+0x1c>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f9 fb80 	bl	8003e38 <_sbrk>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_sbrk_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_sbrk_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	2000876c 	.word	0x2000876c

0800a748 <memcpy>:
 800a748:	440a      	add	r2, r1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a750:	d100      	bne.n	800a754 <memcpy+0xc>
 800a752:	4770      	bx	lr
 800a754:	b510      	push	{r4, lr}
 800a756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a75e:	4291      	cmp	r1, r2
 800a760:	d1f9      	bne.n	800a756 <memcpy+0xe>
 800a762:	bd10      	pop	{r4, pc}

0800a764 <__assert_func>:
 800a764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a766:	4614      	mov	r4, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <__assert_func+0x2c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4605      	mov	r5, r0
 800a770:	68d8      	ldr	r0, [r3, #12]
 800a772:	b14c      	cbz	r4, 800a788 <__assert_func+0x24>
 800a774:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <__assert_func+0x30>)
 800a776:	9100      	str	r1, [sp, #0]
 800a778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a77c:	4906      	ldr	r1, [pc, #24]	@ (800a798 <__assert_func+0x34>)
 800a77e:	462b      	mov	r3, r5
 800a780:	f000 f842 	bl	800a808 <fiprintf>
 800a784:	f000 f852 	bl	800a82c <abort>
 800a788:	4b04      	ldr	r3, [pc, #16]	@ (800a79c <__assert_func+0x38>)
 800a78a:	461c      	mov	r4, r3
 800a78c:	e7f3      	b.n	800a776 <__assert_func+0x12>
 800a78e:	bf00      	nop
 800a790:	20000018 	.word	0x20000018
 800a794:	0800aab1 	.word	0x0800aab1
 800a798:	0800aabe 	.word	0x0800aabe
 800a79c:	0800aaec 	.word	0x0800aaec

0800a7a0 <_calloc_r>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a7a6:	b934      	cbnz	r4, 800a7b6 <_calloc_r+0x16>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7ff f945 	bl	8009a38 <_malloc_r>
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <_calloc_r+0x1e>
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	220c      	movs	r2, #12
 800a7b8:	6002      	str	r2, [r0, #0]
 800a7ba:	2600      	movs	r6, #0
 800a7bc:	e7f9      	b.n	800a7b2 <_calloc_r+0x12>
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f7fe f9eb 	bl	8008b9c <memset>
 800a7c6:	e7f4      	b.n	800a7b2 <_calloc_r+0x12>

0800a7c8 <__ascii_mbtowc>:
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	b901      	cbnz	r1, 800a7ce <__ascii_mbtowc+0x6>
 800a7cc:	a901      	add	r1, sp, #4
 800a7ce:	b142      	cbz	r2, 800a7e2 <__ascii_mbtowc+0x1a>
 800a7d0:	b14b      	cbz	r3, 800a7e6 <__ascii_mbtowc+0x1e>
 800a7d2:	7813      	ldrb	r3, [r2, #0]
 800a7d4:	600b      	str	r3, [r1, #0]
 800a7d6:	7812      	ldrb	r2, [r2, #0]
 800a7d8:	1e10      	subs	r0, r2, #0
 800a7da:	bf18      	it	ne
 800a7dc:	2001      	movne	r0, #1
 800a7de:	b002      	add	sp, #8
 800a7e0:	4770      	bx	lr
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	e7fb      	b.n	800a7de <__ascii_mbtowc+0x16>
 800a7e6:	f06f 0001 	mvn.w	r0, #1
 800a7ea:	e7f8      	b.n	800a7de <__ascii_mbtowc+0x16>

0800a7ec <__ascii_wctomb>:
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	b141      	cbz	r1, 800a804 <__ascii_wctomb+0x18>
 800a7f2:	2aff      	cmp	r2, #255	@ 0xff
 800a7f4:	d904      	bls.n	800a800 <__ascii_wctomb+0x14>
 800a7f6:	228a      	movs	r2, #138	@ 0x8a
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	4770      	bx	lr
 800a800:	700a      	strb	r2, [r1, #0]
 800a802:	2001      	movs	r0, #1
 800a804:	4770      	bx	lr
	...

0800a808 <fiprintf>:
 800a808:	b40e      	push	{r1, r2, r3}
 800a80a:	b503      	push	{r0, r1, lr}
 800a80c:	4601      	mov	r1, r0
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	4805      	ldr	r0, [pc, #20]	@ (800a828 <fiprintf+0x20>)
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f7ff fd3d 	bl	800a298 <_vfiprintf_r>
 800a81e:	b002      	add	sp, #8
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr
 800a828:	20000018 	.word	0x20000018

0800a82c <abort>:
 800a82c:	b508      	push	{r3, lr}
 800a82e:	2006      	movs	r0, #6
 800a830:	f000 f82c 	bl	800a88c <raise>
 800a834:	2001      	movs	r0, #1
 800a836:	f7f9 fa87 	bl	8003d48 <_exit>

0800a83a <_raise_r>:
 800a83a:	291f      	cmp	r1, #31
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4605      	mov	r5, r0
 800a840:	460c      	mov	r4, r1
 800a842:	d904      	bls.n	800a84e <_raise_r+0x14>
 800a844:	2316      	movs	r3, #22
 800a846:	6003      	str	r3, [r0, #0]
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	bd38      	pop	{r3, r4, r5, pc}
 800a84e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a850:	b112      	cbz	r2, 800a858 <_raise_r+0x1e>
 800a852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a856:	b94b      	cbnz	r3, 800a86c <_raise_r+0x32>
 800a858:	4628      	mov	r0, r5
 800a85a:	f000 f831 	bl	800a8c0 <_getpid_r>
 800a85e:	4622      	mov	r2, r4
 800a860:	4601      	mov	r1, r0
 800a862:	4628      	mov	r0, r5
 800a864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a868:	f000 b818 	b.w	800a89c <_kill_r>
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d00a      	beq.n	800a886 <_raise_r+0x4c>
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	d103      	bne.n	800a87c <_raise_r+0x42>
 800a874:	2316      	movs	r3, #22
 800a876:	6003      	str	r3, [r0, #0]
 800a878:	2001      	movs	r0, #1
 800a87a:	e7e7      	b.n	800a84c <_raise_r+0x12>
 800a87c:	2100      	movs	r1, #0
 800a87e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a882:	4620      	mov	r0, r4
 800a884:	4798      	blx	r3
 800a886:	2000      	movs	r0, #0
 800a888:	e7e0      	b.n	800a84c <_raise_r+0x12>
	...

0800a88c <raise>:
 800a88c:	4b02      	ldr	r3, [pc, #8]	@ (800a898 <raise+0xc>)
 800a88e:	4601      	mov	r1, r0
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f7ff bfd2 	b.w	800a83a <_raise_r>
 800a896:	bf00      	nop
 800a898:	20000018 	.word	0x20000018

0800a89c <_kill_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d07      	ldr	r5, [pc, #28]	@ (800a8bc <_kill_r+0x20>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	f7f9 fa3d 	bl	8003d28 <_kill>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	d102      	bne.n	800a8b8 <_kill_r+0x1c>
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	b103      	cbz	r3, 800a8b8 <_kill_r+0x1c>
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000876c 	.word	0x2000876c

0800a8c0 <_getpid_r>:
 800a8c0:	f7f9 ba2a 	b.w	8003d18 <_getpid>

0800a8c4 <_init>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <_fini>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr
